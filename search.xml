<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>疫情下妈妈的生日</title>
      <link href="/noncence/20220406/"/>
      <url>/noncence/20220406/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="4-6"><a href="#4-6" class="headerlink" title="4.6"></a>4.6</h2><p>今天我妈生日，她5点多就被派去支援。不过幸运的是，我托朋友的福抢到了烤鸭和蛋糕，可以为她庆生了。</p><p>最近看到太多大跌眼镜的事情，志愿者挨打致死，主人隔离后狗子被志愿者打死，一个又一个跳楼的人，一桩又一桩难以置信的罪恶。</p><p>其实我没有对上海的这些负面新闻太过惊讶，因为早就见识过很多所谓的上海瘪三。也早就领会过各式各样的恶意。所以，我的宗旨就是自己自由自在，快乐就好，不再奢求被包容，被认可。</p><h2 id="我妈"><a href="#我妈" class="headerlink" title="我妈"></a>我妈</h2><p>这段时间每天5点多就出门了（因为每次我都会被开关门的声音吵醒，而天总是还没有亮），不是去采样，就是去做志愿者，帮大家分发抗原检测试剂，分发补给。她很热衷于和邻里一起为这个小社区的和谐做一些贡献。我可以感受到，这是她的根。虽然我更宁愿做一株浮萍，但我非常理解他们不愿意随我去飘的心。这次疫情，也让我感受到了小社区和谐的重要，大多数人是群居的，并且在这种人口密度大的城市，也只有群居一种选择。</p><p>我们是党员之家，当然除了我。<br>我只希望我的父母不会成为下一批被烧完牺牲的煤渣。</p><p>至于这个城市，路还很长，如果还有机会希望大家能够一一算账；<br>如果没有，没关系，把预期降低，学会怎么规避伤害，保护自己，一定还有善终的可能。</p><p>希望至少能少为老龄后的生活，提心吊胆一些。</p><p>生日快乐。</p>]]></content>
      
      
      <categories>
          
          <category> Nonsense </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React 18 is now available on npm</title>
      <link href="/fe/React/4.react-18/"/>
      <url>/fe/React/4.react-18/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1-Concurrent-React"><a href="#1-Concurrent-React" class="headerlink" title="1. Concurrent React"></a>1. Concurrent React</h2><p>其实 React 16 开始就有 Concurrent 的概念了，尤其是对于 Fiber 的更新，引入了优先级队列的概念。React 17 中的车道模型，Lane 等核心就是为了实现 Concurrent mode 下异步可中断的更新。这些都不算新的内容量。</p><p>React 的三种启动模式：legacy、blocking、concurrent</p><p>此前如果要开启 Concurrent 模式，就需要这样使用 React 入口函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.createRoot(rootNode).render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)</span><br></pre></td></tr></table></figure><p>等下，React 18 好像也是这么开启吧…</p><h4 id="可以使用-lt-StrictMode-gt-来进行-concurrent-相关的-debug，如果安装了-React-DevTools-gt-4-18-0，那么第二次渲染期间的日志现在将以柔和的颜色显示在控制台中。"><a href="#可以使用-lt-StrictMode-gt-来进行-concurrent-相关的-debug，如果安装了-React-DevTools-gt-4-18-0，那么第二次渲染期间的日志现在将以柔和的颜色显示在控制台中。" class="headerlink" title="可以使用 &lt;StrictMode&gt; 来进行 concurrent 相关的 debug，如果安装了 React DevTools &gt; 4.18.0，那么第二次渲染期间的日志现在将以柔和的颜色显示在控制台中。"></a>可以使用 <u><a href="https://reactjs.org/docs/strict-mode.html" target="_blank" rel="noopener">&lt;StrictMode&gt;</a></u> 来进行 concurrent 相关的 debug，如果安装了 <code>React DevTools &gt; 4.18.0</code>，那么第二次渲染期间的日志现在将以柔和的颜色显示在控制台中。</h4><h2 id="2-Automatic-Batching"><a href="#2-Automatic-Batching" class="headerlink" title="2. Automatic Batching"></a>2. Automatic Batching</h2><p>其实 React 16 就有了 Batch 的概念。其目的就是 React 性能优化最重要的一步：减少 render 次数。</p><p>在 React 18 之前，React 中的 Batch 只能在组件的生命周期函数或者合成事件函数中进行批处理。默认情况下，Promise、setTimeout 以及原生事件中不会对其进行批处理。如果需要，可以使用 <code>unstable_batchedUpdates</code> 来实现。</p><p>而在 React 18 中，所有的更新都讲自动批处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Before: only React events were batched.</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  setCount(<span class="function"><span class="params">c</span> =&gt;</span> c + <span class="number">1</span>);</span><br><span class="line">  setFlag(<span class="function"><span class="params">f</span> =&gt;</span> !f);</span><br><span class="line">  <span class="comment">// React will render twice, once for each state update (no batching)</span></span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// After: updates inside of timeouts, promises,</span></span><br><span class="line"><span class="comment">// native event handlers or any other event are batched.</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  setCount(<span class="function"><span class="params">c</span> =&gt;</span> c + <span class="number">1</span>);</span><br><span class="line">  setFlag(<span class="function"><span class="params">f</span> =&gt;</span> !f);</span><br><span class="line">  <span class="comment">// React will only re-render once at the end (that's batching!)</span></span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>如果要退出自动批处理，可以用： <code>flushSync</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  flushSync(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setCount(<span class="number">3</span>);</span><br><span class="line">    setFlag(<span class="literal">true</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// setCount 和 setFlag 为批量更新，结束后</span></span><br><span class="line">  setLoading(<span class="literal">false</span>);</span><br><span class="line">  <span class="comment">// 此方法会触发两次 render</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Transitions"><a href="#3-Transitions" class="headerlink" title="3. Transitions"></a>3. Transitions</h2><p>Transition 的官方定义：</p><blockquote><p>A transition is a new concept in React to distinguish between urgent and non-urgent updates.</p><ul><li><strong>Urgent updates</strong> reflect direct interaction, like typing, clicking, pressing, and so on.</li><li><strong>Transition updates</strong> transition the UI from one view to another.</li></ul></blockquote><p>听起来就是用于优化任务优先级的东西，把特定更新标记为 Transition 来改善用户体验。</p><blockquote><p><u>Updates wrapped in startTransition</u> are handled as <strong>non-urgent</strong> and will be interrupted if more urgent updates like clicks or key presses come in.</p></blockquote><p>那就是说，可以把移到后台，不是那么紧急的更新用 useTransition 包装一下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;startTransition&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Urgent: Show what was typed 【表单操作：紧急】</span></span><br><span class="line">setInputValue(input);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mark any state updates inside as transitions</span></span><br><span class="line">startTransition(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Transition: Show the results 【计算/网络请求：非紧急】</span></span><br><span class="line">  setSearchQuery(input);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在函数组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useTransition &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [isPending, startTransition] = useTransition();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleInput = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    setInputValue(e.target.value) <span class="comment">// 紧急</span></span><br><span class="line"></span><br><span class="line">    startTransition(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      searchForData() <span class="comment">// 非紧急</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://juejin.cn/post/7078511027091931167" target="_blank" rel="noopener">设计一个带有 Transition 的 Button 组件</a>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params">&#123; children, onClick &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [startTransition, isPending] = useTransition();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    startTransition(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      onClick();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;button onClick=&#123;handleClick&#125; disabled=&#123;isPending&#125;&gt;</span><br><span class="line">      &#123;children&#125; &#123;isPending ? <span class="string">'加载中'</span> : <span class="literal">null</span>&#125;</span><br><span class="line">    &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>useTransition 有个可选参数，可以设定超时时间 timeoutMs，但目前的 TS 类型没有开放。</p></blockquote><h2 id="4-useDeferredValue"><a href="#4-useDeferredValue" class="headerlink" title="4. useDeferredValue"></a>4. useDeferredValue</h2><blockquote><p>useDeferredValue lets you defer re-rendering a non-urgent part of the tree. It is similar to debouncing, but has a few advantages compared to it. There is no fixed time delay, so React will attempt the deferred render right after the first render is reflected on the screen. The deferred render is interruptible and doesn’t block user input.</p></blockquote><p>这个 API 和 <code>useTransition</code> 很相似，都是用来标识一些非紧急的内容，延迟更新任务。但 <code>useDeferredValue</code> 是产生一个新的值，这个值作为延时状态(延迟更新的state)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"./styles.css"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useState, useDeferredValue &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [value, setValue] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> deferredValue = useDeferredValue(value, &#123; <span class="attr">timeoutMs</span>: <span class="number">2000</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">      &lt;div&gt;&#123;deferredValue&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;()=&gt;&#123;setValue(deferredValue+1)&#125;&#125;&gt;click me&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="5-Suspense"><a href="#5-Suspense" class="headerlink" title="5. Suspense"></a>5. Suspense</h2><p>Suspense 之前只在 React.lazy 时用于一些懒加载的组件的 <code>UI loading 状态显示</code>，但在 React 18 中</p><blockquote><p>In React 18, we’ve added support for Suspense on the server and expanded its capabilities using concurrent rendering features.</p></blockquote><p>官方说拿它和 useTransition 一起食用更加，大概是用 Suspense 来悬挂延后更新的任务吧。</p><blockquote><p>Suspense in React 18 works best when combined with the transition API. If you suspend during a transition, React will prevent already-visible content from being replaced by a fallback. Instead, React will delay the render until enough data has loaded to prevent a bad loading state.</p></blockquote><p>在 React DOM Server 中，还支持 streaming Suspense on the server</p><ul><li>renderToPipeableStream: for streaming in Node environments.</li><li>renderToReadableStream: for modern edge runtime environments, such as Deno and Cloudflare workers.</li></ul><h2 id="6-useId"><a href="#6-useId" class="headerlink" title="6. useId"></a>6. useId</h2><p>用于在客户端和服务器上生成唯一 ID，同时避免水合不匹配。</p><h2 id="7-useSyncExternalStore"><a href="#7-useSyncExternalStore" class="headerlink" title="7. useSyncExternalStore"></a>7. useSyncExternalStore</h2><p>解决外部 store 开发时的撕裂问题（tear）。</p><h2 id="8-useInsertionEffect"><a href="#8-useInsertionEffect" class="headerlink" title="8. useInsertionEffect"></a>8. useInsertionEffect</h2><p>类似于 useLayoutEFfect，此时无法访问 DOM 节点的引用。</p><h2 id="9-移除了：已卸载组件更新状态警告"><a href="#9-移除了：已卸载组件更新状态警告" class="headerlink" title="9. 移除了：已卸载组件更新状态警告"></a>9. 移除了：已卸载组件更新状态警告</h2><blockquote><p>warning：Can’t perform a React state update on an unmounted component. …</p></blockquote><p>这个非常常见的警告被移除。这个告警出现的本意是警告一些组件卸载后却没有把 event listener 去掉的场景，但有时候其他的一些异步更新 state 也会报这个错误。所以很多时候会写一些 isMounted 的 flag 来判断组件是否卸载，但其实没有必要。</p><h2 id="10-允许组件返回-undefined"><a href="#10-允许组件返回-undefined" class="headerlink" title="10. 允许组件返回 undefined"></a>10. 允许组件返回 undefined</h2><p>在 Suspense fallback 中，传入 undefined 会被忽视，更新后将表现为和 null 一样的行为。</p><h2 id="一些未来可期待的："><a href="#一些未来可期待的：" class="headerlink" title="一些未来可期待的："></a>一些未来可期待的：</h2><ul><li>更强的 Suspense</li><li>Server Component</li></ul><p>还有一点比较感兴趣的是 React blog 提到的 &lt;Offscreen&gt; 组件</p><blockquote><p>Another example is reusable state. Concurrent React can remove sections of the UI from the screen, then add them back later while reusing the previous state. For example, when a user tabs away from a screen and back, React should be able to restore the previous screen in the same state it was in before. In an upcoming minor, we’re planning to add a new component called <Offscreen> that implements this pattern. Similarly, you’ll be able to use Offscreen to prepare new UI in the background so that it’s ready before the user reveals it.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PR 过期了</title>
      <link href="/noncence/20220202-daily/"/>
      <url>/noncence/20220202-daily/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>PR过期了。偶尔还是会想如果前年没怂，狠心上了飞机，在村里买了房，是不是就过上了躺平的日子。下坡路，很顺，生活会帮我做不擅长的选择，但没留下后悔的余地。</p><p>《恶意》大概是我最喜欢的一本东野圭吾的书，平淡的叙事却极具杀伤力，透过一只猫，毁了一个人，就像这个地方，浮躁的言论。</p><p>曾经有过愿意带我离开的人，但最后我还是留在这个庙里扮演了「和尚」。我们做了自己的选择，背道而驰。知足于能像大多数人一样去相遇，已经是不可求的幸运。（仔细想来如果civil partner算领证的话好像已经是离过婚的老男人了…</p><p>犹豫不决最大的原因，就是总能感受到浮躁充斥着生活。不管是购房还是这几年遇到的许许多多事情，在家乡并没有感受多少包容，甚至多次觉得段位不够，不配留在这里。遇到过很多年龄和格局成反比的人，修炼的道行中少了尊重，最后也是自欺欺人。总结来说，如果在一场谈话中你觉得越聊越自闭，多数不是你的问题，优秀的人不会贬低不如他的人，千万不要自卑，容易满身是刺；说实话，当无力面对这些恶意的时候，我很后悔买了那张回国的机票。</p><p>然而也不想再做适应环境的变色龙，逐渐选择用善意敷衍每一个立场相左的人，然后逃离。很多时候，无法交流并不是语言的问题，经历，信仰，不同价值观的立场不需要无意义的沟通。ES6的编译工具，Babel，取自圣经巴别塔的故事，群体的无界交流本身就成了幻灭的愿景。</p><p>但要说出去的几年教会了我的，其实也难描述。最有价值的，也许就是直到最后，给了自己独立的人格，对异类的包容尊重，足够点菜的英语水平，以及可以移民的机会。</p><p>还有就是一塌糊涂的佛系，社交尴尬，美景，奢品，甚至别人向往的两人生活，被灌输的观念，都不重要了。</p><p>你走的时候，那些奋不顾身的勇气执着的特质，也都随你而去，像是它们本身就不属于过我。</p><p>不知是不是家人逐渐意识到我的妥协，所以也放任我在这个框架里保留一些自由。有时候很惭愧，我只会消耗你们毕生的积累，你们作为儿女的时候，可比我做得好太多了。而我内心的愧疚，却也在回来的那一天，回到原点面对现实的那一刻「烟消云散」。</p><p>这几年，感觉老得特别快，恶补了很多缺失的成长。之后，又觉得参透了不少的套路和索然无味的「追求」，人心像是数学题一样被资本解出来，看到其他人的生活，仿佛看到未来的整个人生。悲从中来。</p><p>偶尔会有个念头，是不是所有的一切，只是因为太无聊。人总要有个途径来消耗生命，而这个时代所流行的方式，恰巧就是如此。</p><p>虽然注定是这个年代大铁炉里的煤渣，逐渐失去无限可能；<br>但是未来一定会有更坚定的方向，更多美好的事情，和更洒脱的人生。</p><p>希望我们不管在哪里，多大年龄，选择卷还是躺平，单身还是结了多少次婚，喜欢异性还是同性，入不敷出还是财务自由，事业巅峰还是踉跄家里蹲，都能够一直继续酷下去，不要妥协。适当修剪，拒绝同化。<br>希望我有一个孩子，告诉她不要轻易为我断了翅膀。</p><blockquote><p>『生是你的老百姓，死是你的小精灵。』  –《后会无期》</p></blockquote><img src="/images/noncence/passport.jpeg" width="500px" class="article-image" alt="当然也有可能这些所谓成长都是假象。也许熬着熬着还是关不住内心。如果自由值得用生命去换，那这么点世人目光，这些愧疚，又算得了什么呢。" />    <div id="aplayer-JwRXTdqy" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="7255324553" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86" data-fixed="true" data-loop="none"    ></div>]]></content>
      
      
      <categories>
          
          <category> Nonsense </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端反爬：鼠标轨迹</title>
      <link href="/fe/JavaScript/14.mouse-track/"/>
      <url>/fe/JavaScript/14.mouse-track/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>爬虫不只是单纯地获取信息，也会进行一些自动提交信息的操作。识别 <code>Form</code> 表单提交行为是人或机器有许多方式，最近后端同事提出一种方式：<br>记录用户提交表单前鼠标操作的轨迹，如果每次都一样（或没有），则可以判断是非人为操作。</p><p>结合 <a href="https://github.com/rrweb-io/rrweb" target="_blank" rel="noopener">rrweb</a>(Record and replay the web) 提供的一些能力，我们尝试做了一种方案。</p><p>大致的思路就是，当用户开始对表单进行一系列操作的时候，开始记录鼠标的事件（主要就是移动和点击这两个事件）。当收集到足够信息后返回给服务端进行对比（选择通过Cookie的方式和表单信息一起提交至后端），如果每次表单操作的相似度超过一定预设值（80%）则认为这不是正常的人为操作。</p><p>唯一的问题就是 Cookie 的值要怎么设定。</p><p>最后决定取鼠标开始操作后的 16个经过的点 + 16个点击的点 共32个点 的位置（x，y的值）来记录。</p><img class="article-image" src="/images/case-study/mouse-track/mouse-tracker.jpg" width="500" alt="rrweb 记录的数据" /><p>但如果把这些数据全塞进Cookie传给服务端有点太多了，直接hash的话只要有一点不一样就会完全不同，没有相似度一说。于是我们决定取每个点的 x + y 组合成字符串后取 md5 的第10位，每个点对应一个字符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MD5(<span class="string">`pos_<span class="subst">$&#123;pos.x&#125;</span>_<span class="subst">$&#123;pos.y&#125;</span>`</span>).toString()[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>但有个问题是鼠标基本没怎么操作，不够32个点。于是决定不满的点补0。一旦 0 表示的是空缺，那 md5 取到的正好是 0 的情况就需要跳过。一种是往后取一位直到取不到 0，或者直接不用这个点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.map(<span class="function"><span class="params">str</span> =&gt;</span> str.padEnd(<span class="number">16</span>, <span class="string">'0'</span>)) <span class="comment">// 不足16位补0</span></span><br></pre></td></tr></table></figure><img class="article-image" src="/images/case-study/mouse-track/id.jpg" width="300" alt="红色为移动，蓝色为点击，不足补零" /><br /><p>有些极端情况，没有鼠标和触摸板，只用 tab 去操作页面，这时候32位全是0，这种情况暂不考虑；<br>还有个情况是用户迟迟不提交，会记录冗余的点数，所以当获取到200个鼠标事件的时候，就停止记录。</p><p>由于每个点都单独取 md5，并且验证的是相似程度，所以不用担心取的时间有差异，只要经过了一系列的点，都会记录对应字符。</p><p>准备好后接下去只要将它命名，设置成会话Cookie，在表单提交的时候一并交给后端。</p>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>听了老板建硕的一个分享</title>
      <link href="/noncence/20220127-daily/"/>
      <url>/noncence/20220127-daily/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>非常有共鸣的一句话：</p><blockquote><p><em>人最怕的就是自由。</em></p></blockquote><p>我们总是向往自由，但付出的代价就是做选择。</p><p>过去10年，虽然可以选的路很多，也经历了很多，但不管做了什么选择，总会有另一个巨大的遗憾。<br>一开始非常难以取舍，觉得路宽了，反倒是巨大的压力。</p><p>但后来渐渐地，选择的焦虑变得很淡，意识到，最怕的不是选错，而是在原地转得太久。<br>不管获得的是什么，遗憾是什么，总会有更多的经历，让我看明白更多的事情。</p><p>习惯自由，习惯失去。</p><p>还有学习到的一个实用的编程小技巧：</p><blockquote><p><em>写完代码，<code>Ctrl</code> + <code>A</code>，<code>delete</code>，重新写一遍。</em></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Nonsense </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一些 Webpack 相关备忘</title>
      <link href="/webpack/3.webpack-base/"/>
      <url>/webpack/3.webpack-base/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="基本打包过程"><a href="#基本打包过程" class="headerlink" title="基本打包过程"></a>基本打包过程</h2><h3 id="0-配置文件"><a href="#0-配置文件" class="headerlink" title="0. 配置文件"></a>0. 配置文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.ts'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-解析入口文件"><a href="#1-解析入口文件" class="headerlink" title="1. 解析入口文件"></a>1. 解析入口文件</h3><p>1.1 解析入口文件得到 AST</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const fs = require("fs");</span></span><br><span class="line"><span class="keyword">const</span> fileBuffer = fs.readFileSync(filename, <span class="string">"utf-8"</span>);</span><br><span class="line"><span class="comment">// const parser = require("@babel/parser);</span></span><br><span class="line"><span class="keyword">const</span> ast = parser.parse(fileBuffer, &#123; <span class="attr">sourceType</span>: <span class="string">"module"</span> &#125;);</span><br></pre></td></tr></table></figure><p>1.2 遍历 AST 收集依赖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> deps = &#123;&#125;; <span class="comment">// 依赖</span></span><br><span class="line">traverse(ast, &#123;</span><br><span class="line">  ImportDeclaration(&#123; node &#125;) &#123;</span><br><span class="line">    <span class="comment">// const path = require('path');</span></span><br><span class="line">    <span class="keyword">const</span> dirname = path.dirname(filename);</span><br><span class="line">    <span class="keyword">const</span> absPath = <span class="string">"./"</span> + path.join(dirname, node.source.value);</span><br><span class="line">    deps[node.source.value] = absPath;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>1.3 babel 编译</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码转换</span></span><br><span class="line"><span class="keyword">const</span> &#123; code &#125; = babel.transformFromAst(ast, <span class="literal">null</span>, &#123;</span><br><span class="line">  presets: [<span class="string">"@babel/preset-env"</span>],</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> moduleInfo = &#123; filename, deps, code &#125;;</span><br></pre></td></tr></table></figure><h3 id="2-获取模块依赖图"><a href="#2-获取模块依赖图" class="headerlink" title="2. 获取模块依赖图"></a>2. 获取模块依赖图</h3><p>将 1.0 的步骤封装为 <code>parse</code> 函数，返回值是最后的 <code>moduleInfo</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> entry = parse(<span class="string">'入口文件'</span>); <span class="comment">// 返回 &#123; filename, deps, code &#125;</span></span><br><span class="line"><span class="keyword">const</span> temp = [entry];</span><br><span class="line"><span class="comment">// 遍历模块的依赖</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> entry.deps) &#123;</span><br><span class="line">  <span class="keyword">if</span> (deps.hasOwnProperty(key)) &#123;</span><br><span class="line">    temp.push(parse(entry.deps[key]));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-生成最终执行的代码-打包产物是一个-IIFE"><a href="#3-生成最终执行的代码-打包产物是一个-IIFE" class="headerlink" title="3. 生成最终执行的代码 (打包产物是一个 IIFE)"></a>3. 生成最终执行的代码 (打包产物是一个 IIFE)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">generate(graph, entry) &#123;</span><br><span class="line">  <span class="comment">// 是一个立即执行函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`(function(graph)&#123;</span></span><br><span class="line"><span class="string">      function require(file) &#123;</span></span><br><span class="line"><span class="string">          var exports = &#123;&#125;;</span></span><br><span class="line"><span class="string">          function absRequire(relPath)&#123;</span></span><br><span class="line"><span class="string">              return require(graph[file].deps[relPath])</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">          (function(require, exports, code)&#123;</span></span><br><span class="line"><span class="string">              eval(code)</span></span><br><span class="line"><span class="string">          &#125;)(absRequire, exports, graph[file].code)</span></span><br><span class="line"><span class="string">          return exports</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      require('<span class="subst">$&#123;entry&#125;</span>')</span></span><br><span class="line"><span class="string">  &#125;)(<span class="subst">$&#123;graph&#125;</span>)`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-打包输出"><a href="#4-打包输出" class="headerlink" title="4. 打包输出"></a>4. 打包输出</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="attr">path</span>: dirPath, filename &#125; = output <span class="comment">// 配置里的output;</span></span><br><span class="line"><span class="keyword">const</span> outputPath = path.join(dirPath, filename);</span><br><span class="line"><span class="keyword">if</span>(!fs.existsSync(dirPath))&#123;</span><br><span class="line">    fs.mkdirSync(dirPath)</span><br><span class="line">&#125;</span><br><span class="line">fs.writeFileSync(outputPath, code, <span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure><p>以上就完成了一个基础的打包。</p><h2 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h2><p>每个 loader 会链式地顺序执行，<br>每个 loader 只秉承单一职责并且独立，<br>loader 输入与输出均为字符串，<br>loader 本质上是一个函数。</p><h3 id="写一个把-txt-文件内容转为大写的-loader"><a href="#写一个把-txt-文件内容转为大写的-loader" class="headerlink" title="写一个把 .txt 文件内容转为大写的 loader"></a>写一个把 .txt 文件内容转为大写的 loader</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./loaders/txt-uppercase-loader.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">src</span>) </span>&#123;</span><br><span class="line">  src = src.toUpperCase();</span><br><span class="line">  <span class="keyword">return</span> src;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.txt$/</span>,</span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        <span class="string">'./loaders/txt-uppercase-loader.js'</span></span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h2><p>webpack 构建生命周期是可以通过它提供多一些 api 获取到的。</p><ul><li>初始化参数</li><li>开始编译</li><li>确定入口</li><li>编译模块</li><li>完成模块编译</li><li>输出资源</li><li>输出完成</li><li>… <a href="https://webpack.js.org/api/compiler-hooks" target="_blank" rel="noopener">完整生命周期函数</a></li></ul><p>plugin 的作用就是基于<strong>事件流机制工作</strong>，监听 webpack 打包过程中的某些事件，修改打包结果。</p><ul><li>plugin 是一个具有 apply 方法的 JavaScript 对象。(apply 方法会被 webpack compiler 调用，并且在整个编译生命周期都可以访问 compiler 对象。)</li><li>plugin 应当是一个 class 或是 构造函数。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCoolWebpackPlugin</span> </span>&#123;</span><br><span class="line">  <span class="comment">// compiler 对象代表了完整的 webpack 环境配置，这个对象在启动 webpack 时被一次性建立</span></span><br><span class="line">  <span class="comment">// 可以使用它来访问 webpack 的主环境</span></span><br><span class="line">  apply(compiler) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="实现一个创建-HTML-文件并引入打包后的-js-的-Plugin"><a href="#实现一个创建-HTML-文件并引入打包后的-js-的-Plugin" class="headerlink" title="实现一个创建 HTML 文件并引入打包后的 js 的 Plugin"></a>实现一个创建 HTML 文件并引入打包后的 js 的 Plugin</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pluginName = <span class="string">"MyHtmlWebpackPlugin"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHtmlWebpackPlugin</span> </span>&#123;</span><br><span class="line">  apply(compiler) &#123;</span><br><span class="line">    <span class="keyword">const</span> filename = compiler.options.output.filename;</span><br><span class="line">    compiler.hooks.emit.tapAsync(pluginName, (compilation, callback) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> content = <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">      &lt;html&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;</span></span><br><span class="line"><span class="string">          &lt;meta charset="utf-8"&gt;</span></span><br><span class="line"><span class="string">          &lt;title&gt;Webpack&lt;/title&gt;</span></span><br><span class="line"><span class="string">          &lt;script defer src="./<span class="subst">$&#123;filename&#125;</span>"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">        &lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;/body&gt;</span></span><br><span class="line"><span class="string">      &lt;/html&gt;</span></span><br><span class="line"><span class="string">      `</span>;</span><br><span class="line">      <span class="comment">// 将这个文件作为一个新的文件资源，插入到 webpack 构建中：</span></span><br><span class="line">      compilation.assets[<span class="string">"index.html"</span>] = &#123;</span><br><span class="line">        source: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> content;</span><br><span class="line">        &#125;,</span><br><span class="line">        size: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> content.length;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">      callback();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = MyHtmlWebpackPlugin;</span><br></pre></td></tr></table></figure><p>在配置中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  plugins: [<span class="keyword">new</span> MyHtmlWebpackPlugin()],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>青岛跨年</title>
      <link href="/photo/2.2022-qingdao/"/>
      <url>/photo/2.2022-qingdao/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>一次非常说走就走的旅行。<br>只是因为很想看海，然后发现了青岛的机票很便宜，于是果断就去了。</p><p><img src="/images/iphone/qingdao/1.jpeg" alt="海边的警示牌"><br><img src="/images/iphone/qingdao/2.jpeg" width="100%" alt="小麦岛非常美" /><br><img src="/images/iphone/qingdao/3.jpeg" width="100%" alt="海边钓鱼的老人" /><br><img src="/images/iphone/qingdao/4.jpeg" width="100%" alt="海钓人的背影" /><br><img src="/images/iphone/qingdao/5.jpeg" width="100%" alt="海景酒店的窗外" /><br><img src="/images/iphone/qingdao/6.jpeg" width="100%" alt="夜景" /><br><img src="/images/iphone/qingdao/7.jpeg" width="100%" alt="夏天与海 与冬泳的人" /><br><img src="/images/iphone/qingdao/8.jpeg" width="100%" alt="海岸的救生圈" /><br><img src="/images/iphone/qingdao/9.jpeg" width="100%" alt="信号山的眺望" /><br>2022 新年快乐。</p>    <div id="aplayer-BUTEpJEd" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1330348068" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme=" #5384c9" data-mini="true" data-fixed="true"    ></div>]]></content>
      
      
      <categories>
          
          <category> Photograph </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>私有 npm 仓库 Nexus &amp; 工具库配合 GitLab 自动发布</title>
      <link href="/fe/Engineering/1.private-npm-nexus/"/>
      <url>/fe/Engineering/1.private-npm-nexus/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- >  --><h2 id="1-搭建-Nexus"><a href="#1-搭建-Nexus" class="headerlink" title="1. 搭建 Nexus"></a>1. 搭建 Nexus</h2><p>这部分内容网上有非常多的教程可以参考。</p><h3 id="1-1-本地临时起个-docker-container-用于玩耍"><a href="#1-1-本地临时起个-docker-container-用于玩耍" class="headerlink" title="1.1 本地临时起个 docker container 用于玩耍"></a>1.1 本地临时起个 docker container 用于玩耍</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull sonatype/nexus3  <span class="comment"># 官方镜像</span></span><br></pre></td></tr></table></figure><p>创建 Container 设置本地端口 8000<br><img class="article-image" src="/images/case-study/nexus-repository/localhost-8000.png" alt="本地访问 localhost:8000" /><br>打开后在会提示<code>admin</code>的密码在这个文件里：<code>/nexus-data/admin.password</code><br>照做后进入界面。</p><h3 id="1-2-创建-blob-存储"><a href="#1-2-创建-blob-存储" class="headerlink" title="1.2 创建 blob 存储"></a>1.2 创建 blob 存储</h3><img class="article-image" src="/images/case-study/nexus-repository/blob-create.png" alt="npm-hub" /><p>之后的内容可以参考这篇文章：<a href="https://www.cnblogs.com/54chensongxia/p/14930128.html" target="_blank" rel="noopener">使用Nexus搭建npm私服</a><br>简述一下就是创建了 2 个 npm 的 Repository + 1 个 group</p><ol><li>local-npm 本地自己的仓库</li><li>proxy-npm 远程仓库地址</li><li>group-npm 将2个仓库，添加到group中</li></ol><h4 id="可以修改的一处是加一个淘宝的镜像-registry-的-Repository"><a href="#可以修改的一处是加一个淘宝的镜像-registry-的-Repository" class="headerlink" title="可以修改的一处是加一个淘宝的镜像 registry 的 Repository"></a>可以修改的一处是加一个淘宝的镜像 registry 的 Repository</h4><p>命名为：taobao-npm<br>Proxy 填写：<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br>并且也加到刚才的 <code>group-npm</code> 中。</p><h4 id="另外值得注意的是-local-npm-中，Deployment-policy-的设置可以是："><a href="#另外值得注意的是-local-npm-中，Deployment-policy-的设置可以是：" class="headerlink" title="另外值得注意的是 local-npm 中，Deployment policy 的设置可以是："></a>另外值得注意的是 local-npm 中，<code>Deployment policy</code> 的设置可以是：</h4><ol><li>Allow redeploy</li><li>Disable redeploy<br>…<br>用来控制 npm publish 的时候，相同的版本号是否允许发布并且覆盖原来的内容，这个根据实际策略来决定，我们最终方案选择保留两个本地仓库，一个允许覆盖，一个严格要求版本号递增。</li></ol><h4 id="还有一个要做的是在-Realms-中把-npm-Bearer-Token-Realm-加到右边的-Active-列表中"><a href="#还有一个要做的是在-Realms-中把-npm-Bearer-Token-Realm-加到右边的-Active-列表中" class="headerlink" title="还有一个要做的是在 Realms 中把 npm Bearer Token Realm 加到右边的 Active 列表中"></a>还有一个要做的是在 Realms 中把 <code>npm Bearer Token Realm</code> 加到右边的 Active 列表中</h4><img class="article-image" src="/images/case-study/nexus-repository/realms.png" alt="Realms" /><h2 id="2-使用私有-npm-仓库"><a href="#2-使用私有-npm-仓库" class="headerlink" title="2. 使用私有 npm 仓库"></a>2. 使用私有 npm 仓库</h2><p>在 Repository 中找到 local-npm，点击 copy 可以看到本地仓库的地址<br><img class="article-image" width="500" src="/images/case-study/nexus-repository/registry-url.png" alt="local-npm registry" /></p><p>然后在实际的项目中修改 registry(仓库组的那个地址) 就可以使用了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry http://localhost:8000/repository/group-npm/</span><br></pre></td></tr></table></figure><p>或者， 避免在全局修改 registry，可以在项目根目录下的 <code>.npmrc</code> 文件中加入：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">registry=http:<span class="regexp">//</span>localhost:<span class="number">8000</span><span class="regexp">/repository/g</span>roup-npm<span class="regexp">/</span></span><br></pre></td></tr></table></figure><p><small><em>如果有 401 错误，记得检查一下有没有在 Realms 中把 <code>npm Bearer Token Realm</code> 加到右边的 Active 列表中</em></small><br><small><em>也要注意 .npmrc 中是否已经配置过别的 registry</em></small></p><ul><li>第一次 install 会比较缓慢，但是每次下载依赖的时候 Nexus 会缓存一份，所以下一次下载会很快</li></ul><h2 id="3-npm-publish-发布到私有-Nexus-仓库中"><a href="#3-npm-publish-发布到私有-Nexus-仓库中" class="headerlink" title="3. npm publish 发布到私有 Nexus 仓库中"></a>3. npm publish 发布到私有 Nexus 仓库中</h2><p>在发布之前需要看一下用户权限问题。</p><ul><li><p>使用 <code>admin</code> 用户来发布当然是没有问题，但是以后一定会分不同的权限角色，不能将 <code>admin</code> 的权限给所有发布的人。</p><ol><li><p>可以在 Nexus 中创建一个用于允许<code>发布</code>的角色 <code>nx-deploy</code>。</p><img class="article-image" src="/images/case-study/nexus-repository/nexus-role.png" alt="创建 deploy 角色" /><p>并且给这个角色 <code>nx-component-upload</code> 和 <code>nx-repository-view</code> 的权限</p></li><li><p>基于这个角色，创建一个可以发布的用户： 下图中的 <code>deployment</code></p><img class="article-image" src="/images/case-study/nexus-repository/user-create.png" alt="创建 deployment 用户" /></li></ol></li></ul><p>有了这个用户后就可以登录了。</p><ol><li>npm login<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm login --registry=<span class="string">http:</span><span class="comment">//localhost:8000/repository/local-npm/</span></span><br><span class="line"><span class="string">username:</span> deployment</span><br><span class="line"><span class="string">password:</span> xxxx</span><br></pre></td></tr></table></figure>注意是本地仓库的地址，而不是安装时的 registry</li></ol><p><small><em>如果登录失败可以检查一下 .npmrc 中的 registry 或者 有无已经配置的用户名密码</em></small></p><ol start="2"><li>npm publish<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish --registry=http:<span class="regexp">//</span>localhost:<span class="number">8000</span><span class="regexp">/repository/</span>local-npm<span class="regexp">/</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="4-使用-GitLab-CI-把发布自动化"><a href="#4-使用-GitLab-CI-把发布自动化" class="headerlink" title="4. 使用 GitLab CI 把发布自动化"></a>4. 使用 GitLab CI 把发布自动化</h2><p>自动化就要省去所有手敲命令</p><ol><li><p>首先在工具库项目下的 <code>package.json</code> 文件中加入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"publishConfig"</span>: &#123;</span><br><span class="line">  <span class="string">"registry"</span>: <span class="string">"http://localhost:8000/repository/local-npm/"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>.npmrc</code> 文件中</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">registry</span>=http://localhost:<span class="number">8000</span>/repository/group-npm/</span><br><span class="line"><span class="attr">always-auth</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">_auth</span>=ZGVwbG95bWVudDoxMjMxMjM=</span><br></pre></td></tr></table></figure><p><em>_auth 的生成方式是：base64Encode(&lt;username&gt;:&lt;password&gt;)</em></p></li></ol><p><em>如果觉得这样写 token 不安全，可以将 token 放到 GitLab 的换进环境变量中，然后在 CI 中写入 .npmrc：</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- <span class="built_in">echo</span> <span class="string">"http://localhost:8000/repository/group-npm/:_authToken=<span class="variable">$&#123;NPM_TOKEN&#125;</span>"</span> &gt; .npmrc</span><br></pre></td></tr></table></figure><ol start="3"><li>配置 <code>.gitlab-ci.yml</code></li></ol><p>简述一下步骤就是:</p><ul><li>build 生成发布所需的 dist/</li><li>执行 npm publish</li></ul><p>可以参考：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">一个有node环境的基础镜像即可</span></span><br><span class="line"></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">publish</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">before_script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">i</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node_modules/</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dist/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">npm-publish:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">publish</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">manual</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">publish</span></span><br></pre></td></tr></table></figure><p><em>有人喜欢把 build 放在 script 里的 prepublishOnly，那这里就可以跳过 build 阶段</em></p><h2 id="5-TODO-使用-git-hook-自动更新版本号"><a href="#5-TODO-使用-git-hook-自动更新版本号" class="headerlink" title="5. TODO: 使用 git hook 自动更新版本号"></a>5. TODO: 使用 git hook 自动更新版本号</h2><p><em>tbc…</em></p>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DevOps </tag>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>稀土大会记录</title>
      <link href="/reading/7.meituan-micro-fe/"/>
      <url>/reading/7.meituan-micro-fe/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><img class="article-image" src="/images/case-study/handwrite/mtwqd.jpg" alt="" />]]></content>
      
      
      <categories>
          
          <category> Reading Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百姓网反爬虫系统：神盾管理后台</title>
      <link href="/case-study/shield/"/>
      <url>/case-study/shield/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="一、数据看板"><a href="#一、数据看板" class="headerlink" title="一、数据看板"></a>一、数据看板</h2><img src="/images/case-study/shield/shield-1.png" alt="数据看板" /><h3 id="1-1-筛选查看条件"><a href="#1-1-筛选查看条件" class="headerlink" title="1.1 筛选查看条件"></a>1.1 筛选查看条件</h3><img src="/images/case-study/shield/shield-2.png" alt="筛选条件" />打开网址 http://shield.baixing.cn 后会默认跳转到看板页面。首先选择想要查看情况的业务线、日期跨度、想要查询的IP等查询条件，可以筛选展示的信息维度。<h3 id="1-2-总数统计"><a href="#1-2-总数统计" class="headerlink" title="1.2 总数统计"></a>1.2 总数统计</h3><img src="/images/case-study/shield/shield-3.png" alt="总数统计" />根据选择的日期跨度，将显示所选范围的：恶意请求数、攻击源数、处理日志量、易受攻击时段。<h3 id="1-3-威胁走势图表"><a href="#1-3-威胁走势图表" class="headerlink" title="1.3 威胁走势图表"></a>1.3 威胁走势图表</h3><img src="/images/case-study/shield/shield-4.png" alt="威胁走势" />展示了时间范围内发生威胁事件的次数走势。<h3 id="1-4-主要攻击源"><a href="#1-4-主要攻击源" class="headerlink" title="1.4 主要攻击源"></a>1.4 主要攻击源</h3><img src="/images/case-study/shield/shield-5.png" alt="主要攻击源" />展示了攻击源IP的详细情况。<h3 id="1-5-威胁等级分布"><a href="#1-5-威胁等级分布" class="headerlink" title="1.5 威胁等级分布"></a>1.5 威胁等级分布</h3><img src="/images/case-study/shield/shield-6.png" alt="威胁等级分布" />展示了不同等级威胁数的占比。<h3 id="1-6-威胁等级走势"><a href="#1-6-威胁等级走势" class="headerlink" title="1.6 威胁等级走势"></a>1.6 威胁等级走势</h3><img src="/images/case-study/shield/shield-7.png" alt="威胁等级走势" />展示了范围日期内威胁等级的走势情况。<h3 id="1-7-主要状态码走势"><a href="#1-7-主要状态码走势" class="headerlink" title="1.7 主要状态码走势"></a>1.7 主要状态码走势</h3><img src="/images/case-study/shield/shield-8.png" alt="主要状态码走势" />展示了状态码的走势。<h3 id="1-8-原因走势"><a href="#1-8-原因走势" class="headerlink" title="1.8 原因走势"></a>1.8 原因走势</h3><img src="/images/case-study/shield/shield-9.png" alt="原因走势" />展示了原因走势。<h3 id="1-9-地域分布"><a href="#1-9-地域分布" class="headerlink" title="1.9 地域分布"></a>1.9 地域分布</h3><img src="/images/case-study/shield/shield-10.png" alt="地域分布" />展示了威胁的地域分布。<h2 id="二、威胁回溯"><a href="#二、威胁回溯" class="headerlink" title="二、威胁回溯"></a>二、威胁回溯</h2><img src="/images/case-study/shield/shield-11.png" alt="威胁回溯" />可以查看攻击源的详细分析。<h3 id="2-1-筛选列表"><a href="#2-1-筛选列表" class="headerlink" title="2.1 筛选列表"></a>2.1 筛选列表</h3><img src="/images/case-study/shield/shield-12.png" alt="筛选列表" />通过和看板中相似的筛选功能，筛选出想要查看的攻击源列表，和威胁等级的分布走势情况。<h3 id="2-2-威胁事件剖析"><a href="#2-2-威胁事件剖析" class="headerlink" title="2.2 威胁事件剖析"></a>2.2 威胁事件剖析</h3><img src="/images/case-study/shield/shield-13.png" alt="威胁事件剖析" />点击列表中其中一个攻击源后，展示该事件的详细分析，包括：攻击情况、应用层攻击行为画像、主要攻击的URL和URL模型。<h3 id="2-3-攻击源分析"><a href="#2-3-攻击源分析" class="headerlink" title="2.3 攻击源分析"></a>2.3 攻击源分析</h3><img src="/images/case-study/shield/shield-14.png" alt="攻击源分析" />对于攻击源（IP）情况的分析，包括：基础信息、主要攻击时段、地理位置信息。<h3 id="2-4-原始日志"><a href="#2-4-原始日志" class="headerlink" title="2.4 原始日志"></a>2.4 原始日志</h3><img src="/images/case-study/shield/shield-15.png" alt="原始日志" />攻击源的原始日志查看。<h2 id="三、应用设置"><a href="#三、应用设置" class="headerlink" title="三、应用设置"></a>三、应用设置</h2><img src="/images/case-study/shield/shield-16.png" alt="应用设置" />点击左侧应用设置，进入设置界面。主要包括了：基础配置、实时引擎、通用规则。<h3 id="3-1-基础配置"><a href="#3-1-基础配置" class="headerlink" title="3.1 基础配置"></a>3.1 基础配置</h3><p>选择和编辑业务以及域名：<br><img src="/images/case-study/shield/shield-17.png" style="width:300px" /></p><p>在页面左侧可以点击业务区域的齿轮，进行修改。</p><p>选择一个域名后也可以对其进行修改和删除操作：<br><img src="/images/case-study/shield/shield-18.png" style="width:500px" /></p><p>针对域名配置黑白名单：<br><img src="/images/case-study/shield/shield-19.png" /></p><p>在左侧选择要配置的业务和域名，会展示三个黑白名，分别为User Agent 白名单、User Agent 黑名单、IP 白名单。进行相关配置。</p><h3 id="3-2-实时引擎"><a href="#3-2-实时引擎" class="headerlink" title="3.2 实时引擎"></a>3.2 实时引擎</h3><img src="/images/case-study/shield/shield-20.png" alt="实时引擎" />选择实时引擎后，为所选业务下的域名配置规则。规则分为标准算法模型以及自定义规则。<img src="/images/case-study/shield/shield-21.png" alt="标准算法模型" />标准算法模型可以将需要的模型从规则池中拖入当前域名下的配置中。<img src="/images/case-study/shield/shield-22.png" alt="自定义规则" />自定义规则可以配置该域名下独有的规则。<h3 id="3-3-通用规则"><a href="#3-3-通用规则" class="headerlink" title="3.3 通用规则"></a>3.3 通用规则</h3><p>标准算法模型的规则池可以在通用规则页面进行修改，会作用到已经配置的域名下。<br><img src="/images/case-study/shield/shield-23.png" alt="通用规则" /></p><p>支持新建以及编辑：<br>新建：<br><img src="/images/case-study/shield/shield-25.png" style="width:200px" /><br>编辑：<br><img src="/images/case-study/shield/shield-24.png" style="width:400px" /></p><h2 id="四、IP命中记录"><a href="#四、IP命中记录" class="headerlink" title="四、IP命中记录"></a>四、IP命中记录</h2><img src="/images/case-study/shield/shield-26.png" alt="IP命中记录" />IP命中记录页面，可以查看IP命中的历史以及更新IP命中分数。类型为auto的是引擎自动触发，类型为manual的是通过手动提交如下表单后创建。<h2 id="五、数据大盘"><a href="#五、数据大盘" class="headerlink" title="五、数据大盘"></a>五、数据大盘</h2><p><a href="/case-study/earth-globe">地球效果实现</a></p><img src="/images/case-study/shield/shield-27.png" alt="数据大盘" /><p>数据大盘页面可以全屏监控实时的威胁请求。</p><h3 id="5-1-实时原因走势"><a href="#5-1-实时原因走势" class="headerlink" title="5.1 实时原因走势"></a>5.1 实时原因走势</h3><p>展示了过去5分钟实时的威胁原因走势。</p><h3 id="5-2-实时当日数据汇总"><a href="#5-2-实时当日数据汇总" class="headerlink" title="5.2 实时当日数据汇总"></a>5.2 实时当日数据汇总</h3><p>展示了当日聚合的总数包括：<br>今日威胁事件数、今日攻击源数、今日处理日志数、今日恶意请求数。</p><h3 id="5-3-实时处理日志量"><a href="#5-3-实时处理日志量" class="headerlink" title="5.3 实时处理日志量"></a>5.3 实时处理日志量</h3><p>展示了5分钟内，每分钟实时处理的日志量。</p><h3 id="5-3-实时威胁情况"><a href="#5-3-实时威胁情况" class="headerlink" title="5.3 实时威胁情况"></a>5.3 实时威胁情况</h3><p>展示了5分钟内，实时威胁情况。</p><h3 id="5-4-实时威胁事件"><a href="#5-4-实时威胁事件" class="headerlink" title="5.4 实时威胁事件"></a>5.4 实时威胁事件</h3><p>展示了5分钟内，实时威胁事件列表。</p><h3 id="5-4-实时请求演示"><a href="#5-4-实时请求演示" class="headerlink" title="5.4 实时请求演示"></a>5.4 实时请求演示</h3><p>以3d动画方式展示了实时请求来源的行为。</p>]]></content>
      
      
      <categories>
          
          <category> Case Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微前端在基础架构应用系列的实践</title>
      <link href="/case-study/micro-front-end/"/>
      <url>/case-study/micro-front-end/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>基础架构组在搭建一套由许多个应用组成的系列应用，共享同一套用户体系（包含鉴权登录、权限管理、企业微信组织架构）。</p><p>目前的应用大致有：</p><ul><li>员工管理平台</li><li>数据库管理平台</li><li>运维自动化平台</li><li>项目发布平台（k8s）</li><li>微服务、定时任务管理平台</li><li>…</li></ul><p>这就涉及到了用户体系的共享方案。</p><ol><li>做一个登录服务和导航页，统一在 <code>login.xxx.com</code> 下完成登录，并跳转回对应的网址。</li><li>微前端，主应用完成登录，使用顶部导航菜单在同一个网页来切换微应用，将用户信息下传。</li></ol><p>由于这些平台在前端框架选择上比较类似，决定使用 Umi.js，统一风格，并且我们需要可以非常方便地根据登录用户，在导航中插拔可访问的微应用。<br>最后选择了 Umi.js 自带的微前端（<a href="https://umijs.org/zh-CN/plugins/plugin-qiankun" target="_blank" rel="noopener">乾坤插件</a>）。</p><h2 id="主应用"><a href="#主应用" class="headerlink" title="主应用"></a>主应用</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>主应用只需要两个模块：</p><ul><li>登录（获取到 token）</li><li>获取用户权限信息（一棵树）</li></ul><p>考虑到主应用的轻量，不需要太多框架型的东西存在，最后选择用 <a href="https://reactjs.org/docs/create-a-new-react-app.html" target="_blank" rel="noopener">CRA</a> + <a href="https://qiankun.umijs.org/" target="_blank" rel="noopener">乾坤</a> 来搭建。</p><img src="/images/case-study/fengchu/fengchu-1.png" alt="主应用（凤雏）登录界面" /><img src="/images/case-study/fengchu/fengchu-2.png" alt="顶部菜单（根据权限渲染）" /><img src="/images/case-study/fengchu/fengchu-3.png" alt="人员角色分配（人员管理微应用的功能）" style="margin:auto;width:400px;" /><h3 id="2-通过接口获取到需要注册的微应用，并挂载"><a href="#2-通过接口获取到需要注册的微应用，并挂载" class="headerlink" title="2. 通过接口获取到需要注册的微应用，并挂载"></a>2. 通过接口获取到需要注册的微应用，并挂载</h3><p>确定一个挂载微应用的 DOM</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> LAYOUT_ROUTES: &#123;</span><br><span class="line">  [key: string]: JSX.Element</span><br><span class="line">&#125; = &#123;</span><br><span class="line">  <span class="string">'/'</span>: <span class="xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">"/fengchu-admin"</span> /&gt;</span></span>,</span><br><span class="line">  <span class="string">'/**'</span>: (</span><br><span class="line">    &lt;Layout&gt;</span><br><span class="line">      &lt;div id=<span class="string">"container"</span> /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Layout&gt;</span></span><br><span class="line"><span class="regexp">  ),</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><p>通过接口获取到的 entries 动态挂载微应用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; registerMicroApps, start &#125; <span class="keyword">from</span> <span class="string">'qiankun'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// entries 是获取到的一棵权限树，在人员管理平台里配置，通过这个信息来注册登录者能看到的微应用</span></span><br><span class="line"><span class="keyword">const</span> entries = <span class="keyword">await</span> api()</span><br><span class="line"></span><br><span class="line">useEffect(</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> microApps = entries?.children</span><br><span class="line">      .reduce(<span class="function">(<span class="params">acc: AppEntry[], current</span>) =&gt;</span> ([...acc, current, ...current.children]), [])</span><br><span class="line">      .map(<span class="function">(<span class="params">item</span>) =&gt;</span> (&#123;</span><br><span class="line">        name: item.name,</span><br><span class="line">        entry: <span class="string">`http://<span class="subst">$&#123;item.domain&#125;</span>`</span>,</span><br><span class="line">        container: <span class="string">'#container'</span>,</span><br><span class="line">        activeRule: item.activeRule,</span><br><span class="line">        props: &#123;</span><br><span class="line">          profile, <span class="comment">// 传入用户信息</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)) || [];</span><br><span class="line">    registerMicroApps(microApps);</span><br><span class="line"></span><br><span class="line">    start();</span><br><span class="line">  &#125;, [entries],</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="3-css-优化"><a href="#3-css-优化" class="headerlink" title="3. css 优化"></a>3. css 优化</h3><p>这个项目里暂时不打算用 ShadowDom 来挂载微应用，所以不打开乾坤的沙盒模式。主应用的样式采用 css-in-js 的方案来隔离。最后选择了 <a href="https://github.com/emotion-js/emotion" target="_blank" rel="noopener">emotion</a>。</p><img src="/images/case-study/fengchu/fengchu-4.png" alt="css" style="width:400px;margin:auto;" /><img src="/images/case-study/fengchu/fengchu-5.png" alt="css build" style="width:350px;margin:auto;" /><img src="/images/case-study/fengchu/fengchu-6.png" alt="css build" style="width:300px;margin:auto;" /><h2 id="微应用"><a href="#微应用" class="headerlink" title="微应用"></a>微应用</h2><h3 id="1-接入"><a href="#1-接入" class="headerlink" title="1. 接入"></a>1. 接入</h3><p>微应用统一用了 Umi.js 所以接入起来非常方便。</p><p>第一步：在 <code>.umirc.js</code> 或 <code>config.js</code> 修改框架配置的地方添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  qiankun: &#123;</span><br><span class="line">    slave: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>第二步：<code>app.tsx</code> 中添加生命周期钩子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> qiankun = &#123;</span><br><span class="line">  <span class="comment">// 应用加载之前</span></span><br><span class="line">  <span class="keyword">async</span> bootstrap() &#123;&#125;,</span><br><span class="line">  <span class="comment">// 应用 render 之前触发</span></span><br><span class="line">  <span class="keyword">async</span> mount() &#123;&#125;,</span><br><span class="line">  <span class="comment">// 应用卸载之后触发</span></span><br><span class="line">  <span class="keyword">async</span> unmount() &#123;&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样基本上就可以联通了，然后做一些界面的更新。</p><p>微应用本身也是有顶部菜单栏的，有logo和头像，如果通过主应用打开，那就不需要自身的菜单了。</p><p>在 <code>app.tsx</code> 中添加：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> layout: RunTimeLayoutConfig = <span class="function">(<span class="params">&#123; initialState &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    headerRender: <span class="built_in">window</span>.__POWERED_BY_QIANKUN__ ? <span class="literal">false</span> : <span class="function">(<span class="params">_, defaultDom</span>) =&gt;</span> defaultDom,</span><br><span class="line">    className: <span class="built_in">window</span>.__POWERED_BY_QIANKUN__ ? <span class="string">'qiankun-active'</span> : <span class="string">''</span>,</span><br><span class="line">    ...,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过 <code>window.__POWERED_BY_QIANKUN__</code> 来判断是否显示自身的 Header。</p><p>最后，微应用是通过二级域名部署的：</p><ul><li>fengchu.baixing.cn （主）</li><li>admin.fengchu.baixing.cn （微）</li><li>cloud.fengchu.baixing.cn （微）</li><li>…</li></ul><p>所以通过域名作为入口会跨域，有两种方案解决：</p><ol><li><p>在主应用的镜像里用 nginx 反代，然后用 /fengchu-admin-app 作为入口</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /fengchu-admin-app &#123;</span><br><span class="line">  <span class="attribute">proxy_pass</span> http://admin.fengchu.baixing.cn;</span><br><span class="line">  <span class="attribute">proxy_set_header</span>   X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span>   X-Requested-For   <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在微应用中的镜像里 nginx 添加返回头，允许主应用域名跨域访问：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">  <span class="attribute">add_header</span> Access-Control-Allow-Origin http://fengchu.baixing.cn;</span><br><span class="line">  <span class="attribute">add_header</span> Access-Control-Allow-Methods <span class="string">'GET, POST, OPTIONS'</span>;</span><br><span class="line">  <span class="attribute">add_header</span> Access-Control-Allow-Headers <span class="string">'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">204</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>都行吧，第一个会有路径冲突的风险，第二个需要在每个微应用中都配置。</p><h3 id="2-接收用户和权限信息"><a href="#2-接收用户和权限信息" class="headerlink" title="2. 接收用户和权限信息"></a>2. 接收用户和权限信息</h3><p>主应用中，在注册微应用的时候，通过 props 传入了准备好的用户信息数据 profile：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">registerMicroApps([</span><br><span class="line">  &#123;</span><br><span class="line">    name: item.name,</span><br><span class="line">    entry: <span class="string">`http://<span class="subst">$&#123;item.domain&#125;</span>`</span>,</span><br><span class="line">    container: <span class="string">'#container'</span>,</span><br><span class="line">    activeRule: item.activeRule,</span><br><span class="line">    props: &#123;</span><br><span class="line">      profile, <span class="comment">// 传入用户信息</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>profile 来自全局状态管理 profile model（用的哪个工具不重要），所以带有监听，只要有更新此处的 props 就会随即更新。</p><p>微应用中，创建一个类用来存放用户信息：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; currentUser &#125; <span class="keyword">from</span> <span class="string">'@/services/fengchu/api'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Profile &#123;</span><br><span class="line">  id?: <span class="built_in">number</span>;</span><br><span class="line">  name?: <span class="built_in">string</span>;</span><br><span class="line">  avatar?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> UserProfile &#123;</span><br><span class="line">  <span class="keyword">private</span> user?: Profile;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">user: Profile</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.user = user;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> setProfile(user: Profile) &#123;</span><br><span class="line">    <span class="keyword">this</span>.user = user;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">async</span> getUser() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.user) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> currentUser();</span><br><span class="line">      <span class="keyword">this</span>.user = data;</span><br><span class="line">      <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.user;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userProfile = <span class="keyword">new</span> UserProfile(&#123;&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> userProfile;</span><br></pre></td></tr></table></figure><p>在 getUser() 中，如果事先已经接收到主应用的profile，则直接返回，如果没有（单独打开微应用）则通过 api 获取后存入。</p><p>在 bootstrap 钩子里获取父级传参：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> bootstrap(props: <span class="built_in">any</span>) &#123;</span><br><span class="line">  userProfile.setProfile(props?.profile?.user);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实很多场景下根本不需要用到微前端。（<a href="https://juejin.cn/post/6989067239089668127" target="_blank" rel="noopener">你可能不需要微前端</a>）</p><p>但为了尝鲜，也不是，为了可以方便地通过权限来管理可访问应用，并让所有系列应用共享一套用户体系，加上乾坤提供的近乎躺平的落地方案，就采用了。</p><img src="/images/case-study/fengchu/fengchu-7.png" alt="cloud微应用" /><p>由于没有用 ShadowDom 去隔离样式，微应用的主题色还能覆盖主应用的，效果还行。</p>]]></content>
      
      
      <categories>
          
          <category> Case Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DevOps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫攻防战 🕷</title>
      <link href="/case-study/spider-challenge/"/>
      <url>/case-study/spider-challenge/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>我们是守方，我负责活动的前端页面和node服务，作为先锋，拦一些比较简单的爬虫，并留一些陷阱。</p><p>参加者攻破前端页面以后，就要靠我方<a href="/case-study/earth-globe">神盾</a>的规则来拦截可疑ip，限流以及拉黑。</p><p>活动简单来说就是通过爬取特定的网站上的信息，综合参与者的的请求被识别为爬虫的次数，来评分。</p><h2 id="活动页介绍"><a href="#活动页介绍" class="headerlink" title="活动页介绍"></a>活动页介绍</h2><p>共有两个主要页面，一个列表页，每页10个公司，带有分页功能，以及公司的详情页。<br>参加者需要爬取5000家公司的相应信息来得分。<br>活动的页面选择使用 <a href="https://pugjs.org" target="_blank" rel="noopener">Pug（html模板语言）</a> + <a href="https://nestjs.com" target="_blank" rel="noopener">Nest.js（node服务）</a> 通过后端直接渲染页面的方式来完成。</p><h2 id="得分项及反爬措施"><a href="#得分项及反爬措施" class="headerlink" title="得分项及反爬措施"></a>得分项及反爬措施</h2><p>一共五个得分点：<br><img src="/images/case-study/spider/spider-1.png" alt="活动页得分项" /></p><h3 id="1-公司名称"><a href="#1-公司名称" class="headerlink" title="1. 公司名称"></a>1. 公司名称</h3><p>最简单的一项，只要请求页面就可以直接拿到，没有任何的反爬措施，白送的1分。<br><img src="/images/case-study/spider/spider-item-1.png" alt="白给的公司名称" style="width:400px;margin:auto;" /></p><h3 id="2-热线电话"><a href="#2-热线电话" class="headerlink" title="2. 热线电话"></a>2. 热线电话</h3><p>400热线电话使用雪碧图（精灵图）显示，略提升了一些难度。<br>准备了10张包含 0-9 10个数字且顺序不同的图片，node服务每次随机获取一张，并返回对应电话的位移量，用css在页面上显示完整的电话。<br><img src="/images/case-study/spider/spider-item-2.png" alt="热线电话" style="width:400px;margin:auto;" /><br><img src="/images/case-study/spider/spider-item-2-2.png" alt="随机的底图" style="width:400px;margin:auto;" /></p><h4 id="【破解方法】"><a href="#【破解方法】" class="headerlink" title="【破解方法】"></a>【破解方法】</h4><p>方法一：将所有可能性的底图全部爬下来，然后找到位置偏移量的对应关系 Mapping，正则或是程序定位到css的偏移量，从 Map 里找到对应数字。<br>方法二：OCR</p><h3 id="3-联系人手机号"><a href="#3-联系人手机号" class="headerlink" title="3. 联系人手机号"></a>3. 联系人手机号</h3><p>页面初次加载时，手机号从服务渲染出来就是带有星号的，需要通过一个 Ajax 请求来获取详细的号码。<br><img src="/images/case-study/spider/spider-item-3.png" alt="获取手机号的请求" /></p><p>请求返回的手机号经过了一些加密处理，原理简单来说就是把数字的 charCode 偏移几位，然后转成 base64。客户端拿到以后用相同的方法，逆向解就可以拿到真实的手机号。</p><p>node 层加密过程：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> encode = <span class="function">(<span class="params">str: string, digit = <span class="number">10</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> convert = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> charCode = str.charCodeAt(i);</span><br><span class="line">    convert += <span class="built_in">String</span>.fromCharCode(charCode + digit);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Buffer.from(convert).toString(<span class="string">'base64'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>客户端解密过程:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">es</span>(<span class="params">_0x380035</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> _0x4301eb = _0x46a74e;</span><br><span class="line">  <span class="keyword">let</span> _0x165d09 = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">const</span> _0x35a10a = <span class="built_in">window</span>[<span class="string">'atob'</span>](_0x380035);</span><br><span class="line">  <span class="keyword">for</span> (</span><br><span class="line">    <span class="keyword">let</span> _0x321545 = <span class="number">0x0</span>;</span><br><span class="line">    _0x321545 &lt; _0x35a10a[_0x4301eb(<span class="number">0x79</span>)];</span><br><span class="line">    _0x321545++</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">const</span> _0x49c453 = _0x35a10a[_0x4301eb(<span class="number">0x6d</span>)](_0x321545);</span><br><span class="line">    _0x165d09 += <span class="built_in">window</span>[_0x4301eb(<span class="number">0x6f</span>)][<span class="string">'fromCharCode'</span>](_0x49c453 - <span class="number">0xa</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> _0x165d09;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然是混淆的，但是还是在客户端的源码里可以找到，只要有node或是浏览器的运行环境，就可以轻松运行 es() 来解（完全不需要管过程）。</p><p>手机号这里还留了一个陷阱，我们网页加了设备指纹，如果用浏览器正常打开，在请求的header里会带有相关的字段，如果是通过 Api 打过来的则没有。<br>对于没有相关header的请求，会返回一个假的加密过的手机号。</p><h4 id="【破解方法】-1"><a href="#【破解方法】-1" class="headerlink" title="【破解方法】"></a>【破解方法】</h4><p>方法一：从浏览器调试工具里不难找到 es 这个 Function，解混淆，然后用爬虫所用语言重写一遍，拿到手机号后调用重写的方法即可反解。<br>方法二：OCR</p><h3 id="4-联系人名字"><a href="#4-联系人名字" class="headerlink" title="4. 联系人名字"></a>4. 联系人名字</h3><p>这里自己把自己坑了，用的 WebSocket 获取联系人，结果没考虑到 socket 只有连的那下有个http请求，后面都是保持连接直接通讯，所以根本不会过Ingress，并且中反爬的规则，也无法跳验证码拦截。</p><p>点击获取详情按钮后：<br><img src="/images/case-study/spider/spider-item-4.png" alt="ws获取联系人" /></p><p>最后决定加一个限流，如果获取太快服务层就主动断开 socket，需要重连。</p><h4 id="【破解方法】-2"><a href="#【破解方法】-2" class="headerlink" title="【破解方法】"></a>【破解方法】</h4><p>方法一：只要接通连上服务端的 WebSocket，模拟浏览器的 headers，以及握手方式，浏览器传什么，模拟就传什么，最后总能拿到，而且连上一次就不需要断开了。<br>方法二：OCR</p><h3 id="5-公司地址"><a href="#5-公司地址" class="headerlink" title="5. 公司地址"></a>5. 公司地址</h3><p>这里用了字体反爬。<br>服务层渲染的是一个混淆后的地址（文字），需要通过相应的字体文件，用css font-family 来显示正确的内容。</p><img src="/images/case-study/spider/spider-item-5.png" alt="公司地址混淆" style="width:500px;margin:auto;" /><img src="/images/case-study/spider/spider-item-5-2.png" alt="公司地址真实" style="width:400px;margin:auto;" /><img src="/images/case-study/spider/spider-item-5-3.png" alt="字体文件，英文及中文阿拉伯数字映射" style="width:400px;margin:auto;" /><h4 id="【破解方法】-3"><a href="#【破解方法】-3" class="headerlink" title="【破解方法】"></a>【破解方法】</h4><p>方法一：获取到所以有可能性的字体文件，然后使用相关工具解除文字和文字或文字和字符的对应关系，然后反解。<br>方法二：OCR</p><h4 id="以上五项就是得分点，5000条数据，满分5万分，分高者取胜。"><a href="#以上五项就是得分点，5000条数据，满分5万分，分高者取胜。" class="headerlink" title="以上五项就是得分点，5000条数据，满分5万分，分高者取胜。"></a>以上五项就是得分点，5000条数据，满分5万分，分高者取胜。</h4><h3 id="6-页码处理"><a href="#6-页码处理" class="headerlink" title="6. 页码处理"></a>6. 页码处理</h3><p>列表页的地址栏会带有页码，例如：<code>?p=12</code><br>为了让「爬虫」们不要轻易就用p=1、2、3、4的循环去打开页面，将页码简单加了个密，原理和手机号显示是一样的，每个数字的 charCode 位移几位，然后 base64 转换，就成了下面的样子：</p><img src="/images/case-study/spider/spider-item-6.png" alt="列表页页码处理" style="width:400px;margin:auto;" /><p>这样一来大家只能模拟去点击下一页来获取页码，而不是直接猜，当然这种加密是很简单的，看这个字符串就长得很像 base64，所以还是可以花时间猜出来。</p><h3 id="7-设备指纹"><a href="#7-设备指纹" class="headerlink" title="7. 设备指纹"></a>7. 设备指纹</h3><p>每个访问者第一次访问后都会留下指纹，放到 localStorage，再下一次访问的时候，同一个指纹的行为和 ip 进行分析。</p><img src="/images/case-study/spider/spider-item-7.png" alt="获取指纹" style="width:600px;margin:auto;" /><h4 id="【破解方法】-4"><a href="#【破解方法】-4" class="headerlink" title="【破解方法】"></a>【破解方法】</h4><p>方法一：开代理并且频繁切 ip 的话基本可以无视这个。</p><h2 id="神盾"><a href="#神盾" class="headerlink" title="神盾"></a><a href="/case-study/shield/">神盾</a></h2><p>当然前端的反爬再花里胡哨也是有局限的，如果要照顾SEO，那就更不能做什么太多的防爬措施了。并且在如今相当成熟的 OCR 面前，前端反爬都是浮云。</p><p>所以作为先锋，以上我做的只是拖慢大家的爬取的时间。真正的盾还是在<a href="/case-study/shield/">神盾系统</a>。我们会收集用户的真实IP，然后进行分析，识别为爬虫的则会返回验证码滑块，如果多次命中规则，则会限流。</p><p>而我在前端的工作本质是增加需要获取全部信息接口的数量，接入神盾的SDK，获取正确的IP给到神盾，并加入设备指纹。这次爬虫攻防活动也是为了收集爬虫的行为，为以后神盾规则优化做铺垫。</p><h2 id="DONE"><a href="#DONE" class="headerlink" title="DONE."></a>DONE.</h2><p>第一名以3w分左右获胜。</p><img src="/images/case-study/spider/spider-result.jpg" alt="颁奖" style="width:500px;margin:auto;" />]]></content>
      
      
      <categories>
          
          <category> Case Study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>模仿 GitHub 首页的地球 🌍</title>
      <link href="/case-study/earth-globe/"/>
      <url>/case-study/earth-globe/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>参与了一个反爬的项目，主要做的事情就是识别请求中的爬虫们，前端则需要一个数据可视化的看板。由于爬虫总是通过一些奇怪的代理打来，所以ip源分布于世界各地。<br>为了可以让看板酷一些，决定模仿 <a href="https://github.com/" target="_blank" rel="noopener">GitHub 首页</a>(退出登录才能看到) 那个地球做一个类似的效果。</p><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/TVsl5djHoVA" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h5 id="此处应有-YouTube-视频-需要🪜"><a href="#此处应有-YouTube-视频-需要🪜" class="headerlink" title="此处应有 YouTube 视频 需要🪜"></a>此处应有 YouTube 视频 需要🪜</h5><img src="/images/case-study/earth/earth-5.png" alt="最终效果" /><h2 id="用到的工具"><a href="#用到的工具" class="headerlink" title="用到的工具"></a>用到的工具</h2><p><a href="https://threejs.org" target="_blank" rel="noopener">three.js</a>、<a href="https://github.com/tweenjs/tween.js" target="_blank" rel="noopener">tween.js</a> 、<a href="https://www.typescriptlang.org/" target="_blank" rel="noopener">TypeScript</a></p><h2 id="🌍"><a href="#🌍" class="headerlink" title="🌍"></a>🌍</h2><p>其实简化一下地球本地，就是一个球体，带了世界地图的素材表面、一些发光的效果、鼠标点击转动、自动旋转。</p><h3 id="1-绘制一个球体"><a href="#1-绘制一个球体" class="headerlink" title="1. 绘制一个球体"></a>1. 绘制一个球体</h3><p>Earth 是一个独立的类，在它的构建函数里传入尺寸（半径）。</p><p>Earth.ts</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Earth</span> </span>&#123;</span><br><span class="line">  private earth: THREE.Mesh</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span> (radius: number) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 地球本体</span></span><br><span class="line">    <span class="keyword">const</span> earthGeometry = <span class="keyword">new</span> THREE.SphereGeometry(radius, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">    <span class="comment">// 材质</span></span><br><span class="line">    <span class="keyword">const</span> meshBasic = <span class="keyword">new</span> THREE.MeshLambertMaterial(&#123; <span class="attr">color</span>: EARTH_COLOR &#125;)</span><br><span class="line">    <span class="keyword">this</span>.earth = <span class="keyword">new</span> THREE.Mesh(earthGeometry, meshBasic)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里在 Class 内部保存了一个网格对象（<a href="https://threejs.org/docs/#api/zh/objects/Mesh" target="_blank" rel="noopener">THREE.Mesh</a>）</li><li>用的是 <a href="https://threejs.org/docs/?q=Material#api/zh/materials/MeshLambertMaterial" target="_blank" rel="noopener">Lambert 网格材质 (MeshLambertMaterial)</a>，可以让地球在光源下更有质感一些。</li></ul><p>App.ts （入口主文件）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基础的舞台 Class</span></span><br><span class="line"><span class="comment">// 配置灯光、渲染方式、鼠标操控、自动旋转等等...</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (parentDom: HTMLElement, size: number) &#123;</span><br><span class="line">    <span class="comment">// 长宽</span></span><br><span class="line">    <span class="keyword">this</span>.containerWidth = size * <span class="number">1.2</span></span><br><span class="line">    <span class="keyword">this</span>.containerHeight = size</span><br><span class="line"></span><br><span class="line">    <span class="comment">// wrapper</span></span><br><span class="line">    <span class="keyword">const</span> container = <span class="built_in">document</span>.createElement(<span class="string">'DIV'</span>)</span><br><span class="line">    container.classList.add(<span class="string">'the-earth-wrapper'</span>)</span><br><span class="line">    container.style.width = <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.containerWidth&#125;</span>px`</span></span><br><span class="line">    container.style.height = <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.containerHeight&#125;</span>px`</span></span><br><span class="line">    <span class="keyword">const</span> mask = <span class="built_in">document</span>.createElement(<span class="string">'DIV'</span>)</span><br><span class="line">    mask.classList.add(<span class="string">'the-earth-wrapper-mask'</span>)</span><br><span class="line">    mask.style.backgroundImage = <span class="string">`url(<span class="subst">$&#123;flow&#125;</span>)`</span></span><br><span class="line">    container.appendChild(mask)</span><br><span class="line">    parentDom.appendChild(container)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 舞台、相机</span></span><br><span class="line">    <span class="keyword">this</span>.scene = <span class="keyword">new</span> Scene()</span><br><span class="line">    <span class="keyword">this</span>.camera = <span class="keyword">new</span> PerspectiveCamera(<span class="number">65</span>, <span class="keyword">this</span>.containerWidth / <span class="keyword">this</span>.containerHeight, <span class="number">1</span>, <span class="number">1500</span>)</span><br><span class="line">    <span class="comment">// 相机位置，右手坐标系，x,y,z</span></span><br><span class="line">    <span class="keyword">this</span>.camera.position.set(<span class="number">-150</span>, <span class="number">100</span>, <span class="number">-200</span>)</span><br><span class="line">    <span class="keyword">this</span>.camera.lookAt(<span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="comment">// 渲染器</span></span><br><span class="line">    <span class="keyword">this</span>.renderer = <span class="keyword">new</span> WebGLRenderer(&#123; <span class="attr">antialias</span>: <span class="literal">false</span>, <span class="attr">alpha</span>: <span class="literal">true</span> &#125;) <span class="comment">// 抗锯齿</span></span><br><span class="line">    <span class="keyword">this</span>.renderer.setClearColor(<span class="number">0xffffff</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">this</span>.renderer.autoClear = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.renderer.setSize(<span class="keyword">this</span>.containerWidth, <span class="keyword">this</span>.containerHeight)</span><br><span class="line">    <span class="keyword">this</span>.renderer.toneMappingExposure = <span class="built_in">Math</span>.pow(<span class="number">1</span>, <span class="number">4.0</span>)</span><br><span class="line">    container.appendChild(<span class="keyword">this</span>.renderer.domElement)</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, () =&gt; <span class="keyword">this</span>.handleWindowResize())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 光源</span></span><br><span class="line">    <span class="keyword">const</span> spotLight = <span class="keyword">new</span> SpotLight(<span class="number">0x404040</span>, <span class="number">2.5</span>)</span><br><span class="line">    spotLight.target = earth</span><br><span class="line">    <span class="keyword">this</span>.scene.add(spotLight)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> light = <span class="keyword">new</span> AmbientLight(<span class="number">0xffffff</span>, <span class="number">0.25</span>) <span class="comment">// soft white light</span></span><br><span class="line">    <span class="keyword">this</span>.scene.add(light)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 地球</span></span><br><span class="line">    <span class="keyword">const</span> theEarth = <span class="keyword">new</span> Earth(<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">const</span> earth = theEarth.getMesh()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.earthGroup = <span class="keyword">new</span> Group()</span><br><span class="line">    <span class="keyword">this</span>.earthGroup.add(earth)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.scene.add(<span class="keyword">this</span>.earthGroup)</span><br><span class="line">    <span class="keyword">this</span>.render()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前大概是这个样子：<br><img src="/images/case-study/earth/earth-1.png" alt="地球元素" /></p><h3 id="2-绘制世界地图"><a href="#2-绘制世界地图" class="headerlink" title="2. 绘制世界地图"></a>2. 绘制世界地图</h3><p>这里需要借助一下两个图片素材：</p><ul><li>完整的世界地图.png</li><li>圆点.png</li></ul><img src="/images/case-study/earth/earth-2.png" alt="用作球形外面材质的世界地图" /><img src="/images/case-study/earth/dot.png" alt="用圆点来绘制以上图形" width="30px" style="margin:10px auto 0;" /><p>Earth.ts 中添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Earth</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (radius: number) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.earthParticles = <span class="keyword">new</span> THREE.Object3D()</span><br><span class="line">    <span class="comment">// 地球表面的点点</span></span><br><span class="line">    <span class="keyword">this</span>.earthImg = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</span><br><span class="line">    <span class="keyword">this</span>.earthImg.src = earthBg</span><br><span class="line">    <span class="keyword">this</span>.earthImg.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> earthCanvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>)</span><br><span class="line">      <span class="keyword">const</span> earthCtx = earthCanvas.getContext(<span class="string">'2d'</span>)</span><br><span class="line">      earthCanvas.width = <span class="keyword">this</span>.earthImg.width</span><br><span class="line">      earthCanvas.height = <span class="keyword">this</span>.earthImg.height</span><br><span class="line">      earthCtx?.drawImage(<span class="keyword">this</span>.earthImg, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.earthImg.width, <span class="keyword">this</span>.earthImg.height)</span><br><span class="line">      <span class="keyword">this</span>.earthImgData = earthCtx?.getImageData(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.earthImg.width, <span class="keyword">this</span>.earthImg.height)</span><br><span class="line">      <span class="keyword">this</span>.createEarthParticles()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 简单来说就是读取世界地图后，</span></span><br><span class="line">  <span class="comment">// 把有像素的地方换成圆点的图形来填充，</span></span><br><span class="line">  <span class="comment">// 并上色</span></span><br><span class="line">  private createEarthParticles () &#123;</span><br><span class="line">    <span class="keyword">const</span> positions: any = []</span><br><span class="line">    <span class="keyword">const</span> sizes: any = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">      positions[i] = &#123;</span><br><span class="line">        positions: []</span><br><span class="line">      &#125;</span><br><span class="line">      sizes[i] = &#123;</span><br><span class="line">        sizes: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> material = <span class="keyword">new</span> THREE.PointsMaterial()</span><br><span class="line">    material.size = <span class="number">2.5</span></span><br><span class="line">    material.color = <span class="keyword">new</span> THREE.Color(EARTH_PARTICLE_COLOR)</span><br><span class="line">    material.map = <span class="keyword">new</span> THREE.TextureLoader().load(dotImg)</span><br><span class="line">    material.depthWrite = <span class="literal">false</span></span><br><span class="line">    material.transparent = <span class="literal">true</span></span><br><span class="line">    material.opacity = <span class="number">0.3</span></span><br><span class="line">    material.side = THREE.FrontSide</span><br><span class="line">    material.blending = THREE.AdditiveBlending</span><br><span class="line">    <span class="keyword">const</span> spherical = <span class="keyword">new</span> THREE.Spherical()</span><br><span class="line">    spherical.radius = <span class="number">100</span></span><br><span class="line">    <span class="keyword">const</span> step = <span class="number">250</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; step; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> vec = <span class="keyword">new</span> THREE.Vector3()</span><br><span class="line">      <span class="keyword">const</span> radians = step * (<span class="number">1</span> - <span class="built_in">Math</span>.sin(i / step * <span class="built_in">Math</span>.PI)) / step + <span class="number">0.5</span> <span class="comment">// 每个纬线圈内的角度均分</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; step; j += radians) &#123;</span><br><span class="line">        <span class="keyword">const</span> c = j / step <span class="comment">// 底图上的横向百分比</span></span><br><span class="line">        <span class="keyword">const</span> f = i / step <span class="comment">// 底图上的纵向百分比</span></span><br><span class="line">        <span class="keyword">const</span> index = <span class="built_in">Math</span>.floor(<span class="number">2</span> * <span class="built_in">Math</span>.random())</span><br><span class="line">        <span class="keyword">const</span> pos = positions[index]</span><br><span class="line">        <span class="keyword">const</span> size = sizes[index]</span><br><span class="line">        <span class="keyword">if</span> (isLandByUV(c, f, &#123; <span class="attr">earthImgData</span>: <span class="keyword">this</span>.earthImgData, <span class="attr">width</span>: <span class="keyword">this</span>.earthImg.width, <span class="attr">height</span>: <span class="keyword">this</span>.earthImg.height &#125;)) &#123; <span class="comment">// 根据横纵百分比判断在底图中的像素值</span></span><br><span class="line">          spherical.theta = c * <span class="built_in">Math</span>.PI * <span class="number">2</span> - <span class="built_in">Math</span>.PI / <span class="number">2</span> <span class="comment">// 横纵百分比转换为theta和phi夹角</span></span><br><span class="line">          spherical.phi = f * <span class="built_in">Math</span>.PI <span class="comment">// 横纵百分比转换为theta和phi夹角</span></span><br><span class="line">          vec.setFromSpherical(spherical) <span class="comment">// 夹角转换为世界坐标</span></span><br><span class="line">          pos.positions.push(vec.x)</span><br><span class="line">          pos.positions.push(vec.y)</span><br><span class="line">          pos.positions.push(vec.z)</span><br><span class="line">          <span class="keyword">if</span> (j % <span class="number">3</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            size.sizes.push(<span class="number">6.0</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; positions.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> pos = positions[i]</span><br><span class="line">      <span class="keyword">const</span> size = sizes[i]</span><br><span class="line">      <span class="keyword">const</span> bufferGeom = <span class="keyword">new</span> THREE.BufferGeometry()</span><br><span class="line">      <span class="keyword">const</span> typedArr1 = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(pos.positions.length)</span><br><span class="line">      <span class="keyword">const</span> typedArr2 = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(size.sizes.length)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; pos.positions.length; j++) &#123;</span><br><span class="line">        typedArr1[j] = pos.positions[j]</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; size.sizes.length; j++) &#123;</span><br><span class="line">        typedArr2[j] = size.sizes[j]</span><br><span class="line">      &#125;</span><br><span class="line">      bufferGeom.setAttribute(<span class="string">'position'</span>, <span class="keyword">new</span> THREE.BufferAttribute(typedArr1, <span class="number">3</span>))</span><br><span class="line">      bufferGeom.setAttribute(<span class="string">'size'</span>, <span class="keyword">new</span> THREE.BufferAttribute(typedArr2, <span class="number">1</span>))</span><br><span class="line">      bufferGeom.computeBoundingSphere()</span><br><span class="line">      <span class="keyword">const</span> particle = <span class="keyword">new</span> THREE.Points(bufferGeom, material)</span><br><span class="line">      <span class="keyword">this</span>.earthParticles.add(particle)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：<br><img src="/images/case-study/earth/earth-3.png" alt="绘制世界地图" /></p><h3 id="3-加入鼠标控制，拖动可以旋转地球"><a href="#3-加入鼠标控制，拖动可以旋转地球" class="headerlink" title="3. 加入鼠标控制，拖动可以旋转地球"></a>3. 加入鼠标控制，拖动可以旋转地球</h3><p>App.ts 中添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  private controls: OrbitControls</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span> (parentDom: HTMLElement, size: number) &#123;</span><br><span class="line">  <span class="comment">// 轨迹，鼠标控制</span></span><br><span class="line">  <span class="keyword">this</span>.controls = <span class="keyword">new</span> OrbitControls(<span class="keyword">this</span>.camera, <span class="keyword">this</span>.renderer.domElement)</span><br><span class="line">  <span class="keyword">this</span>.controls.enableZoom = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">this</span>.controls.minDistance = <span class="number">320</span></span><br><span class="line">  <span class="keyword">this</span>.controls.maxDistance = <span class="number">320</span></span><br><span class="line">  <span class="keyword">this</span>.controls.maxPolarAngle = <span class="number">1.5</span></span><br><span class="line">  <span class="keyword">this</span>.controls.minPolarAngle = <span class="number">1</span></span><br><span class="line">  <span class="keyword">this</span>.controls.enablePan = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">this</span>.controls.enableDamping = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">this</span>.controls.dampingFactor = <span class="number">0.05</span></span><br><span class="line">  <span class="keyword">this</span>.controls.rotateSpeed = <span class="number">0.5</span></span><br><span class="line">  <span class="keyword">this</span>.controls.addEventListener(<span class="string">'change'</span>, () =&gt; &#123;</span><br><span class="line">    spotLight.position.copy(<span class="keyword">this</span>.camera.position)</span><br><span class="line">    earthGlow.lookAt(<span class="keyword">new</span> Vector3(<span class="keyword">this</span>.camera.position.x - <span class="number">25</span>, <span class="keyword">this</span>.camera.position.y - <span class="number">50</span>, <span class="keyword">this</span>.camera.position.z + <span class="number">20</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// render 中添加 this.controls.update() 才会生效，并让旋转变得很丝滑</span></span><br><span class="line">render () &#123;</span><br><span class="line">  <span class="keyword">this</span>.controls.update()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这是让地球进行自动旋转</span></span><br><span class="line">  <span class="keyword">this</span>.earthGroup.rotation.y += <span class="number">0.0003</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：<br><img src="/images/case-study/earth/earth-4.gif" alt="鼠标控制地球旋转" /></p><h2 id="📍"><a href="#📍" class="headerlink" title="📍"></a>📍</h2><h3 id="4-加入城市坐标"><a href="#4-加入城市坐标" class="headerlink" title="4. 加入城市坐标"></a>4. 加入城市坐标</h3><p>城市坐标，一个小杆子升起，顶部有个小方块。<br>用来标记城市的位置，传参只需两个，一个是坐标经纬度，一个是城市名称。<br>唯一麻烦的在于将经纬度转到场景中对应的位置。</p><p>City.ts</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> THREE <span class="keyword">from</span> <span class="string">'three'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> TWEEN <span class="keyword">from</span> <span class="string">'@tweenjs/tween.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CITY_COLOR = <span class="number">0x00DDFF</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">City</span> </span>&#123;</span><br><span class="line">  private position: THREE.Vector3</span><br><span class="line">  private cityGroup: THREE.Group</span><br><span class="line">  private name: string</span><br><span class="line">  private font: THREE.Font</span><br><span class="line">  private cityName?: THREE.Mesh</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span> ([lng, lat]: number[], name: string, font: THREE.Font) &#123;</span><br><span class="line">    <span class="keyword">this</span>.cityGroup = <span class="keyword">new</span> THREE.Group()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> position = <span class="keyword">this</span>.createPosition([lng, lat])</span><br><span class="line">    <span class="keyword">this</span>.position = position</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.font = font</span><br><span class="line">    <span class="keyword">this</span>.createBox(position)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private createBox (position: THREE.Vector3) &#123;</span><br><span class="line">    <span class="keyword">const</span> geometry = <span class="keyword">new</span> THREE.BoxGeometry(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">const</span> material = <span class="keyword">new</span> THREE.MeshBasicMaterial(&#123;</span><br><span class="line">      color: CITY_COLOR,</span><br><span class="line">      side: THREE.DoubleSide,</span><br><span class="line">      opacity: <span class="number">0.5</span>,</span><br><span class="line">      transparent: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> box = <span class="keyword">new</span> THREE.Mesh(geometry, material)</span><br><span class="line">    box.position.copy(position)</span><br><span class="line">    box.lookAt(<span class="keyword">new</span> THREE.Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">this</span>.cityGroup.add(box)</span><br><span class="line">    <span class="comment">// 顶部</span></span><br><span class="line">    <span class="keyword">const</span> geometryTop = <span class="keyword">new</span> THREE.BoxGeometry(<span class="number">0.6</span>, <span class="number">0.6</span>, <span class="number">0.6</span>)</span><br><span class="line">    <span class="keyword">const</span> materialTop = <span class="keyword">new</span> THREE.MeshBasicMaterial(&#123;</span><br><span class="line">      color: <span class="number">0xffffff</span>,</span><br><span class="line">      side: THREE.DoubleSide,</span><br><span class="line">      opacity: <span class="number">0.5</span>,</span><br><span class="line">      transparent: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> boxTop = <span class="keyword">new</span> THREE.Mesh(geometryTop, materialTop)</span><br><span class="line">    boxTop.lookAt(<span class="keyword">new</span> THREE.Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 底部升起</span></span><br><span class="line">    <span class="keyword">const</span> boxDepth = &#123; <span class="attr">value</span>: <span class="number">0.95</span> &#125;</span><br><span class="line">    <span class="keyword">const</span> tweenRise = <span class="keyword">new</span> TWEEN.Tween(boxDepth).to(&#123; <span class="attr">value</span>: <span class="number">1</span> &#125;, <span class="number">3000</span>)</span><br><span class="line">    tweenRise.onUpdate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      box.position.set(position.x * boxDepth.value, position.y * boxDepth.value, position.z * boxDepth.value)</span><br><span class="line">    &#125;)</span><br><span class="line">    tweenRise.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 顶部上下浮动</span></span><br><span class="line">    <span class="keyword">const</span> scale = &#123; <span class="attr">value</span>: <span class="number">1.06</span> &#125;</span><br><span class="line">    <span class="keyword">const</span> tween = <span class="keyword">new</span> TWEEN.Tween(scale).to(&#123; <span class="attr">value</span>: <span class="number">1.07</span> &#125;, <span class="number">2000</span>)</span><br><span class="line">    <span class="keyword">const</span> tweenBack = <span class="keyword">new</span> TWEEN.Tween(scale).to(&#123; <span class="attr">value</span>: <span class="number">1.06</span> &#125;, <span class="number">2000</span>)</span><br><span class="line">    tween.onUpdate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      boxTop.position.set(position.x * scale.value, position.y * scale.value, position.z * scale.value)</span><br><span class="line">    &#125;)</span><br><span class="line">    tweenBack.onUpdate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      boxTop.position.set(position.x * scale.value, position.y * scale.value, position.z * scale.value)</span><br><span class="line">    &#125;)</span><br><span class="line">    tween.chain(tweenBack)</span><br><span class="line">    tweenBack.chain(tween)</span><br><span class="line">    tween.delay(<span class="number">3000</span>).start()</span><br><span class="line">    <span class="keyword">this</span>.cityGroup.add(boxTop)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 城市名字</span></span><br><span class="line">    <span class="keyword">this</span>.createCityName(<span class="keyword">this</span>.name, position)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private <span class="keyword">async</span> createCityName (name: string, <span class="attr">position</span>: THREE.Vector3) &#123;</span><br><span class="line">    <span class="keyword">const</span> cityNameGeometry = <span class="keyword">new</span> THREE.TextGeometry(name, &#123;</span><br><span class="line">      font: <span class="keyword">this</span>.font,</span><br><span class="line">      size: <span class="number">3</span>,</span><br><span class="line">      height: <span class="number">1</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    cityNameGeometry.computeBoundingBox ()</span><br><span class="line">    <span class="keyword">const</span> cityNameMesh = <span class="keyword">new</span> THREE.MeshLambertMaterial(&#123;</span><br><span class="line">      color: <span class="number">0xffffff</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> cityName = <span class="keyword">new</span> THREE.Mesh(cityNameGeometry, cityNameMesh)</span><br><span class="line">    cityName.position.set(position.x - <span class="number">5</span>, position.y - <span class="number">5</span>, position.z - <span class="number">5</span>)</span><br><span class="line">    <span class="comment">// 出现</span></span><br><span class="line">    <span class="keyword">const</span> opacity = &#123; <span class="attr">value</span>: <span class="number">0</span> &#125;</span><br><span class="line">    <span class="keyword">const</span> tween = <span class="keyword">new</span> TWEEN.Tween(opacity).to(&#123; <span class="attr">value</span>: <span class="number">1.2</span> &#125;, <span class="number">1000</span>)</span><br><span class="line">    tween.onUpdate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      cityName.position.set(position.x * opacity.value, position.y * opacity.value, position.z * opacity.value)</span><br><span class="line">    &#125;)</span><br><span class="line">    tween.start()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.cityGroup.add(cityName)</span><br><span class="line">    <span class="keyword">this</span>.cityName = cityName</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private createPosition (lnglat: number[]) &#123;</span><br><span class="line">    <span class="keyword">const</span> spherical = <span class="keyword">new</span> THREE.Spherical()</span><br><span class="line">    spherical.radius = <span class="number">100</span></span><br><span class="line">    <span class="keyword">const</span> lng = lnglat[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">const</span> lat = lnglat[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">const</span> theta = (lng + <span class="number">90</span>) * (<span class="built_in">Math</span>.PI / <span class="number">180</span>)</span><br><span class="line">    <span class="keyword">const</span> phi = (<span class="number">90</span> - lat) * (<span class="built_in">Math</span>.PI / <span class="number">180</span>)</span><br><span class="line">    spherical.phi = phi</span><br><span class="line">    spherical.theta = theta</span><br><span class="line">    <span class="keyword">const</span> position = <span class="keyword">new</span> THREE.Vector3()</span><br><span class="line">    position.setFromSpherical(spherical)</span><br><span class="line">    <span class="keyword">return</span> position</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getMesh () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.cityGroup</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getPosition () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.position</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  updateCityNameDirection (position: THREE.Vector3) &#123;</span><br><span class="line">    <span class="keyword">this</span>.cityName?.lookAt(position)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  destroy () &#123;</span><br><span class="line">    <span class="keyword">this</span>.cityGroup.clear()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/case-study/earth/earth-6.png" alt="城市坐标" style="width:200px;margin:auto;" /><h2 id="💫"><a href="#💫" class="headerlink" title="💫"></a>💫</h2><h3 id="5-创建从一个坐标到另一个左边连接的贝塞尔曲线"><a href="#5-创建从一个坐标到另一个左边连接的贝塞尔曲线" class="headerlink" title="5. 创建从一个坐标到另一个左边连接的贝塞尔曲线"></a>5. 创建从一个坐标到另一个左边连接的贝塞尔曲线</h3><p>传参即为两个城市（坐标），然后实现动画从坐标1到坐标2。<br>麻烦的点就是调试曲线弧度，好在Three.js有很多现有接口。<br>由于实际请求非常多，</p><p>Link.ts</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> THREE <span class="keyword">from</span> <span class="string">'three'</span></span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line"><span class="keyword">import</span> &#123; MeshLine, MeshLineMaterial &#125; <span class="keyword">from</span> <span class="string">'../lib/meshLine'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> TWEEN <span class="keyword">from</span> <span class="string">'@tweenjs/tween.js'</span></span><br><span class="line"><span class="keyword">import</span> City <span class="keyword">from</span> <span class="string">'./City'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LINK_COLOR = <span class="number">0x00DDFF</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Link</span> </span>&#123;</span><br><span class="line">  private city1: City</span><br><span class="line">  private city2: City</span><br><span class="line">  private linkGroup: THREE.Group</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span> (city1: City, city2: City) &#123;</span><br><span class="line">    <span class="keyword">this</span>.city1 = city1</span><br><span class="line">    <span class="keyword">this</span>.city2 = city2</span><br><span class="line">    <span class="keyword">this</span>.linkGroup = <span class="keyword">new</span> THREE.Group()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.drawLine()</span><br><span class="line">    <span class="keyword">this</span>.drawRing()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  drawLine = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> v0 = <span class="keyword">this</span>.city1.getPosition()</span><br><span class="line">    <span class="keyword">const</span> v3 = <span class="keyword">this</span>.city2.getPosition()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> curve</span><br><span class="line">    <span class="keyword">const</span> angle = v0.angleTo(v3)</span><br><span class="line">    <span class="keyword">if</span> (angle &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; v1, v2 &#125; = getBezierPoint(v0, v3)</span><br><span class="line">      curve = <span class="keyword">new</span> THREE.CubicBezierCurve3(v0, v1, v2, v3) <span class="comment">// 三维三次贝赛尔曲线</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> p0 = <span class="keyword">new</span> THREE.Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) <span class="comment">// 法线向量</span></span><br><span class="line">      <span class="keyword">const</span> rayLine = <span class="keyword">new</span> THREE.Ray(p0, getVCenter(v0.clone(), v3.clone())) <span class="comment">// 顶点坐标</span></span><br><span class="line">      <span class="keyword">const</span> vtop = rayLine.at(<span class="number">1.3</span>, <span class="keyword">new</span> THREE.Vector3()) <span class="comment">// 位置</span></span><br><span class="line">      curve = <span class="keyword">new</span> THREE.QuadraticBezierCurve3(v0, vtop, v3) <span class="comment">// 三维二次贝赛尔曲线</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> curvePoints = curve.getPoints(<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">const</span> material = <span class="keyword">new</span> MeshLineMaterial(&#123;</span><br><span class="line">      color: LINK_COLOR,</span><br><span class="line">      opacity: <span class="number">0.7</span>,</span><br><span class="line">      transparent: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> lineLength = &#123; <span class="attr">value</span>: <span class="number">0</span> &#125;</span><br><span class="line">    <span class="keyword">const</span> line = <span class="keyword">new</span> MeshLine()</span><br><span class="line">    <span class="keyword">const</span> drawLineTween = <span class="keyword">new</span> TWEEN.Tween(lineLength).to(&#123; <span class="attr">value</span>: <span class="number">100</span> &#125;, <span class="number">3000</span>)</span><br><span class="line">    drawLineTween.onUpdate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      line.setPoints(curvePoints.slice(<span class="number">0</span>, lineLength.value + <span class="number">1</span>), (p: number) =&gt; <span class="number">0.2</span> + p / <span class="number">2</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> eraseLineTween = <span class="keyword">new</span> TWEEN.Tween(lineLength).to(&#123; <span class="attr">value</span>: <span class="number">0</span> &#125;, <span class="number">3000</span>)</span><br><span class="line">    eraseLineTween.onUpdate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      line.setPoints(curvePoints.slice(curvePoints.length - lineLength.value, curvePoints.length), (p: number) =&gt; <span class="number">0.2</span> + p / <span class="number">2</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    drawLineTween.start()</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> eraseLineTween.start(), <span class="number">6000</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> mesh = <span class="keyword">new</span> THREE.Mesh(line, material)</span><br><span class="line">    <span class="keyword">this</span>.linkGroup.add(mesh)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  drawRing () &#123;</span><br><span class="line">    <span class="comment">// 扩</span></span><br><span class="line">    <span class="keyword">const</span> outter = <span class="keyword">new</span> THREE.RingGeometry(<span class="number">1</span>, <span class="number">1.3</span>, <span class="number">15</span>)</span><br><span class="line">    <span class="keyword">const</span> materialOutter = <span class="keyword">new</span> THREE.MeshBasicMaterial(&#123;</span><br><span class="line">      color: LINK_COLOR,</span><br><span class="line">      side: THREE.DoubleSide,</span><br><span class="line">      opacity: <span class="number">0</span>,</span><br><span class="line">      transparent: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> ringOutter = <span class="keyword">new</span> THREE.Mesh(outter, materialOutter)</span><br><span class="line">    ringOutter.position.copy(<span class="keyword">this</span>.city2.getPosition())</span><br><span class="line">    ringOutter.lookAt(<span class="keyword">new</span> THREE.Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">const</span> ringScale = &#123; <span class="attr">value</span>: <span class="number">1</span> &#125;</span><br><span class="line">    <span class="keyword">const</span> drawRingTween = <span class="keyword">new</span> TWEEN.Tween(ringScale).to(&#123; <span class="attr">value</span>: <span class="number">1.1</span> &#125;, <span class="number">200</span>)</span><br><span class="line">    drawRingTween.onUpdate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      materialOutter.opacity = <span class="number">0.5</span></span><br><span class="line">      ringOutter.scale.set(ringScale.value, ringScale.value, ringScale.value)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> drawRingTweenBack = <span class="keyword">new</span> TWEEN.Tween(ringScale).to(&#123; <span class="attr">value</span>: <span class="number">1</span> &#125;, <span class="number">1000</span>)</span><br><span class="line">    drawRingTweenBack.onUpdate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      materialOutter.opacity = ringScale.value - <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    drawRingTween.easing(TWEEN.Easing.Circular.Out).delay(<span class="number">3000</span>).chain(drawRingTweenBack.easing(TWEEN.Easing.Circular.In)).start()</span><br><span class="line">    <span class="keyword">this</span>.linkGroup.add(ringOutter)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getMesh () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.linkGroup</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  destroy () &#123;</span><br><span class="line">    <span class="keyword">this</span>.linkGroup.clear()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBezierPoint</span> (<span class="params">v0: THREE.Vector3, v3: THREE.Vector3</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> angle = (v0.angleTo(v3) * <span class="number">180</span>) / <span class="built_in">Math</span>.PI <span class="comment">// 0 ~ Math.PI       // 计算向量夹角</span></span><br><span class="line">  <span class="keyword">const</span> aLen = angle</span><br><span class="line">  <span class="keyword">const</span> p0 = <span class="keyword">new</span> THREE.Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) <span class="comment">// 法线向量</span></span><br><span class="line">  <span class="keyword">const</span> rayLine = <span class="keyword">new</span> THREE.Ray(p0, getVCenter(v0.clone(), v3.clone())) <span class="comment">// 顶点坐标</span></span><br><span class="line">  <span class="keyword">const</span> vtop = <span class="keyword">new</span> THREE.Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) <span class="comment">// 法线向量</span></span><br><span class="line">  rayLine.at(<span class="number">100</span>, vtop) <span class="comment">// 位置</span></span><br><span class="line">  <span class="comment">// 控制点坐标</span></span><br><span class="line">  <span class="keyword">const</span> v1 = getLenVcetor(v0.clone(), vtop, aLen)</span><br><span class="line">  <span class="keyword">const</span> v2 = getLenVcetor(v3.clone(), vtop, aLen)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    v1: v1,</span><br><span class="line">    v2: v2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getVCenter</span> (<span class="params">v1: THREE.Vector3, v2: THREE.Vector3</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> v = v1.add(v2)</span><br><span class="line">  <span class="keyword">return</span> v.divideScalar(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLenVcetor</span> (<span class="params">v1: THREE.Vector3, v2: THREE.Vector3, len: number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> v1v2Len = v1.distanceTo(v2)</span><br><span class="line">  <span class="keyword">return</span> v1.lerp(v2, len / v1v2Len)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/case-study/earth/earth-7.png" alt="连线" style="width:200px;margin:auto;" /><h2 id="加一点光晕-🪐"><a href="#加一点光晕-🪐" class="headerlink" title="加一点光晕 🪐"></a>加一点光晕 🪐</h2><p>Earth.ts 中添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 地球光晕</span></span><br><span class="line"><span class="keyword">const</span> geometry = <span class="keyword">new</span> THREE.CircleGeometry(radius + <span class="number">1.5</span>, radius)</span><br><span class="line"><span class="keyword">const</span> material = <span class="keyword">new</span> THREE.MeshBasicMaterial(&#123; <span class="attr">color</span>: <span class="number">0xd7fcf6</span>, <span class="attr">side</span>: THREE.DoubleSide &#125;)</span><br><span class="line"><span class="keyword">const</span> material2 = <span class="keyword">new</span> THREE.MeshBasicMaterial(&#123; <span class="attr">color</span>: <span class="number">0xd1bdff</span>, <span class="attr">side</span>: THREE.DoubleSide &#125;)</span><br><span class="line"><span class="keyword">const</span> circle = <span class="keyword">new</span> THREE.Mesh(geometry, material)</span><br><span class="line"><span class="keyword">const</span> circle2 = <span class="keyword">new</span> THREE.Mesh(geometry, material2)</span><br><span class="line"><span class="keyword">const</span> glowGrop = <span class="keyword">new</span> THREE.Group()</span><br><span class="line">circle.layers.set(<span class="number">1</span>)</span><br><span class="line">circle2.layers.set(<span class="number">1</span>)</span><br><span class="line">glowGrop.add(circle)</span><br><span class="line">glowGrop.add(circle2)</span><br><span class="line"><span class="keyword">this</span>.earthGlow = glowGrop</span><br></pre></td></tr></table></figure><img src="/images/case-study/earth/earth-8.png" alt="地球光晕" style="width:400px;margin:auto;" /><h2 id="End"><a href="#End" class="headerlink" title="End."></a>End.</h2><p>到这基本上就完成了，由于反爬监控请求量巨大，全都显示风扇会起飞，所以要节流一下，最后其实也只显示了很少一部分，看个热闹。</p>]]></content>
      
      
      <categories>
          
          <category> Case Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vite 踩坑</title>
      <link href="/fe/JavaScript/13.first-time-vite/"/>
      <url>/fe/JavaScript/13.first-time-vite/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a><a href="https://vitejs.dev" target="_blank" rel="noopener">Vite</a></h2><p>Vite 2.0 带着 <a href="https://github.com/evanw/esbuild" target="_blank" rel="noopener">esbuild</a>，以及对 React 项目的支持来了，我被这个打包耗时对比图打动，于是决定尝试一下。</p><p>用之前了解了一下 Vite 的受限：</p><ol><li>只支持 ESM，其他例如 CJS 等可以用<a href="https://github.com/vitejs/vite/tree/main/packages/plugin-legacy" target="_blank" rel="noopener">插件兼容</a> (<a href="https://irian.to/blogs/what-are-cjs-amd-umd-and-esm-in-javascript/" target="_blank" rel="noopener">ESM?</a>)</li><li>对浏览器原生倒模块能力的依赖<ul><li>Chrome &gt;=61</li><li>Firefox &gt;=60</li><li>Safari &gt;=11</li><li>Edge &gt;=16</li></ul></li><li>生态一般</li></ol><p>感觉对将要新启的项目没什么影响。</p><h2 id="1-esbuild-不支持-React-17-新的-jsx-transform"><a href="#1-esbuild-不支持-React-17-新的-jsx-transform" class="headerlink" title="1. esbuild 不支持 React 17 新的 jsx transform"></a>1. esbuild 不支持 React 17 新的 jsx transform</h2><p>React 17 提供了一个<a href="https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html" target="_blank" rel="noopener">新的 JSX 转义方式</a>，是<a href="https://babeljs.io/blog/2020/03/16/7.9.0#a-new-jsx-transform-11154httpsgithubcombabelbabelpull11154" target="_blank" rel="noopener">和 Babel 合作</a>搞的。</p><p>简单来讲就是不需要在每个 <code>.jsx</code> 中引入 React，不用 <code>import React from &#39;react&#39;;</code>。<br>在编译的时候，babel 会自动引入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; jsx <span class="keyword">as</span> _jsx &#125; <span class="keyword">from</span> <span class="string">'react/jsx-runtime'</span>;</span><br></pre></td></tr></table></figure><p>然而，Vite 没有。如果想在项目里使用同样的能力，就需要在 <code>vite.config.ts</code> 中配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">esbuild: &#123;</span><br><span class="line">  jsxInject: <span class="string">`import React from 'react'`</span> <span class="comment">// esbuild 暂时不支持 React 17 新的 jsx transform，暂时这样</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>假装也可以做到。。。</p><h2 id="2-路径别名一定要斜线开头"><a href="#2-路径别名一定要斜线开头" class="headerlink" title="2. 路径别名一定要斜线开头"></a>2. 路径别名一定要斜线开头</h2><p>绝对路径会看起来对项目结构和代码理解更清晰一些，但 Vite 不能支持 <code>@</code> 开头，只能 <code>/</code> 开头来引入。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'/@/'</span>: path.resolve(__dirname, <span class="string">'src'</span>); <span class="comment">// 别名必须以斜线开头和结尾</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 或者：</span></span><br><span class="line">    alias: [</span><br><span class="line">      &#123; <span class="attr">find</span>: <span class="regexp">/^~/</span>, <span class="attr">replacement</span>: <span class="string">''</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原因是，<br>Vite 的 Dev Server 用的是浏览器自己对于 ESM 的引入方式。当用到一下方式引入依赖的时候：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Suspense, lazy &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br></pre></td></tr></table></figure><p>浏览器并不知道 <code>react</code> 库在 <code>node_modules</code> 里，它只能用相对和绝对路径去找。此处 Vite 1.0 是在本地起了一个 koa 服务，代理这些模块。Vite 2.0 也是<a href="https://github.com/vitejs/vite/blob/main/packages/vite/src/node/server/index.ts" target="_blank" rel="noopener">一个 node 服务</a>，当浏览器读取到 html 文件并执行到 import xxx 时，才向该服务去请求这个模块，这就保证了只有在真正使用到这个模块的时候，浏览器才会请求并解析这个模块，将按需加载做到极致。</p><p>这个服务起来之前，Vite 会用 esbuild 去<a href="https://cn.vitejs.dev/guide/dep-pre-bundling.html" target="_blank" rel="noopener">预构建依赖</a>，来加速浏览器请求相应模块的速度。</p><p>Vite 对所有 import 都做了处理，用带有 @modules 的前缀重写它们。</p><h2 id="3-本地开发和打包出来的是两个东西"><a href="#3-本地开发和打包出来的是两个东西" class="headerlink" title="3. 本地开发和打包出来的是两个东西"></a>3. 本地开发和打包出来的是两个东西</h2><blockquote><p>虽然 esbuild 快得惊人，并且已经是一个在构建库方面比较出色的工具，但一些针对构建 应用 的重要功能仍然还在持续开发中。</p></blockquote><p>所以，本地开发的时候得益于 esbuild 相当快的热更新、项目启动速度，但是生产环境还是用的 Rollup。难免会有一些不一样的表现。</p><h2 id="4-接入微前端操作困难"><a href="#4-接入微前端操作困难" class="headerlink" title="4. 接入微前端操作困难"></a>4. 接入微前端操作困难</h2><p>由于开发模式只支持 ESM，接入微前端（例如<a href="https://qiankun.umijs.org/" target="_blank" rel="noopener">乾坤</a>框架时）需要打包成 UMD，所以过程很麻烦，体验很不好，一度让我想用回 Webpack。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>开发时的体验还是很好的，React 项目可以非常快速地启动以及 HMR，尤其是二次启动。而且修改打包器的配置(vite.config.ts)，都不需要 <code>CTL + C</code> 重启服务。<br>但是考虑到生产环境以及一些对打包方式有特别需求的场景，就不太香了。还是更期待以后的迭代。</p>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> React </tag>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>看到一个挺有意思的讨论</title>
      <link href="/reading/5.doge/"/>
      <url>/reading/5.doge/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><div class="video-container"><iframe src="https://www.youtube.com/embed/Js2uA9BBHxo" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>此处应有 YouTube 视频 需要🪜</p>]]></content>
      
      
      <categories>
          
          <category> Reading Notes </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端 Mock 数据的一些可选方案</title>
      <link href="/fe/JavaScript/12.mock-solutions/"/>
      <url>/fe/JavaScript/12.mock-solutions/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="1-Mock-数据写在代码里或本地JSON文件"><a href="#1-Mock-数据写在代码里或本地JSON文件" class="headerlink" title="1. Mock 数据写在代码里或本地JSON文件"></a>1. Mock 数据写在代码里或本地JSON文件</h3><p>缺点：</p><ul><li>Mock效果不好</li><li>与真实Server环境的切换非常麻烦，一切需要侵入代码切换环境的行为都是不好的</li></ul><h3 id="2-请求拦截"><a href="#2-请求拦截" class="headerlink" title="2. 请求拦截"></a>2. 请求拦截</h3><p>代表：<a href="http://mockjs.com/" target="_blank" rel="noopener">Mock.js</a><br>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Mock.mock(&#123;</span><br><span class="line">  <span class="string">"array|1-10"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"name|+1"</span>: [</span><br><span class="line">        <span class="string">"Hello"</span>,</span><br><span class="line">        <span class="string">"Mock.js"</span>,</span><br><span class="line">        <span class="string">"!"</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">=&gt;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"array"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"Hello"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"Mock.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"!"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"Hello"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理：<br>重写XHR</p><p>优点：</p><ul><li>与前端代码分离</li><li>可生成随机数据</li></ul><p>缺点：</p><ul><li>数据都是动态生成的假数据，无法模拟增删改查的情况</li><li>只支持ajax，不支持fetch</li></ul><h3 id="3-接口管理工具"><a href="#3-接口管理工具" class="headerlink" title="3. 接口管理工具"></a>3. 接口管理工具</h3><p>代表：<code>RAP2</code>、<code>Swagger</code>、<code>moco</code>、…</p><p>优点：</p><ul><li>配置功能强大、可靠</li></ul><p>缺点</p><ul><li>配置复杂、依赖后端</li></ul><h4 id="4-本地-node-服务"><a href="#4-本地-node-服务" class="headerlink" title="4. 本地 node 服务"></a>4. 本地 node 服务</h4><p>代表：<a href="https://github.com/typicode/json-server" target="_blank" rel="noopener">json-server</a><br>优点：</p><ul><li>配置简单，快速启一个RESTful API服务</li><li>自定义程度高</li><li>增删改查真实模拟</li></ul><p>缺点：</p><ul><li>无法和后端保持同步</li></ul><h4 id="5-基于-Service-Worker-的-MSW"><a href="#5-基于-Service-Worker-的-MSW" class="headerlink" title="5. 基于 Service Worker 的 MSW"></a>5. 基于 Service Worker 的 <a href="https://mswjs.io" target="_blank" rel="noopener">MSW</a></h4><p>优点：</p><ul><li>基于 Service Worker 实现请求拦截，行为和真实请求非常一致，想法很特别</li><li>不需要切换环境，不用依赖后端</li><li>配置容易，搭建起来十分方便</li></ul><p>缺点：</p><ul><li>无法和后端同步更新</li></ul>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可以落地的 CI / CD 流水线</title>
      <link href="/case-study/dev-ops/"/>
      <url>/case-study/dev-ops/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>很幸运作为前端可以参与 DevOps 小组，<a href="https://www.bilibili.com/video/BV1pV411y79L" target="_blank" rel="noopener">流水线</a>。</p><p>CI/CD核心：Tekton（为什么选Tekton：云原生、轻量级、扩展性好、有API接口，GitHub社区ok）</p><h1 id="第一部分：发布平台"><a href="#第一部分：发布平台" class="headerlink" title="第一部分：发布平台"></a>第一部分：发布平台</h1><h3 id="完整的流程："><a href="#完整的流程：" class="headerlink" title="完整的流程："></a>完整的流程：</h3><ol><li>创建发布单</li><li>初始化：Tekton 从 GitLab 上拉取代码，从最新 master 分支上切出 release 分支</li><li>持续集成 CI<ol><li>代码检查</li><li>单元测试</li><li>报告生成</li><li>打包</li><li>制作镜像</li><li>镜像检测</li></ol></li><li>测试</li><li>发布产线</li><li>完成</li></ol><p>以上的流程可以统一运用于 Java, Python, Node, 静态页面</p><br /><p>简单介绍一下界面</p><h2 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h2><p>界面设计的原则是提供详细的信息，有效的 UI 目的是提升使用者（开发、测试、运维..）的工作效率。发布详情页包含了发版过程需要了解的所有信息，不用再点开很多个页面。</p><h3 id="1-设计-开发："><a href="#1-设计-开发：" class="headerlink" title="1. 设计 + 开发："></a>1. 设计 + 开发：</h3><img src="/images/case-study/cicd/dev-ops.png" alt="发布单界面" /><br /><img src="/images/case-study/cicd/dev-ops-ci-min.png" alt="发布单界面（接入代码质量检测）" /><br /><img src="/images/case-study/cicd/dev-ops-pods-min.png" alt="pods 实时日志" /><br /><h3 id="2-页面信息："><a href="#2-页面信息：" class="headerlink" title="2. 页面信息："></a>2. 页面信息：</h3><ul><li>发布单信息（每次上线进行的一次发布）<ul><li>常规发布：走完整的 CI/CD 流程</li><li>镜像发布：本地制作 docker 镜像后直接发布镜像</li><li>回滚发布：直接发布之前发布单的镜像</li></ul></li><li>操作记录</li><li>实时流量监控（QPS、5xx）</li><li>测试报告（测试人员填写，支持添加外链到完整的报告内容）</li><li>本次发布涉及的 git commits</li><li>k8s 各容器的实时状态</li><li>各CI/CD和流水线步骤的日志</li><li>k8s 服务配置</li></ul><h1 id="第二部分：前端-CI-CD"><a href="#第二部分：前端-CI-CD" class="headerlink" title="第二部分：前端 CI/CD"></a>第二部分：前端 CI/CD</h1><h3 id="CI-CD-的所有步骤都将会用-Tekton-来执行命令，具体执行的内容如下，可以在本地先确保都可以跑通。"><a href="#CI-CD-的所有步骤都将会用-Tekton-来执行命令，具体执行的内容如下，可以在本地先确保都可以跑通。" class="headerlink" title="CI / CD 的所有步骤都将会用 Tekton 来执行命令，具体执行的内容如下，可以在本地先确保都可以跑通。"></a>CI / CD 的所有步骤都将会用 Tekton 来执行命令，具体执行的内容如下，可以在本地先确保都可以跑通。</h3><h3 id="1-静态代码检测"><a href="#1-静态代码检测" class="headerlink" title="1. 静态代码检测"></a>1. 静态代码检测</h3><p>这个就肯定是 <a href="https://eslint.org/" target="_blank" rel="noopener">ESLint</a> 没跑了。推荐使用 <a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">Airbnb</a> 或 <a href="https://standardjs.com/" target="_blank" rel="noopener">Standard</a> 的标准<a href="https://cn.eslint.org/docs/user-guide/configuring#using-a-shareable-configuration-package" target="_blank" rel="noopener">（接入说明）</a>，和<a href="https://cn.eslint.org/docs/user-guide/configuring#using-the-configuration-from-a-plugin" target="_blank" rel="noopener">插件</a>。<br>使用 <a href="https://www.sonarqube.org/" target="_blank" rel="noopener">SonarQube</a> 进行其他规范的检测。</p><p>统一的静态代码检测命令：</p><ul><li><code>cnpm run lint</code></li><li><code>cnpm run lint-html</code></li></ul><h4 id="1-cnpm-run-lint"><a href="#1-cnpm-run-lint" class="headerlink" title="1. cnpm run lint"></a>1. cnpm run lint</h4><p>在 Package.json 中添加：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "lint": "eslint -f json -o reports/eslint.json src/.",</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>lint：在/reports目录下生成eslint.json文件，用于之后sonar检测时读取的结果文件。</p><h4 id="2-cnpm-run-lint-html"><a href="#2-cnpm-run-lint-html" class="headerlink" title="2. cnpm run lint-html"></a>2. cnpm run lint-html</h4><p>package.json 中需要添加：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "lint-html": "eslint -f html -o reports/index.html src/.",</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>lint-html：在/reports目录下生成index.html文件，eslint报告的UI界面。</p><h4 id="3-sonar"><a href="#3-sonar" class="headerlink" title="3. sonar"></a>3. sonar</h4><p>这里使用 Sonar 来上传 ESLint 的检测结果。<br>这一步无需配置，只要保证前面的 reports/eslint.json 文件成功生成就行。<br>可在本地安装 sonar 进行测试：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sonar-scanner</span><br><span class="line">  -Dsonar.projectKey=project-name </span><br><span class="line">  -Dsonar.sources=./src </span><br><span class="line">  -Dsonar.host.url=http://sonar.host</span><br><span class="line">  -Dsonar.eslint.reportPaths=reports/eslint.json</span><br></pre></td></tr></table></figure><p>Artifacts：<br>reports<br>├── eslint.json<br>└── index.html</p><h3 id="2-单元测试"><a href="#2-单元测试" class="headerlink" title="2. 单元测试"></a>2. 单元测试</h3><p>选了 <a href="https://www.jestjs.cn/docs/getting-started" target="_blank" rel="noopener">Jest</a> （和 React 同出一门，比较友好，Vue 也能用）。</p><p>Jest 提供了覆盖度报告，但是导出的 HTML 报告没有包含成功率之类的信息，所以决定用 Allure 来辅助一下。<br>选用 Allure 是因为为了配合其他的后端项目，统一单元测试报告。（Java、Python 配合 Allure 比较好用）</p><p>但如果前端用的是 Angular 用 Jasmine &amp; Karma 更舒服。需要确保生成的测试报告是一致的（Allure 报告）。</p><p>统一的单元测试命令以及生成报告：</p><ul><li><code>cnpm run test</code></li><li><code>allure generate --clean</code></li></ul><h4 id="1-cnpm-run-test"><a href="#1-cnpm-run-test" class="headerlink" title="1. cnpm run test"></a>1. cnpm run test</h4><p>package.json中需要添加：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "test": "jest --coverage --all -o",</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>在/coverage目录下生成覆盖度报告</p><h4 id="2-allure-generate-–clean"><a href="#2-allure-generate-–clean" class="headerlink" title="2. allure generate –clean"></a>2. allure generate –clean</h4><h4 id="2-1-生成-Allure-的报告，需要安装-jest-allure："><a href="#2-1-生成-Allure-的报告，需要安装-jest-allure：" class="headerlink" title="2.1 生成 Allure 的报告，需要安装 jest-allure："></a>2.1 生成 Allure 的报告，需要安装 <a href="https://github.com/zaqqaz/jest-allure" target="_blank" rel="noopener">jest-allure</a>：</h4><ol><li>cnpm i -D jest-allure</li><li>在 jest.config.js 配置文件中添加：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  testEnvironment: <span class="string">'jsdom'</span>,</span><br><span class="line">  moduleFileExtensions: [<span class="string">'js'</span>, <span class="string">'json'</span>, <span class="string">'jsx'</span>, <span class="string">'ts'</span>, <span class="string">'tsx'</span>, <span class="string">'node'</span>],</span><br><span class="line">  setupFilesAfterEnv: [<span class="string">'jest-allure/dist/setup'</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>配置完后每次运行 cnpm run test 就会在 /allure-results 目录下生成结果，用于之后的步骤。</li></ol><h4 id="2-2-生成-Allure-报告的-UI-界面"><a href="#2-2-生成-Allure-报告的-UI-界面" class="headerlink" title="2.2 生成 Allure 报告的 UI 界面"></a>2.2 生成 Allure 报告的 UI 界面</h4><p>需要安装 allure（仅为了在本地跑通，也可以跳过，只要确保上一步的/allure-results生成即可）<br>Mac OS：<br>brew install allure<br>或：<br><a href="https://github.com/allure-framework/allure2/releases" target="_blank" rel="noopener">直接下载</a>，然后配置 $PATH<br>在项目根目录下运行：<br>allure generate –clean<br>在 /allure-report 目录下生成html文件</p><p>Artifacts：<br>coverage<br>├── clover.xml<br>├── coverage-final.json<br>├── lcov-report<br>└── lcov.info</p><p>allure-results<br>├── 2ed4135f-5ef3-4009-a9f0-bdc191e94680-testsuite.xml</p><p>allure-report<br>├── index.html<br>├── styles.css</p><h3 id="3-项目打包"><a href="#3-项目打包" class="headerlink" title="3. 项目打包"></a>3. 项目打包</h3><p>静态检测和单测都没问题就开始打包。</p><p>命令：</p><ul><li><code>cnpm run build</code></li><li><code>cnpm run upload-static</code></li></ul><p>打包就不多说了，最后生成 build/ 文件夹包含所有静态文件，如果用 CDN 则需要在打包后上传，统一用以上命令。</p><h3 id="生成一堆报告后别忘了在-gitignore里添加："><a href="#生成一堆报告后别忘了在-gitignore里添加：" class="headerlink" title="生成一堆报告后别忘了在.gitignore里添加："></a>生成一堆报告后别忘了在.gitignore里添加：</h3><p>/reports<br>/coverage<br>/allure-results<br>/allure-report<br>/.scannerwork</p><h2 id="Docker-k8s"><a href="#Docker-k8s" class="headerlink" title="Docker + k8s"></a>Docker + k8s</h2><p>CD 部分就是把 Docker 镜像部署到 k8s 就大功告成。由于 Node 版本很多，用于打包的基础镜像可以事先在本地准备好后，push 到 Gitlab，然后在 build 那一步用自己准备的基础镜像，就不用怕 CI 实际情况和本地差太多。</p><p>纯静态资源的前端项目用 Ngnix 即可，参考 Dockerfile：</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx:<span class="number">1.18</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/share/nginx/html/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./docker/nginx.conf /etc/nginx/conf.d/default.conf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./build  /usr/share/nginx/html/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"nginx"</span>, <span class="string">"-g"</span>, <span class="string">"daemon off;"</span>]</span></span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">  <span class="attribute">gzip_buffers</span> <span class="number">32</span> <span class="number">4K</span>;</span><br><span class="line">  <span class="attribute">gzip_comp_level</span> <span class="number">6</span>;</span><br><span class="line">  <span class="attribute">gzip_min_length</span> <span class="number">100</span>;</span><br><span class="line">  <span class="attribute">gzip_types</span> application/javascript text/css text/xml;</span><br><span class="line">  <span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line">  <span class="attribute">gzip_static</span> <span class="literal">on</span>; <span class="comment"># 已有gz文件则直接用，可以配合 webpack 上传压缩后的gzip文件，代替nginx压缩</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">root</span> /usr/share/nginx/html;</span><br><span class="line">  <span class="attribute">include</span> /etc/nginx/mime.types;</span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">      <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>制作基础镜像可以参考：<a href="/tool/4.docker-fe-build/">前端基础镜像</a></p><ul><li><code>docker build -t #build-tag .</code></li><li><code>docker push</code></li><li><code>kubectl set image -n ...</code></li></ul><h2 id="企业微信通知"><a href="#企业微信通知" class="headerlink" title="企业微信通知"></a>企业微信通知</h2><p>发布平台的通知接入企业微信，在测试和上线的时候会通知相关人员，上线成功后也会通知组内全员。</p><h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>可以看到发布详情页面上，当前有一个栏目是空缺的，也就是「灰度」的部分。<br>下一阶段，我们将通过 header、访问路径以及流量比例，三种方式来控制灰度发布。各业务可以各取所需地来配置。</p><h1 id="第三部分：实际使用"><a href="#第三部分：实际使用" class="headerlink" title="第三部分：实际使用"></a>第三部分：实际使用</h1><p>遇到的最困难的就是让大家都接入这个流程。<br>比较方便的是 Java，因为每个 Java 项目都非常严谨，编译方式也都很统一。<br>其次是 Python，除了脚本特别多（需要另外解决）。<br>最难受的就是前端项目，不仅要考虑 node 版本，还要让各种花里胡哨的打包方式都统一，非常困难，要大家的配合。遇到一些需要其他语言 build 的依赖，更头疼，比如令人绝望的 node-sass。</p>]]></content>
      
      
      <categories>
          
          <category> Case Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DevOps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端工程化初探 CI 流程</title>
      <link href="/tool/5.fe-ci/"/>
      <url>/tool/5.fe-ci/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><p>统一使用 cnpm</p><h2 id="CI流程"><a href="#CI流程" class="headerlink" title="CI流程"></a>CI流程</h2><p>公司使用的是Tekton来代替原来的Gitlab CI（云原生、轻量级、扩展性好、有API接口，GitHub社区ok），以下步骤会在Tekton中执行：</p><h2 id="1-静态代码检测"><a href="#1-静态代码检测" class="headerlink" title="1. 静态代码检测"></a>1. 静态代码检测</h2><p>命令：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm <span class="keyword">run</span><span class="bash"> lint</span></span><br><span class="line">cnpm <span class="keyword">run</span><span class="bash"> lint-html</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>使用 ESLint 进行静态代码检测，规范暂未统一，推荐使用 Airbnb 或 Standard 的标准（接入说明），和插件。</li><li>使用 SonarQube 进行其他规范的检测。</li></ul><ol><li><code>cnpm run lint</code><br>package.json中需要添加：<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "lint": "eslint -f json -o reports/eslint.json src/.",</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><ul><li>lint：在 <code>/reports</code> 目录下生成 <code>eslint.json</code> 文件，用于之后 sonar 检测时读取的结果文件。</li></ul><ol start="2"><li><code>cnpm run lint-html</code><br>package.json中需要添加：<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "lint-html": "eslint -f html -o reports/index.html src/.",</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><ul><li>lint-html：在 <code>/reports</code> 目录下生成 <code>index.html</code> 文件，eslint 报告的UI界面。</li><li>如果/reports已经存在于项目中有其他用途，可以统一换一个名称</li></ul><ol start="3"><li>sonar<br>这一步无需配置，只要保证前面的 <code>reports/eslint.json</code> 文件成功生成就行。<br>可在本地安装 sonar 进行测试：<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sonar-scanner</span><br><span class="line">  -<span class="module-access"><span class="module"><span class="identifier">Dsonar</span>.</span></span>projectKey=fe-project </span><br><span class="line">  -<span class="module-access"><span class="module"><span class="identifier">Dsonar</span>.</span></span>sources=./src </span><br><span class="line">  -<span class="module-access"><span class="module"><span class="identifier">Dsonar</span>.</span></span>host.url=http:<span class="comment">//39.100.144.36 </span></span><br><span class="line">  -<span class="module-access"><span class="module"><span class="identifier">Dsonar</span>.</span></span>eslint.reportPaths=reports/eslint.json</span><br></pre></td></tr></table></figure>默认会检测在 <code>./src</code> 目录下的代码，如果前端代码不在这个目录下需要另寻统一方法</li></ol><p>Artifacts：<br>reports<br>├── eslint.json<br>└── index.html</p><h2 id="2-单元测试"><a href="#2-单元测试" class="headerlink" title="2. 单元测试"></a>2. 单元测试</h2><p>命令：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm run test</span><br><span class="line">allure <span class="keyword">generate</span> --clean</span><br></pre></td></tr></table></figure><p>说明：<br>使用 <code>Jest</code> 进行单元测试，接入指南。<br>使用 <code>Allure</code> 配合 <code>Jest</code> 实现单测结果的展示。</p><ol><li><p>cnpm run test<br>package.json中需要添加：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "test": "jest --coverage --all -o",</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>在 <code>/coverage</code> 目录下生成覆盖度报告</p></li><li><p><code>allure generate --clean</code><br>2.1 生成 <code>Allure</code> 的报告，需要安装 <code>jest-allure</code>：</p><ol><li><code>cnpm i -D jest-allure</code></li><li>在 jest.config.js 配置文件中添加：<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  testEnvironmen<span class="variable">t:</span> <span class="string">'jsdom'</span>,</span><br><span class="line">  moduleFileExtension<span class="variable">s:</span> [<span class="string">'js'</span>, <span class="string">'json'</span>, <span class="string">'jsx'</span>, <span class="string">'ts'</span>, <span class="string">'tsx'</span>, <span class="string">'node'</span>],</span><br><span class="line">  setupFilesAfterEn<span class="variable">v:</span> [<span class="string">'jest-allure/dist/setup'</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>配置完后每次运行 cnpm run test 就会在 /allure-results 目录下生成结果，用于之后的步骤。</li></ol><p>2.2 生成 <code>Allure</code> 报告的 UI 界面<br>需要安装 <code>allure</code>（仅为了在本地跑通，也可以跳过，只要确保上一步的/allure-results生成即可）<br>Mac OS：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>allure</span><br></pre></td></tr></table></figure><p>或：<br>直接下载，然后配置 $PATH<br>在项目根目录下运行：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allure <span class="keyword">generate</span> --clean</span><br></pre></td></tr></table></figure><p>在 /allure-report 目录下生成html文件</p></li></ol><p>Artifacts：<br>coverage<br>├── clover.xml<br>├── coverage-final.json<br>├── lcov-report<br>└── lcov.info</p><p>allure-results<br>├── 2ed4135f-5ef3-4009-a9f0-bdc191e94680-testsuite.xml</p><p>allure-report<br>├── index.html<br>├── styles.css</p><h2 id="3-项目打包"><a href="#3-项目打包" class="headerlink" title="3. 项目打包"></a>3. 项目打包</h2><p>命令：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm <span class="keyword">run</span><span class="bash"> build</span></span><br><span class="line">cnpm <span class="keyword">run</span><span class="bash"> upload-static</span></span><br></pre></td></tr></table></figure><p>说明：</p><ol><li><code>cnpm run build</code><br>打包<br><code>package.json</code> 中需要添加：<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "build": "你的打包指令",</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>这一步只需要保证打包完后的结果生成在 /build 目录下，如果原先默认是 /dist 之类的需要修改下配置。</li><li><code>cnpm run upload-static</code><br>上传静态资源文件到又拍云或别的什么云，统一指令为 upload-static 就行。<br>package.json 中需要添加：<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"upload-static"</span>: <span class="string">"upyun-upload -c tool/upyun-static.config.js -v"</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>如果是又拍云可以用以下方法：<br>安装 <code>upyun-upload</code>，前人留下的轮子。<br>在 /tool 目录下创建 <code>upyun-static.config.js</code> 文件：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> join = <span class="built_in">require</span>(<span class="string">'path'</span>).posix.join</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  operator: <span class="string">'crm'</span>,</span><br><span class="line">  password: <span class="string">'Gold Miner'</span>,</span><br><span class="line">  tasks: [&#123;</span><br><span class="line">    prefix: <span class="string">'miqi-static/'</span>,</span><br><span class="line">    endpoint: <span class="string">'v0'</span>,</span><br><span class="line">    bucket: <span class="string">'bxsls'</span>,</span><br><span class="line">    directory: join(__dirname, <span class="string">'../build/static'</span>)</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'url: s.sls.baixing.net/ + filename'</span>)</span><br></pre></td></tr></table></figure></li></ol><p>Artifacts：<br>build (内容不定)<br>├── asset-manifest.json<br>├── favicon.ico<br>├── index.html<br>├── robots.txt<br>└── static</p><p>生成一堆报告后别忘了在.gitignore里添加：<br>/reports<br>/coverage<br>/allure-results<br>/allure-report<br>/.scannerwork</p><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>静态页面只要 Nginx<br>默认使用在 CI 中生成的 ./build 目录</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">FROM</span> nginx:<span class="number">1</span>.<span class="number">18</span>.<span class="number">0</span></span><br><span class="line">WORKDIR /usr/share/nginx/html/</span><br><span class="line">COPY ./docker/nginx.conf /etc/nginx/conf.d/default.conf</span><br><span class="line">COPY ./build  /usr/share/nginx/html/</span><br><span class="line">EXPOSE <span class="number">80</span></span><br><span class="line">CMD [<span class="string">"nginx"</span>, <span class="string">"-g"</span>, <span class="string">"daemon off;"</span>]</span><br><span class="line">Nginx 配置 （根据实际修改）</span><br><span class="line">server &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_buffers</span> <span class="number">32</span> <span class="number">4K</span>;</span><br><span class="line">    <span class="attribute">gzip_comp_level</span> <span class="number">6</span>;</span><br><span class="line">    <span class="attribute">gzip_min_length</span> <span class="number">100</span>;</span><br><span class="line">    <span class="attribute">gzip_types</span> application/javascript text/css text/xml;</span><br><span class="line">    <span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_static</span> <span class="literal">on</span>; <span class="comment"># 已有gz文件则直接用，可以配合 webpack 上传压缩后的gzip文件，代替nginx压缩</span></span><br><span class="line">    <span class="attribute">root</span> /usr/share/nginx/html;</span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React JSX 新的 transform 方式</title>
      <link href="/fe/React/3.new-transform/"/>
      <url>/fe/React/3.new-transform/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="1-了解-JSX-Transform"><a href="#1-了解-JSX-Transform" class="headerlink" title="1. 了解 JSX Transform"></a>1. 了解 <a href="https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html#whats-a-jsx-transform" target="_blank" rel="noopener">JSX Transform</a></h3><h4 id="JSX："><a href="#JSX：" class="headerlink" title="JSX："></a>JSX：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="原来的转换方式："><a href="#原来的转换方式：" class="headerlink" title="原来的转换方式："></a>原来的转换方式：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转换后需要调用 React.createElement，所以必须先手动引入 React</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> React.createElement(<span class="string">'h1'</span>, <span class="literal">null</span>, <span class="string">'Hello world'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="新的转换方式："><a href="#新的转换方式：" class="headerlink" title="新的转换方式："></a>新的转换方式：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Inserted by a compiler (don't import it yourself!)</span></span><br><span class="line"><span class="keyword">import</span> &#123; jsx <span class="keyword">as</span> _jsx &#125; <span class="keyword">from</span> <span class="string">'react/jsx-runtime'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _jsx(<span class="string">'h1'</span>, &#123; <span class="attr">children</span>: <span class="string">'Hello world'</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-如何升级"><a href="#2-如何升级" class="headerlink" title="2. 如何升级"></a>2. 如何升级</h3><h4 id="默认支持新的转换方式"><a href="#默认支持新的转换方式" class="headerlink" title="默认支持新的转换方式"></a>默认支持新的转换方式</h4><ul><li>Create React App 4.0.0+</li><li>React 17</li><li>Next.js v9.5.3+</li><li>Gatsby v2.24.5+</li><li>TypeScript v4.1+</li></ul><h4 id="手动修改-Babel"><a href="#手动修改-Babel" class="headerlink" title="手动修改 Babel"></a>手动修改 Babel</h4><ol><li>升级 Babel 到 v7.9.0+<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm update @babel/core @babel/plugin-transform-react-jsx</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">yarn upgrade @babel/core @babel/plugin-transform-react-jsx</span><br></pre></td></tr></table></figure></li><li>升级 @babel/preset-react<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm update @babel/core @babel/preset-react</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">yarn upgrade @babel/core @babel/preset-react</span><br></pre></td></tr></table></figure></li><li>.babelrc.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// If you're using @babel/plugin-transform-react-jsx</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    [<span class="string">"@babel/plugin-transform-react-jsx"</span>, &#123;</span><br><span class="line">      <span class="string">"runtime"</span>: <span class="string">"automatic"</span></span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If you are using @babel/preset-react</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [</span><br><span class="line">    [<span class="string">"@babel/preset-react"</span>, &#123;</span><br><span class="line">      <span class="string">"runtime"</span>: <span class="string">"automatic"</span></span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Starting from Babel 8, “automatic” will be the default runtime for both plugins.</p></blockquote></li></ol><h4 id="ESLint-中关掉-react-in-jsx-scope"><a href="#ESLint-中关掉-react-in-jsx-scope" class="headerlink" title="ESLint 中关掉 react-in-jsx-scope"></a>ESLint 中关掉 react-in-jsx-scope</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="string">"rules"</span>: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="string">"react/jsx-uses-react"</span>: <span class="string">"off"</span>,</span><br><span class="line">    <span class="string">"react/react-in-jsx-scope"</span>: <span class="string">"off"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最后，官方提供了一键更新项目中文件引入React的工具"><a href="#最后，官方提供了一键更新项目中文件引入React的工具" class="headerlink" title="最后，官方提供了一键更新项目中文件引入React的工具"></a>最后，官方提供了一键更新项目中文件引入React的工具</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cd</span> <span class="string">your_project</span></span><br><span class="line"><span class="attr">npx</span> <span class="string">react-codemod update-react-imports</span></span><br></pre></td></tr></table></figure><p>还是比较靠谱的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [text, setText] = React.useState(<span class="string">'Hello World'</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;text&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将转换成如下：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [text, setText] = useState(<span class="string">'Hello World'</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;text&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>制作一个 Docker 镜像来辅助 CI/CD</title>
      <link href="/tool/4.docker-fe-build/"/>
      <url>/tool/4.docker-fe-build/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>上次开发完那个DevOps的发布界面后，就开始正式使用了，首先我们需要把一个前端项目添加相关的部署步骤，完成一套CI/CD。接着就是抽离出一套标准化的部署流程，适用于所有的前端项目（理想）。</p><p>由于发布流程中需要接入一些代码质量把控的机制，所以用到了 Sonar、ESLint、Jest等等的工具。</p><p>于是，为了可以不依赖不稳定的镜像下载，自己搞一个。</p><h3 id="创建-Dockerfile"><a href="#创建-Dockerfile" class="headerlink" title="创建 Dockerfile"></a>创建 Dockerfile</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y \</span><br><span class="line">  ca-certificates \</span><br><span class="line">  curl \</span><br><span class="line">  sudo</span><br></pre></td></tr></table></figure><h3 id="放入-Sonar-Scanner"><a href="#放入-Sonar-Scanner" class="headerlink" title="放入 Sonar Scanner"></a>放入 Sonar Scanner</h3><p>下载一个 <a href="https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.5.0.2216-linux.zip" target="_blank" rel="noopener">SonarQube Scanner</a></p><p>放到根目录下的 /sonar-scanner 下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COPY ./sonar-scanner /root/.sonar/native-sonar-scanner/sonar-scanner-4.5.0.2216-linux/.</span><br></pre></td></tr></table></figure><h3 id="安装-Node"><a href="#安装-Node" class="headerlink" title="安装 Node"></a>安装 Node</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RUN curl https://nodejs.org/dist/v<span class="variable">$NODE_VERSION</span>/<span class="variable">$NODE_PACKAGE</span>.tar.gz | tar -xzC /opt/</span><br><span class="line"></span><br><span class="line"><span class="comment"># npm</span></span><br><span class="line">RUN npm install -g yarn</span><br><span class="line">RUN npm install -g sonarqube-scanner</span><br></pre></td></tr></table></figure><h3 id="完整版"><a href="#完整版" class="headerlink" title="完整版"></a>完整版</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y \</span><br><span class="line">  ca-certificates \</span><br><span class="line">  curl \</span><br><span class="line">  sudo</span><br><span class="line"></span><br><span class="line">ARG NODE_VERSION=14.16.0</span><br><span class="line">ARG NODE_PACKAGE=node-v<span class="variable">$NODE_VERSION</span>-linux-x64</span><br><span class="line">ARG NODE_HOME=/opt/<span class="variable">$NODE_PACKAGE</span></span><br><span class="line"></span><br><span class="line">ENV NODE_PATH <span class="variable">$NODE_HOME</span>/lib/node_modules</span><br><span class="line">ENV PATH <span class="variable">$NODE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">COPY ./sonar-scanner /root/.sonar/native-sonar-scanner/sonar-scanner-4.5.0.2216-linux/.</span><br><span class="line"></span><br><span class="line">RUN curl https://nodejs.org/dist/v<span class="variable">$NODE_VERSION</span>/<span class="variable">$NODE_PACKAGE</span>.tar.gz | tar -xzC /opt/</span><br><span class="line"></span><br><span class="line"><span class="comment"># npm</span></span><br><span class="line">RUN npm install -g yarn</span><br><span class="line">RUN npm install -g sonarqube-scanner</span><br></pre></td></tr></table></figure><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── Dockerfile</span><br><span class="line">└── sonar-scanner</span><br><span class="line">    ├── bin</span><br><span class="line">    │   ├── sonar-scanner</span><br><span class="line">    │   └── sonar-scanner-debug</span><br><span class="line">    ├── conf</span><br><span class="line">    │   └── sonar-scanner.properties</span><br><span class="line">    ├── jre</span><br><span class="line">    │   ├── bin</span><br><span class="line">    │   ├── conf</span><br><span class="line">    │   ├── legal</span><br><span class="line">    │   ├── <span class="class"><span class="keyword">lib</span></span></span><br><span class="line">    │   └── release</span><br><span class="line">    └── <span class="class"><span class="keyword">lib</span></span></span><br><span class="line">        └── sonar-scanner-cli-<span class="number">4.5</span>.<span class="number">0.2216</span>.jar</span><br></pre></td></tr></table></figure><h3 id="制作"><a href="#制作" class="headerlink" title="制作"></a>制作</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t [namespace]/[image name] .</span><br></pre></td></tr></table></figure><h3 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker login</span><br><span class="line">docker push</span><br></pre></td></tr></table></figure><h3 id="使用该镜像部署一个React-CRA-项目"><a href="#使用该镜像部署一个React-CRA-项目" class="headerlink" title="使用该镜像部署一个React (CRA)项目"></a>使用该镜像部署一个React (CRA)项目</h3><p>package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"sonar"</span>: <span class="string">"node tools/sonar-scan.js"</span>,</span><br><span class="line">  <span class="attr">"test"</span>: <span class="string">"craco test --coverage --all -o"</span>,</span><br><span class="line">  <span class="attr">"lint"</span>: <span class="string">"eslint --ext .ts --ext .tsx -f json -o reports/eslint.json src/"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tools/sonar-scan.js 中配置sonar</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> scanner = <span class="built_in">require</span>(<span class="string">'sonarqube-scanner'</span>);</span><br><span class="line"></span><br><span class="line">scanner(</span><br><span class="line">  &#123;</span><br><span class="line">    serverUrl : <span class="string">'http://39.xxx.xxx.xxx'</span>,</span><br><span class="line">    <span class="comment">// token : "xxx",</span></span><br><span class="line">    options: &#123;</span><br><span class="line">      <span class="string">'sonar.projectKey'</span>: <span class="string">'squat-fe'</span>,</span><br><span class="line">      <span class="string">'sonar.sources'</span>: <span class="string">'./src'</span>,</span><br><span class="line">      <span class="string">'sonar.eslint.reportPaths'</span>: <span class="string">'reports/eslint.json'</span>,</span><br><span class="line">      <span class="string">'sonar.typescript.tsconfigPath'</span>: <span class="string">'tsconfig.json'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  () =&gt; process.exit()</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">kianzyk/fe-build</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">REGISTRY_BASE:</span> <span class="string">registry.gitlab.xxx.cn/crm/squat-fe</span></span><br><span class="line">  <span class="attr">IMAGE_REF:</span> <span class="string">$REGISTRY_BASE:$CI_PIPELINE_ID</span></span><br><span class="line">  <span class="attr">DOCKER_IMAGE:</span> <span class="string">docker:stable-git</span></span><br><span class="line"></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">prepare</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">reporting</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm-build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">docker-build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">prepare:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">prepare</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">yarn</span> <span class="string">lint</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">yarn</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node_modules/</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">reports/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">coverage/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制报告</span></span><br><span class="line"><span class="attr">reporting:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">reporting</span></span><br><span class="line">  <span class="attr">variables:</span></span><br><span class="line">    <span class="attr">SONAR_USER_HOME:</span> <span class="string">"$&#123;CI_PROJECT_DIR&#125;/.sonar"</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sudo</span> <span class="string">rm</span> <span class="string">-fr</span> <span class="string">/mnt/jest/$CI_PROJECT_NAME</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sudo</span> <span class="string">mkdir</span> <span class="string">-pv</span> <span class="string">/mnt/jest/$CI_PROJECT_NAME</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">if</span> <span class="string">[</span> <span class="string">-d</span> <span class="string">coverage/lcov-report/</span> <span class="string">];</span> <span class="string">then</span> <span class="string">sudo</span> <span class="string">cp</span> <span class="string">-a</span> <span class="string">coverage/lcov-report/*</span> <span class="string">/mnt/jest/$CI_PROJECT_NAME/;</span> <span class="string">fi</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">yarn</span> <span class="string">sonar</span></span><br><span class="line"></span><br><span class="line"><span class="attr">npm-build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">npm-build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">yarn</span> <span class="string">build:$CI_COMMIT_BRANCH</span> <span class="comment"># 最新CRA在build时也会跑一次eslint</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node_modules/</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">build/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">docker-build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">docker-build</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">$DOCKER_IMAGE</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">login</span> <span class="string">-u</span> <span class="string">gitlab-ci-token</span> <span class="string">-p</span> <span class="string">$CI_BUILD_TOKEN</span> <span class="string">registry.gitlab.xxx.cn</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-t</span> <span class="string">$IMAGE_REF</span> <span class="string">.</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">push</span> <span class="string">$IMAGE_REF</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">rmi</span> <span class="string">$IMAGE_REF</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="string">...</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滚动条CSS</title>
      <link href="/fe/CSS/5.scroll-bar/"/>
      <url>/fe/CSS/5.scroll-bar/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><img class="article-image" src="/images/fe/scroll-css.png" width="60%" alt="滚动条拆分" /><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&amp;<span class="selector-pseudo">::-webkit-scrollbar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&amp;<span class="selector-pseudo">::-webkit-scrollbar-track</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(@primary-color, <span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&amp;<span class="selector-pseudo">::-webkit-scrollbar-thumb</span>  &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(@primary-color, <span class="number">0.4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021前端行业发展趋势</title>
      <link href="/reading/4.2021-trend/"/>
      <url>/reading/4.2021-trend/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><ol><li>React 17<ol><li>干掉 unsafe</li><li>往维护期发展、前端工程化</li><li>server component</li><li>更新启发式更新算法</li><li>new jsx transform</li></ol></li><li>Vue 3.0<ol><li>composition api</li><li>响应式实现方式</li><li>编译方向（ref语法糖）</li></ol></li><li>都没有在前端基于浏览器视图方案上有什么进步，除了Angular<ol><li>不再关注框架本身</li></ol></li><li>2021更趋向于工程化<ol><li>server components</li><li>异步渲染</li><li>vite</li><li>其他部署问题</li></ol></li></ol><h2 id="Typescript"><a href="#Typescript" class="headerlink" title="Typescript"></a>Typescript</h2><ol><li>更火</li><li>缺点<ol><li>JS的超集，最终还是编译成JS，像是JS的补丁，但又阉割了一些原型链上的api</li><li>object的天然的随意属性变动无法使用</li><li>只在编译期进行类型检测，没办法控制后端api的类型</li></ol></li></ol><h2 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h2><ol><li>不看好（只是一个产品）</li><li>RN为什么不学Flutter构建UI系统<ol><li>RN更关注JS执行环境，而不是UI层面</li></ol></li></ol><h2 id="PWA、WebComponent"><a href="#PWA、WebComponent" class="headerlink" title="PWA、WebComponent"></a>PWA、WebComponent</h2><ol><li>Google </li></ol><h2 id="GraphQL"><a href="#GraphQL" class="headerlink" title="GraphQL"></a>GraphQL</h2><ol><li>概念好但需要后端资源，但得到的利益都在前端，后端还会有性能消耗</li><li>成本高</li><li>不太会成为主流</li></ol><h2 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h2><ol><li>一家独大</li><li>微信小程序有外部公司开发多、自家的小程序只自家开发</li><li>会越来越火</li></ol><h2 id="行业趋势"><a href="#行业趋势" class="headerlink" title="行业趋势"></a>行业趋势</h2><ol><li>由于疫情大环境影响，不会有爆发增长的</li><li>小游戏（h5或app小程序）；幼稚，流量，增长访问</li><li>音视频直播；没有无门槛直播，成本高，要租用直播平台宽带，资源；成本会下降</li><li>服务端渲染【重点】<ol><li>游戏、网页；提升用户加载体验</li><li>React server component</li><li>音视频数据直接从源到用户端，不经过服务器，节省服务器资源成本</li></ol></li><li>大数据<ol><li>数据可视化；不仅是charts，突破二维（二维剔除了一些不必要的数据来得出结果，没有过程数据）</li><li>B端发展，更细化，更垂直（垂直领域）</li><li>用户/客户；用户：切换平台；客户：产品不兼容；所以集成度会越来越高</li><li>Canvas、WebGL 数据可视化</li></ol></li><li>Serverless【重点】<ol><li>组件既服务；组件可以直接连数据库</li><li>基础云服务由服务商提供，我们更要关注如何部署</li></ol></li><li>低代码 Low-code<ol><li>问题<ol><li>外部对接</li><li>需要学多个平台</li></ol></li><li>视觉抽象化转化为代码</li></ol></li><li>机器学习<ol><li>问卷调查怎么判断是否乱填<ol><li>通过填写时候的行为使用模型判断，不通过后端，直接用浏览器的资源实时判断</li></ol></li><li>…</li></ol></li><li>WebRTC (Web Real-Time Communication)<ol><li>5G</li></ol></li><li>WebAssembly<ol><li>计算的东西放到web上，底层数据处理比如视频的编辑</li><li>Rust</li></ol></li><li>DSL 描述系统语言(领域特定语言)</li></ol>]]></content>
      
      
      <categories>
          
          <category> Reading Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CRM系统前端权限控制优化升级方案</title>
      <link href="/case-study/crm-ui-permission/"/>
      <url>/case-study/crm-ui-permission/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="为什么要做权限控制？"><a href="#为什么要做权限控制？" class="headerlink" title="为什么要做权限控制？"></a>为什么要做权限控制？</h2><p>当前前端代码中控制组件显示有几种方式：</p><h3 id="1-通过-visible-permissions-接口返回的权限列表"><a href="#1-通过-visible-permissions-接口返回的权限列表" class="headerlink" title="1. 通过 visible_permissions 接口返回的权限列表"></a>1. 通过 visible_permissions 接口返回的权限列表</h3><ul><li>/profile 接口返回了当前登录用户的基础信息以及一个长长的权限列表</li></ul><img src="/images/case-study/crm-permissions/per.png" alt="前端权限列表" style="width:400px;margin:auto;" /><ul><li>有了这个列表以后，就可以在代码里这样去控制组件显示：</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tabs = [</span><br><span class="line">    <span class="comment">// ... some tabs</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">if</span> (visible_permissions.includes(<span class="string">'tab_entity_lead'</span>)) &#123;</span><br><span class="line">    tabs.push(<span class="xml"><span class="tag">&lt;<span class="name">SomeComponent</span> /&gt;</span></span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开发上线的时候一时爽，但是未来要修改，查阅权限，就会很痛苦。<br>产品想不起来某个角色是否有某个权限，就来问开发，开发发现这部分代码不是自己写的，就开始全局搜，凭感觉找。找到后产品说我们要修改一下…</p><h3 id="2-通过-role-id-判断权限"><a href="#2-通过-role-id-判断权限" class="headerlink" title="2. 通过 role_id 判断权限"></a>2. 通过 role_id 判断权限</h3><ul><li>这个就更过分了，/profile 接口会返回一个 <code>roles</code> 字段，是一个用逗号分隔的角色组合： <code>roles: &quot;1,3,20&quot;</code></li><li>同理在代码里就是这样控制：</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tabs = [</span><br><span class="line">    <span class="comment">// ... some tabs</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">if</span> (roles.split(<span class="string">','</span>).includes(<span class="string">'1'</span>)) &#123;</span><br><span class="line">    tabs.push(<span class="xml"><span class="tag">&lt;<span class="name">SomeComponent</span> /&gt;</span></span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这么做就连权限规则的名字也没有，所以更加难整理修改。</p><p>原有的两种判断方式都是在代码中写定判断逻辑</p><ol><li>判断方式不统一且太分散</li><li>修改某角色的权限组合要改代码逻辑，成本比较大</li><li>不容易定位到某角色某权限的当前表现</li></ol><h2 id="前端权限设计逻辑"><a href="#前端权限设计逻辑" class="headerlink" title="前端权限设计逻辑"></a>前端权限设计逻辑</h2><p>分散在项目各处的权限判断必然是错误的方向，想统一去管理页面渲染，最能想到的就是用一个JSON格式的配置告诉页面这个登录用户的页面将会渲染成什么样子。</p><p><strong>所以方案就是：</strong></p><ul><li><strong>为每个角色转一份JSON，并提供一个UI界面去管理控制、修改模板。</strong></li><li><strong>每个登录用户的权限是他/她拥有的各个角色的合集。</strong></li><li><strong>React：接口给我什么，我就渲染什么。</strong></li></ul><p>JSON数据的层级即为前端页面组件的层级，通过遍历数据来渲染应该显示的组件。</p><p>JSON的组成为：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pages: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"component_type"</span>: <span class="string">"menu"</span>,</span><br><span class="line">    <span class="string">"contents"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"component_type"</span>: <span class="string">"menu-page"</span>,</span><br><span class="line">        <span class="string">"contents"</span>: [</span><br><span class="line">          <span class="comment">// 为空或其他同样格式的对象数据</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"id"</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="string">"key"</span>: <span class="string">"dashboard"</span>,</span><br><span class="line">        <span class="string">"meta"</span>: &#123;</span><br><span class="line">          <span class="string">"icon"</span>: <span class="string">"menu_dashboard"</span>,</span><br><span class="line">          <span class="string">"route"</span>: <span class="string">"/dashboard"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"首页"</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>每个对象都拥有：</p><ul><li><code>component_type</code>  React 用于判断渲染的组件类型（Menu / Page / Section …）</li><li><code>contents</code> 子集，所包含的层级关系</li><li><code>id</code> id</li><li><code>key</code> React 用于判断渲染具体组件的 key</li><li><code>meta</code> 其他信息</li><li><code>name</code> 中文名称</li></ul><p>页面上应该渲染的元素全部由这个数据决定。</p><h2 id="拆页面：页面组件和层级定义"><a href="#拆页面：页面组件和层级定义" class="headerlink" title="拆页面：页面组件和层级定义"></a>拆页面：页面组件和层级定义</h2><ol><li>Menu （component_type: menu）<ol><li>侧边栏的大类（主控台、常用功能、管理功能）</li></ol></li><li>Page（component_type: menu-page/single-page）<ol><li>路由，不同的页面，/dashboard、/workbench、… 等</li><li>侧边栏的配置项</li><li>没有权限的路由会返回404界面</li><li>分为 menu-page（标准页） 和 single-page（详情页）</li></ol></li><li>Section（component_type：section-group / section）<ol><li>各页面下的标签栏（支持嵌套）</li><li>必须是 section-group 作为父级，section 作为子级，section-group 下只能是 section，section 下可以继续加入 section-group 来实现嵌套</li></ol></li><li>首页组件 （component_type: dashboard-item）<ol><li>首页上按权限显示的组件</li></ol></li><li>Common<ol><li>任何上面没有提到的其他需要权限的内容</li></ol></li></ol><p>页面层级示意图：<br><img src="/images/case-study/crm-permissions/per-2.png" alt="页面层级示意图" /></p><h2 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h2><ol><li>页面组件可选配置的模板的CRUD <code>GET</code> <code>POST</code></li></ol><p>页面组件的模板编辑：<br><img src="/images/case-study/crm-permissions/per-3.png" alt="页面组件的模板编辑" /></p><ol start="2"><li>各个角色所配的内容的CRUD <code>GET</code> <code>POST</code></li></ol><p>角色所拥有的的权限编辑：<br><img src="/images/case-study/crm-permissions/per-4.png" alt="角色所拥有的的权限编辑" /></p><ol start="3"><li>用户登录后获取的所拥有角色合集的权限配置 <code>GET</code></li></ol><p>/fe_permissions 返回包含当前登录用户的所有页面内容（JSON）<br><img src="/images/case-study/crm-permissions/per-5.png" alt="/fe_permissions 返回的 JSON 数据" /></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>提供了一系列内容的 Providers，JSON 配置里给出组件类型，就按需渲染对应的内容。</p><p>Components Providers<br>├── ContentProvider.jsx<br>├── DashboardProvider.jsx<br>├── PageProvider.jsx<br>├── SectionsProvider.jsx</p><p>└── index.less</p><p>举例：ContentProvider.jsx</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ContentProvider = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    content,</span><br><span class="line">    sectionsConfig = &#123;&#125;,</span><br><span class="line">  &#125; = props</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (content.componentType) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'section-group'</span>:</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;SectionsProvider &#123;...sectionsConfig&#125; sections=&#123;content.contents&#125; /&gt;</span><br><span class="line">      )</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'dashboard-item'</span>:</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;DashboardProvider &#123;...props&#125; /&gt;</span><br><span class="line">      )</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>没有该内容的渲染方式 &#123;content.componentType&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ContentProvider</span><br></pre></td></tr></table></figure><p>SectionProvider.jsx</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> SectionsProvider = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    sections,</span><br><span class="line">    tabPaneContent,</span><br><span class="line">    tabsConfig = &#123;&#125;,</span><br><span class="line">    customTabName = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;,</span><br><span class="line">  &#125; = props</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Tabs &#123;...tabsConfig&#125; type=<span class="string">'card'</span>&gt;</span><br><span class="line">      &#123;sections.map(<span class="function">(<span class="params">&#123; meta: &#123; scope &#125;, key, name, contents &#125;</span>) =&gt;</span> (</span><br><span class="line">        &lt;TabPane</span><br><span class="line">          key=&#123;scope || key&#125;</span><br><span class="line">          tab=&#123;customTabName(&#123; name, key, scope &#125;) || name&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          &#123;<span class="comment">/* 自定的内容 */</span>&#125;</span><br><span class="line">          &#123;tabPaneContent &amp;&amp; tabPaneContent(&#123; <span class="attr">scope</span>: scope || key, key, name &#125;)&#125;</span><br><span class="line">          &#123;<span class="comment">/* 接口里返回的内容 */</span>&#125;</span><br><span class="line">          &#123;contents.map(<span class="function"><span class="params">content</span> =&gt;</span> (</span><br><span class="line">            &lt;ContentProvider</span><br><span class="line">              key=&#123;content.key&#125;</span><br><span class="line">              content=&#123;content&#125;</span><br><span class="line">              sectionsConfig=&#123;&#123;</span><br><span class="line">                ...props,</span><br><span class="line">                tabsConfig: tabsConfig.subConfig,</span><br><span class="line">              &#125;&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">          ))&#125;</span><br><span class="line">        &lt;<span class="regexp">/TabPane&gt;</span></span><br><span class="line"><span class="regexp">      ))&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Tabs&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在遍历整个JSON配置时渲染对应的组件。</p>]]></content>
      
      
      <categories>
          
          <category> Case Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DevOps UI 设计</title>
      <link href="/fe/CSS/4.devops-ui/"/>
      <url>/fe/CSS/4.devops-ui/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="有些人表面是开发，背地里是UI设计"><a href="#有些人表面是开发，背地里是UI设计" class="headerlink" title="有些人表面是开发，背地里是UI设计"></a>有些人表面是开发，背地里是UI设计</h2><img src="/images/fe/devops.png" width="100%" alt="仿佛是给自己挖了个大坑" /><h2 id="实际开发"><a href="#实际开发" class="headerlink" title="实际开发"></a>实际开发</h2><img src="/images/fe/devops-done-1.jpg" width="100%" alt="感觉比设计的好看点" /><h2 id="实际上线"><a href="#实际上线" class="headerlink" title="实际上线"></a>实际上线</h2><img src="/images/fe/devops-done-2.png" width="100%" alt="顺眼多了，果然迭代很重要" /><img src="/images/fe/devops-done-3.png" width="100%" alt="完整" />]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Websocket 实现实时消息推送弹窗</title>
      <link href="/fe/JavaScript/11.ws-notification/"/>
      <url>/fe/JavaScript/11.ws-notification/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>CRM系统，销售用的时候感觉整个系统的主动性不够高。待办事项、预警、消息提醒等都没有特别明显的弹窗提示，所以有了这次改造。<br>原先SSE的方案，每秒钟会进行一次和服务器的交互：</p><ul><li>不够灵活，没有必要每1秒问一下有没有消息</li><li>新消息不会弹窗提醒</li><li>打开多个标签页的时候，其中一个更新已读信息，不会同步给其他的页面</li></ul><h2 id="HTTP-keep-alive-Vs-Websocket"><a href="#HTTP-keep-alive-Vs-Websocket" class="headerlink" title="HTTP keep-alive Vs Websocket"></a>HTTP keep-alive Vs Websocket</h2><ul><li>两者都是为了减少TCP的三次握手，四次挥手次数，即在一次TCP连接中做更多的事情</li><li>HTTP keep-alive <ul><li>在一次TCP连接中，进行多次HTTP的请求，但是这些请求都是无连接和无状态的。<ul><li>无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间；</li><li>无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</li><li>keep-alive 可以改善这种特性，在一次TCP连接中可以持续发送多份数据而不会断开连接。通过使用keep-alive机制，避免了建立或者重新建立连接的次数。</li></ul></li><li>所以HTTP虽然开启 keep-alive，每一次请求还是独立的，需要每次都将身份信息放在Header中，告诉服务端，并且需要客户端发起。</li></ul></li><li>Websocket<ul><li>通过第一个 HTTP 请求建立了 TCP 连接之后，之后的交换数据都不需要再发 HTTP 了，使得这个连接变成了一个真正的长连接，直到断开。</li><li>双向的通信，可以由服务端发送也可以由客户端发送消息。</li></ul></li></ul><h2 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h2><ul><li>每次建立连接时，客户端告诉服务端这个Websocket实例是为谁而建（当前登录的ID），服务端将实例推入一个列表放入内存中。</li><li>在有新消息时，服务端（<a href="https://websockets.readthedocs.io/en/stable/intro.html" target="_blank" rel="noopener">python websockets</a>）向客户端推送消息。</li><li>客户端获取新消息对象，包括类型和内容，加入本地的状态中（Redux中原有的消息列表），如果点击查看则发送已读消息像服务端，然后服务端广播已读结果，将同一个用户各个标签页的消息列表都进行更新。</li></ul><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><h3 id="同步的消息弹窗"><a href="#同步的消息弹窗" class="headerlink" title="同步的消息弹窗"></a>同步的消息弹窗</h3><img class="article-image" src="/images/fe/ws-notification.gif" width="500" alt="四个标签页同时更新" /><h3 id="同步的线索消息"><a href="#同步的线索消息" class="headerlink" title="同步的线索消息"></a>同步的线索消息</h3><img class="article-image" src="/images/fe/pop-mickey.gif" width="500" alt="四个标签页同时更新" />]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微前端分享记录</title>
      <link href="/fe/JavaScript/10.micro-fe/"/>
      <url>/fe/JavaScript/10.micro-fe/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>“微前端”一词最早于2016年底在ThoughtWorks Technology Radar中提出。它将微服务的概念扩展到了前端。将 Web 应用由单一的单体应用转变为多个小型前端应用聚合为一的应用。各个前端应用还可以独立开发、独立部署、独立运行。</p><p>不是单纯的前端框架或者工具，而是一套架构体系。可以有多种落地方案。</p><p>微前端背后的思想是将Web应用视为由独立团队拥有的功能的组合。每个团队都有自己关心和专长的不同业务或任务领域。一个团队具有跨职能，从数据库到用户界面，端到端地开发其功能。 （先拆，再合。）</p><img src="/images/fe/micro-fe-end.png" class="small-image" alt="端到端的微前端" /><h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><ol><li><p>拆分和细化：单页面应用（SPA）是非常流行的项目形态之一，而随着时间的推移以及应用功能的丰富，单页应用变得不再单一而是越来越庞大也越来越难以维护。<br>微前端的意义就是将这些庞大应用进行拆分，并随之解耦，每个部分可以单独进行维护和部署，提升效率。</p></li><li><p>整合历史系统：一些老框架类似（Backbone.js，Angular.js 1）的B端管理系统，要结合到新框架中但又没有时间和精力重写。<br>微前端可以将这些系统进行整合，在基本不修改原逻辑的同时来兼容新老两套系统并行运行。</p></li></ol><h2 id="核心价值"><a href="#核心价值" class="headerlink" title="核心价值"></a>核心价值</h2><p>不受技术影响。</p><p>独立开发、独立部署。</p><p>增量升级。我们通常很难对一个已经存在的系统做全量的技术栈升级或重构，而微前端是一种非常好的实施渐进式重构的手段和策略</p><p>独立运行时。每个微应用之间状态隔离，运行时状态不共享</p><p>– qiankun</p><h2 id="落地"><a href="#落地" class="headerlink" title="落地"></a>落地</h2><p>组合式应用路由方案，核心是“主从”思想，包括：<br>一个基座应用（通常是一个前端SPA项目，负责应用注册，路由映射，消息下发）<br>若干个微应用（不限于技术栈，即使脱离基座应用也可以单独访问）。</p><img src="/images/fe/micro-fe-plan.png" class="small-image" alt="组合式应用路由方案" /><h2 id="相关落地方案"><a href="#相关落地方案" class="headerlink" title="相关落地方案"></a>相关落地方案</h2><p>2018年 Single-SPA 诞生了，Single-SPA是一个用于前端微服务化的 JavaScript 前端解决方案（本身没有处理样式隔离，js执行隔离），实现了路由劫持和应用加载。</p><p>2019年 <a href="https://qiankun.umijs.org/zh/guide" target="_blank" rel="noopener">qiankun</a> 基于 Single-SPA 提供了更加开箱即用的 API 做到了技术栈无关、并且接入简单。蚂蚁内部200+线上项目使用中。<br>（介入协议：子应用在打包的时候要提供bootstrap、mount、unmount方法，让父应用调用。）</p><h2 id="应用之间通信"><a href="#应用之间通信" class="headerlink" title="应用之间通信"></a>应用之间通信</h2><ul><li>基于 URL</li><li>基于 CustomEvent</li><li>基于 props</li><li>基于 全局变量、Redux</li></ul><h2 id="iframe不香吗"><a href="#iframe不香吗" class="headerlink" title="iframe不香吗"></a>iframe不香吗</h2><ul><li>iframe 中的子应用切换路由时用户刷新页面会丢失状态</li><li>localStorage</li><li>通信不方便</li><li>需要设置高度，动态布局繁琐<br>…</li></ul><h2 id="qiankun"><a href="#qiankun" class="headerlink" title="qiankun"></a>qiankun</h2><ul><li>bootstrap、mount、unmount</li><li>支持子应用并行</li><li>父应用通过 fetch 获取子应用资源</li><li>支持js沙箱环境（js隔离）</li><li>css隔离（子父在默认sandbox中需要设定prefix）</li><li>按需加载</li><li>公共依赖加载</li><li>父子应用通信机制</li><li>子应用嵌套</li></ul><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><ul><li><a href="https://github.com/ykzhukian/micro-fe-demo" target="_blank" rel="noopener">iframe + qiankun demo</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Alfred Workflow 时间戳</title>
      <link href="/tool/3.alfred-workflow/"/>
      <url>/tool/3.alfred-workflow/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="时间戳转化工具"><a href="#时间戳转化工具" class="headerlink" title="时间戳转化工具"></a>时间戳转化工具</h2><p>原先找了个别人写的 <a href="http://www.packal.org/workflow/timestamp" target="_blank" rel="noopener">Timestamp</a>， 但是用着不方便，转换结果需要粘贴出来才能看到，一般情况下其实只要瞄一眼就好了。于是想让结果直接显示在列表里。</p><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p>查了下文档 Alfred 只支持 xml 格式的数据来列表展示。发现原来的工具无法兼容。自己写一个：</p><ul><li>创建新的 Workflow</li><li>右键添加 <code>Inputs</code> -&gt; <code>Script Filter</code></li></ul><img src="/images/reading/alfred-ts.png" width="100%" alt="就用php吧，自带一些文字日期转换" /><ul><li><p>选择语言：Language - php</p></li><li><p>with input as {query}</p></li><li><p>Script：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$query = <span class="string">'&#123;query&#125;'</span>;</span><br><span class="line">$result = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If the input is empty or 'now', return the current timestamp.</span></span><br><span class="line"><span class="keyword">if</span> ($query == <span class="string">'now'</span> || $query == <span class="string">''</span>) &#123;</span><br><span class="line">$result = @time();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If the input is an integer, output the datetime.</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (is_numeric($query)) &#123;</span><br><span class="line">$result = @date(<span class="string">'Y-m-d h:i:s'</span>, $query);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Otherwise, use strtotime to convert the string.</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">$result = @strtotime($query);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;?xml version="1.0"?&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;items&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;item uid="timestamp" arg="'</span>.$result.<span class="string">'"&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;title&gt;结果为: '</span> .$result. <span class="string">'&lt;/title&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;subtitle&gt;Press Enter to paste&lt;/subtitle&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;icon&gt;icon.png&lt;/icon&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;/item&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;/items&gt;'</span>;</span><br></pre></td></tr></table></figure></li><li><p>粘贴</p></li></ul><img class="small-image" src="/images/reading/alfred-paste.png" alt="粘贴" /><ul><li>效果</li></ul><img class="small-image" src="/images/reading/alfred-ts-done.png" alt="文字转时间戳" /><img class="small-image" src="/images/reading/alfred-ts-stamp.png" alt="Timestamp to string" />]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端项目接入 SonarQube</title>
      <link href="/fe/JavaScript/9.javascript-sonar/"/>
      <url>/fe/JavaScript/9.javascript-sonar/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="先在本地用-Docker-跑个-Sonar"><a href="#先在本地用-Docker-跑个-Sonar" class="headerlink" title="先在本地用 Docker 跑个 Sonar"></a>先在本地用 Docker 跑个 Sonar</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name sonarqube -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=<span class="literal">true</span> -p 9000:9000 sonarqube:latest</span><br></pre></td></tr></table></figure><p>进入 <a href="http://localhost:9000" target="_blank" rel="noopener">http://localhost:9000</a> ， 一开始打不开，原因是开了nginx，关掉就好了</p><p>默认的登录账号/密码是 admin/admin</p><h2 id="创建一个新项目"><a href="#创建一个新项目" class="headerlink" title="创建一个新项目"></a>创建一个新项目</h2><p>选择 JavaScript 语言，生成 token（需要保存下来），然后运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sonar-scanner \</span><br><span class="line">  -Dsonar.projectKey=[刚才创建的项目名称] \</span><br><span class="line">  -Dsonar.sources=. \</span><br><span class="line">  -Dsonar.host.url=http://localhost:9000 \</span><br><span class="line">  -Dsonar.login=[刚才生成的token] \</span><br><span class="line">  -Dsonar.javascript.file.suffixes=.js,.jsx</span><br></pre></td></tr></table></figure><p>需要安装 <code>sonar-scanner</code>，Mac 上的话可以用 <code>homebrew</code> 安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install sonar-scanner</span><br></pre></td></tr></table></figure><p>之后就可以看到自动生成的报告了。</p><h2 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h2><p><code>Sonar</code> 文档里提到通过插件的方式引入自定义 <code>rules</code> 的方式已经被放弃了，所以需要自己在项目中配置完 <code>ESLint</code> 并生成一份报告，再传给 <code>Sonar</code>。</p><p>配置完后运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eslint -f json -o report.json .</span><br></pre></td></tr></table></figure><p>然后进入 <code>Sonar</code> 的UI界面，进入 <code>Project Setting</code> -&gt; <code>General Settings</code> -&gt; <code>External Analyzers</code>，找到 JavaScript 下的 ESLint Report Files，填写 <code>report.json</code>。</p><p>再次运行 <code>sonar-scanner</code> 的时候就会带上 <code>ESLint</code> 的报告了。</p>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DevOps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百姓网宝山总部体验销售和CRM产品使用情况调研</title>
      <link href="/reading/3.baixing-sale/"/>
      <url>/reading/3.baixing-sale/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="作为CRM系统组的前端开发，为了能够深刻了解系统的服务对象在使用时的真实情况，来宝山总部调研，希望能够对CRM系统的优化收集到有价值的信息。"><a href="#作为CRM系统组的前端开发，为了能够深刻了解系统的服务对象在使用时的真实情况，来宝山总部调研，希望能够对CRM系统的优化收集到有价值的信息。" class="headerlink" title="作为CRM系统组的前端开发，为了能够深刻了解系统的服务对象在使用时的真实情况，来宝山总部调研，希望能够对CRM系统的优化收集到有价值的信息。"></a>作为CRM系统组的前端开发，为了能够深刻了解系统的服务对象在使用时的真实情况，来宝山总部调研，希望能够对CRM系统的优化收集到有价值的信息。</h4><h2 id="体验销售"><a href="#体验销售" class="headerlink" title="体验销售"></a>体验销售</h2><p>百姓网作为分类信息推广平台，涉猎的领域非常广，线索量大，合理流转和管理线索，为销售提高工作效率是CRM系统的核心。米奇不仅是销售和客户关系管理的工具，同时也提供主管对销售的管理平台。</p><p>从前端开发的角度考虑，优秀的CRM需要提供清晰的对线索的流转和状态的展示，让销售得到准确详细的信息。然而通过这次体验，我个人对CRM系统的理解从以信息为主，转变到了以效率为主。自研的CRM系统的优势，就是更加贴紧符合百姓网独特的业务模式，满足销售的真实使用需求吧。</p><p>对于销售，我原本的理解是通过向客户介绍产品，从而将客户的需求转化为购买行为，并挖掘客户更多潜在的需求，而难点在于准确了解到客户的需求并提供相应的产品。在体验过后，才感受到销售的难处更在于从庞大的线索库中挖掘有价值的客户以及在持有大量需要跟进的客户时，依旧保证对每一个都能维护好关系、明确需求精准地交流。并没有考虑到在这个量级上更关注的是效率。</p><p>刚上手的时候，我遇到的第一个问题是，电话通了要跟客户说什么。于是我开始关注客户的跟进记录，他发过的帖子，购买产品的记录，是个人或是商户，然后对比我们的产品，组织语句告诉他产品可以为他带来的价值。但是这一个过程不是那么清晰的和快速的。在翻看跟进记录时，有些客户的跟进多以无效触达，未接听，甚至客户的名称也没有；有些则是老客户相对的跟进记录比较长，该客户当下的需求是比较模糊的。这时候老黄说，其实没有必要这么去看记录，直接打就好，因为如果每个客户都这么研究一番，时间已经花去很多，每天就不可能达到三四百的客户的触达。所以，还是效率为重。</p><p>电话拨通后，没太听明白客户带着方言的话，然后很蠢地问了他是不是在百姓网发过贴（废话），是不是有购买’超级刷新’的意向。迅速回想到产品周的时候看过超级刷新和一些同类产品的作用。结果客户并没有意愿，只是抱怨发出了帖子之后，都没有接到任何的电话，然后就说没有用处，挂断电话。</p><p>看来一名专业的销售，是要具备消化所有从不友好交流中被施加的压力的能力的。这方面确实很佩服销售可以在各种无法预测的压力来源中，能够保持良好的状态。如果说这方面有什么可以改善的，也许是可以通过技术的手段，帮助销售筛除一些素质较差，完全没有意向，没有价值的客户。</p><h2 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h2><p>技术的本身是服务于使用的人的，为使用者提高效率，才是有价值的技术。在此次体验之前，我对项目的优化主要还是对前端本身的优化，在代码的质量，框架的使用上为主；但其实另一方面，对用户实际使用的优化也很重要，甚至更重要。而这里的优化的一个重点应该就是提高销售的效率。</p><p>有个简单的例子是，在保存客户信息编辑的地方，每次保存会有弹窗提示保存成功，几秒后会消失。但是这个弹窗很遮挡一个按钮，每次销售在保存后，需要等待这几秒才能点击被遮挡的按钮。而这个操作每天会重复非常多次，所以一天下来就会有15分钟耗费在等待上。原本是一个辅助的提示，却成了一种限制。</p><p>另一方面的效率则是在用技术来自动化一些人工的操作。这个点的应用很广，新兵营的主题：流程，有一个优化的方式也是通过技术简化步骤和人员。平时在使用工具比如电脑，开发环境等，也会使用工作流来释放双手，其实是个挺爽的过程。在米奇中，大概关注到几点这方面的潜在优化点：</p><ol><li><p>销售在跟进后，提交跟进记录时，如果是通过电话跟进的，可以把通话情况（未接、空号、挂断、通话时长等）通过当前的通话系统来自动补充这些信息。</p><ul><li>当前管理者在确认销售跟进情况时，并不会参考销售手动填写的比如未接通、挂断等的记录，而是从通话记录中去查看真实的情况。</li><li>通话的内容已经智能转成了文字，添加到了跟进记录中，但是没有通话的时长、未接、挂断等这些信息，是否也可以智能地录入跟进记录，而不是手动填写。</li><li>自动补充的信息会更快捷、可靠一些。</li></ul></li><li><p>老黄反应的一个痛点是，销售不能非常高效地从公海中筛选出有价值的客户。是否能从技术上一些角度来帮助这个步骤的进行。</p><ul><li>当前会有机器人来拨电话筛选一些潜在客户。</li><li>每天每个销售在三四百的通话数中，能成单的屈指可数，是否可以减少无用的通话数量来节省时间。</li></ul></li><li><p>销售主管在批注意向的时候会按照一个模板，这个模板需要手动重复地粘贴到输入框中。（只涉及4个主管，优先级后置）</p><ul><li>可以通过前端优化，把模板的文字自动填入输入框作为默认内容。或是把输入框改成几个下拉框，用点击代替复制粘贴和打字。</li></ul></li><li><p>重复地进行完全一样的手动筛选。销售在查询线索的时候通常会使用一模一样的筛选标签，每次进入和刷新页面会做一样的点击操作，这些步骤其实是可以自动化的。</p><ul><li>每个销售针对的客户类目其实会比较稳定，所以可以给每个销售提供自定义的，默认的筛选项，每次进入公海，可减少重复的筛选点击，以提高效率。</li></ul></li></ol><p>另外一个重要的点是CRM系统主动地做一些消息提醒。几乎所有被问到米奇优化点的销售都提了这个。销售在实际工作中打开的页面大多就是公海、私海和客户详情页，其他的一些首页、工作台其实并不会经常开着放在一旁。所以在一些提醒信息上比如<code>今日待办</code>，由于主动查看会降低效率的原因，不会一直去刷新查看，重要的时间点多凭借销售的记忆，以致于会有错过一些已经排期的需要执行的跟进。可以将此类的消息推送由系统主动提示，到了特定的跟进时间，以弹窗或是小铃铛等的方式来提醒销售。这也会让系统更智能化。</p><ul><li>今日待办、消息通知里的事项通过系统主动提醒</li><li>已经跟进过的线索，在预警中自动隐藏掉</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>其他一些了解到的优化点：</p><ul><li>私海列表中，临近时间快到期的客户比较难找，如果有按跟进时间排序会好很多（线索列表排序功能有些异常）</li><li>线索列表搜索框 模糊搜索 不准确：搜索泰州会出现没有泰州两个字的线索</li><li>线索搜索添加：按照外呼时长来过滤线索。选项可以有： 30s、60s …</li><li>优质线索通知点过之后没有历史记录查看</li><li>发短信弹窗点击空白处关闭</li><li>每天弹出的您有xx条线索跟进，快点击去挣钱弹窗可以有关闭按钮</li><li>微信绑定弹窗不频繁显示并且可以选择不绑定（有些销售觉得绑定无用）</li></ul>]]></content>
      
      
      <categories>
          
          <category> Reading Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Read </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>弄个小库用来把对象的所有 key 转为 snake_case 或 camelCase</title>
      <link href="/fe/JavaScript/8.object-key-convertor/"/>
      <url>/fe/JavaScript/8.object-key-convertor/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="JavaScript-中一般习惯使用驼峰的格式写变量名，但难保证各种接口返回的是什么格式，通常看后端语言决定，所以可以在返回后统一一下。"><a href="#JavaScript-中一般习惯使用驼峰的格式写变量名，但难保证各种接口返回的是什么格式，通常看后端语言决定，所以可以在返回后统一一下。" class="headerlink" title="JavaScript 中一般习惯使用驼峰的格式写变量名，但难保证各种接口返回的是什么格式，通常看后端语言决定，所以可以在返回后统一一下。"></a>JavaScript 中一般习惯使用驼峰的格式写变量名，但难保证各种接口返回的是什么格式，通常看后端语言决定，所以可以在返回后统一一下。</h3><ul><li><a href="https://www.npmjs.com/package/object-keys-convertor" target="_blank" rel="noopener">object-keys-convertor</a></li></ul><h3 id="1-完成功能"><a href="#1-完成功能" class="headerlink" title="1. 完成功能"></a>1. 完成功能</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 详见：repo</span></span><br><span class="line"><span class="keyword">import</span> Convertor <span class="keyword">from</span> <span class="string">'./Convertor'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Mapper</span> </span>&#123;</span><br><span class="line">  private obj: Obj;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(obj: Obj) &#123;</span><br><span class="line">    <span class="keyword">this</span>.obj = obj</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toCamelcase = (currentVal = <span class="keyword">this</span>.obj): <span class="function"><span class="params">Obj</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  toSnakecase = (currentVal = <span class="keyword">this</span>.obj): <span class="function"><span class="params">Obj</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-测试"><a href="#2-测试" class="headerlink" title="2. 测试"></a>2. 测试</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; toCamelcase, toSnakecase &#125; <span class="keyword">from</span> <span class="string">'../src'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'Main'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    key_of_map: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'key_the-map'</span>: &#123;</span><br><span class="line">      key_ofmap: <span class="number">2</span>,</span><br><span class="line">      key_for_map: &#123;</span><br><span class="line">        <span class="string">' key -_nested'</span>: &#123;</span><br><span class="line">          <span class="string">'key deep'</span>: &#123;</span><br><span class="line">            <span class="string">'key deeper_'</span>: <span class="string">'end'</span>,</span><br><span class="line">            b2b_Category: <span class="string">'b2b'</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  test(<span class="string">'Main.toCamelCase'</span>, () =&gt; &#123;</span><br><span class="line">    expect(toCamelcase(data)).toEqual(&#123;</span><br><span class="line">      keyOfMap: <span class="number">1</span>,</span><br><span class="line">      keyTheMap: &#123;</span><br><span class="line">        keyOfmap: <span class="number">2</span>,</span><br><span class="line">        keyForMap: &#123;</span><br><span class="line">          keyNested: &#123;</span><br><span class="line">            keyDeep: &#123;</span><br><span class="line">              keyDeeper: <span class="string">'end'</span>,</span><br><span class="line">              b2bCategory: <span class="string">'b2b'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  test(<span class="string">'Main.toSnakecase'</span>, () =&gt; &#123;</span><br><span class="line">    expect(toSnakecase(data)).toEqual(&#123; <span class="comment">/* ... */</span> &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-编译"><a href="#3-编译" class="headerlink" title="3. 编译"></a>3. 编译</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"tsc"</span>,</span><br><span class="line">    <span class="attr">"type-check"</span>: <span class="string">"tsc --noEmit"</span>,</span><br><span class="line">    <span class="attr">"type-check:watch"</span>: <span class="string">"npm run type-check -- --watch"</span>,</span><br><span class="line">    <span class="attr">"prepare"</span>: <span class="string">"npm run build"</span>,</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"jest --watchAll"</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-发布"><a href="#4-发布" class="headerlink" title="4. 发布"></a>4. 发布</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm login</span><br><span class="line">npm publish</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法图解 Grokking Algorithms</title>
      <link href="/reading/2.grokking-algorithms/"/>
      <url>/reading/2.grokking-algorithms/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>一本非常基础的算法书，补补脑子。</p><h3 id="一、大O表示法"><a href="#一、大O表示法" class="headerlink" title="一、大O表示法"></a>一、大O表示法</h3><ul><li>算法的运行时间以不同的速度增加</li><li>大O表示法指出了最糟情况下的运行时间</li><li>一些常见的大O运行时间<ul><li>O(log n) 对数时间，比如二分查找</li><li>O(n) 线性时间，比如简单查找</li><li>O(n * logn) 快速排序</li><li>O(n^2) 选择排序</li><li>O(n!) 非常慢</li></ul></li><li>大O中省略常数</li></ul><h4 id="Summary-1"><a href="#Summary-1" class="headerlink" title="Summary 1."></a>Summary 1.</h4><ul><li>二分查找的速度比简单查找快得多</li><li>O(log n) 比 O(n) 快</li><li>算法运行时间并不以秒为单位</li><li>算法运行时间是从其增速的角度度量的</li><li>算法运行时间用大O表示法表示</li></ul><h3 id="二、选择排序"><a href="#二、选择排序" class="headerlink" title="二、选择排序"></a>二、选择排序</h3><ul><li>内存：每个抽屉都有地址，存入的东西都记录地址</li><li>数组和链表<ul><li>数组：读取快</li><li>链表：插入、删除快</li></ul></li><li>选择排序 O(n^2) 每次拿出剩余的最大/小项，共进行 n * n 次</li></ul><h4 id="Summary-2"><a href="#Summary-2" class="headerlink" title="Summary 2."></a>Summary 2.</h4><ul><li>计算机内容犹如一大堆抽屉</li><li>需要存储多个元素时，可使用数组或链表</li><li>数组的元素都在一起</li><li>链表的元素时分开的，其中每个元素都存储了下一个元素的地址</li><li>数组的读取速度很快</li><li>链表的插入和删除速度很快</li><li>在同一个数组中，所有元素的类型都必须相同</li></ul><h3 id="三、递归"><a href="#三、递归" class="headerlink" title="三、递归"></a>三、递归</h3><ul><li>递归指的是调用自己的函数</li><li>每个递归函数都有两个条件：基本条件和递归条件</li><li>栈有两种操作：压入和弹出</li><li>所有函数调用都进入调用栈</li><li>调用栈可能很长，这将占用大量的内存</li></ul><h3 id="四、快速排序"><a href="#四、快速排序" class="headerlink" title="四、快速排序"></a>四、快速排序</h3><ul><li><p>D&amp;C算法是递归的。</p><ol><li>找出基线条件，这种条件必须尽可能简单。</li><li>不断将问题分解（或者说缩小规模），直到符合基线条件。</li></ol></li><li><p>复杂度 O(n * logn) （同归并排序）</p></li><li><p><code>欧几里得算法</code>又称<code>辗转相除法</code>，是指用于计算两个非负整数a，b的最大公约数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gcd</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a % b == <span class="number">0</span>) <span class="keyword">return</span> b;</span><br><span class="line">  <span class="keyword">return</span> gcd(b, a % b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数式编程是声明式的一种类型，声明式强调目标而不是具体过程。</p></li></ul><h4 id="Summary-4"><a href="#Summary-4" class="headerlink" title="Summary 4."></a>Summary 4.</h4><ul><li>D&amp;C将问题逐步分解。使用D&amp;C处理列表时，基线条件很可能是空数组或只包含一个元素的数组。</li><li>实现快速排序时，请随机地选择用作基准值的元素。快速排序的平均运行时间为 O(n * logn)。</li><li>大O表示法中的常量有时候事关重大，这就是快速排序比归并排序快的原因所在。</li><li>比较简单查找和二分查找时，常量几乎无关紧要，因为列表很长时，O(logn)的速度比O(n)快很多。</li></ul><h3 id="五、散列表-Hash-tabe"><a href="#五、散列表-Hash-tabe" class="headerlink" title="五、散列表 Hash tabe"></a>五、散列表 Hash tabe</h3><ul><li>散列函数总是将同样的输入映射到相同的索引。每次你输入avocado，得到的都是同一个数字。因此，你可首先使用它来确定将鳄梨的价格存储在什么地方，并在以后使用它来确定鳄梨的价格存储在什么地方。</li><li>散列函数将不同的输入映射到不同的索引。avocado映射到索引4，milk映射到索引0。每种商品都映射到数组的不同位置，让你能够将其价格存储到这里。</li><li>散列函数知道数组有多大，只返回有效的索引。如果数组包含5个元素，散列函数就不会返回无效索引100。</li><li>O(1) - O(n)</li><li>在平均情况下，散列表的查找(获取给定索引处的值)速度与数组一样快</li><li>填装因子大于1意味着商品数量超过了数组的位 置数。一旦填装因子开始增大，你就需要在散列表中添加位置，这被称为调整长度(resizing)。填装因子越低，发生冲突的可能性越小，<br>散列表的性能越高。</li><li>一旦填装因子超过0.7，就该调整散列表的长度。</li></ul><h4 id="Summary-5"><a href="#Summary-5" class="headerlink" title="Summary 5."></a>Summary 5.</h4><p>散列表适用于：</p><ul><li>模拟映射关系;</li><li>防止重复;</li><li>缓存/记住数据，以免服务器再通过处理来生成它们。</li></ul><p>而要避免冲突，需要有:</p><ul><li>较低的填装因子; </li><li>良好的散列函数。</li></ul><h3 id="六、广度优先搜索-Breadth-first-Search"><a href="#六、广度优先搜索-Breadth-first-Search" class="headerlink" title="六、广度优先搜索 Breadth-first Search"></a>六、广度优先搜索 Breadth-first Search</h3><ul><li>图用于模拟一组连接。图由节点和边组成。一个节点可能与众多节点直接相连，这些节点被称为邻居。</li><li>广度优先搜索：</li></ul><ol><li>广度优先搜索指出是否有从A到B的路径。</li><li>如果有，广度优先搜索将找出最短路径。</li><li>面临类似于寻找最短路径的问题时，可尝试使用图来建立模型，再使用广度优先搜索来<br>解决问题。</li><li>有向图中的边为箭头，箭头的方向指定了关系的方向，例如，rama→adit表示rama欠adit钱。</li><li>无向图中的边不带箭头，其中的关系是双向的，例如，ross - rachel表示“ross与rachel约<br>会，而rachel也与ross约会”。</li><li>队列是先进先出(FIFO)的。</li><li>栈是后进先出(LIFO)的。</li><li>你需要按加入顺序检查搜索列表中的人，否则找到的就不是最短路径，因此搜索列表必<br>须是队列。</li><li>对于检查过的人，务必不要再去检查，否则可能导致无限循环。</li></ol><h3 id="七、狄克斯特拉算法"><a href="#七、狄克斯特拉算法" class="headerlink" title="七、狄克斯特拉算法"></a>七、狄克斯特拉算法</h3><ul><li>广度优先搜索找出的是段数最少的路径。如果要找出最快的路径可使用另一种算法——狄克斯特拉算法(Dijkstra’s algorithm)。</li></ul><ol><li>找出最便宜的（权重最小）节点</li><li>对于该节点的邻居，检查是否有前往它们的更短路径，如果有，就更新其开销。</li><li>重复这个过程，直到对图中的每个节点都这样做了。</li><li>计算最终路径。</li></ol><ul><li>加权图(weighted graph)</li><li>非加权图(unweighted graphQ34567809  -=<br>在无向图中，每条边都是一个环。狄克斯特拉算法只适用于有向无环图(directed acyclic graph，DAG)。</li></ul><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>要编写解决这个问题的代码，需要三个散列表。</p><h4 id="Summary-7"><a href="#Summary-7" class="headerlink" title="Summary 7."></a>Summary 7.</h4><ul><li>广度优先搜索用于在非加权图中查找最短路径。</li><li>狄克斯特拉算法用于在加权图中查找最短路径。</li><li>仅当权重为正时狄克斯特拉算法才管用。</li><li>如果图中包含负权边，请使用贝尔曼福德算法。</li></ul><h3 id="八、贪婪算法"><a href="#八、贪婪算法" class="headerlink" title="八、贪婪算法"></a>八、贪婪算法</h3><ul><li>每步都选择局部最优解，最终得到的就是全局最优解。</li></ul><p>教室分配课程：<br>(1) 选出结束最早的课，它就是要在这间教室上的第一堂课。<br>(2) 接下来，必须选择第一堂课结束后才开始的课。同样，你选择结束最早的课，这将是要<br>在这间教室上的第二堂课。</p><h4 id="NP完全问题"><a href="#NP完全问题" class="headerlink" title="NP完全问题"></a>NP完全问题</h4><ul><li>元素较少时算法的运行速度非常快，但随着元素数量的增加，速度会变得非常慢。</li><li>涉及“所有组合”的问题通常是NP完全问题。</li><li>不能将问题分成小问题，必须考虑各种可能的情况。这可能是NP完全问题。</li><li>如果问题涉及序列（如旅行商问题中的城市序列）且难以解决，它可能就是NP完全问题。</li><li>如果问题涉及集合（如广播台集合）且难以解决，它可能就是NP完全问题。</li><li>如果问题可转换为集合覆盖问题或旅行商问题，那它肯定是NP完全问题。</li></ul><h4 id="Summary-8"><a href="#Summary-8" class="headerlink" title="Summary 8."></a>Summary 8.</h4><ul><li>贪婪算法寻找局部最优解，企图以这种方式获得全局最优解。</li><li>对于NP完全问题，还没有找到快速解决方案。</li><li>面临NP完全问题时，最佳的做法是使用近似算法。</li><li>贪婪算法易于实现、运行速度快，是不错的近似算法。</li></ul><h3 id="九、动态规划"><a href="#九、动态规划" class="headerlink" title="九、动态规划"></a>九、动态规划</h3><ul><li>动态规划从小问题着手，逐步解决大问题</li></ul><h4 id="Summary-9"><a href="#Summary-9" class="headerlink" title="Summary 9."></a>Summary 9.</h4><p>需要在给定约束条件下优化某种指标时，动态规划很有用。</p><ul><li>问题可分解为离散子问题时，可使用动态规划来解决。</li><li>每种动态规划解决方案都涉及网格。</li><li>单元格中的值通常就是你要优化的值。</li><li>每个单元格都是一个子问题，因此你需要考虑如何将问题分解为子问题。</li><li>没有放之四海皆准的计算动态规划解决方案的公式。</li></ul><h3 id="十、K最近邻算法"><a href="#十、K最近邻算法" class="headerlink" title="十、K最近邻算法"></a>十、K最近邻算法</h3><ul><li>K：和目标最近的K个近邻</li></ul><h4 id="特征抽取"><a href="#特征抽取" class="headerlink" title="特征抽取"></a>特征抽取</h4><ol><li>抽取它们的特征，再根据特征绘图</li><li>计算两坐标距离</li></ol><h4 id="OCR指的是光学字符识别，使用KNN算法"><a href="#OCR指的是光学字符识别，使用KNN算法" class="headerlink" title="OCR指的是光学字符识别，使用KNN算法"></a>OCR指的是光学字符识别，使用KNN算法</h4><ul><li>OCR的第一步是查看大量的数字图像并提取特征，这被称为训练（training）。大多数机器学<br>习算法都包含训练的步骤：要让计算机完成任务，必须先训练它。下一个示例是垃圾邮件过滤器，<br>其中也包含训练的步骤。</li></ul><h4 id="Summary-10"><a href="#Summary-10" class="headerlink" title="Summary 10."></a>Summary 10.</h4><p>KNN用于分类和回归，需要考虑最近的邻居。</p><ul><li>分类就是编组。</li><li>回归就是预测结果（如数字）。</li><li>特征抽取意味着将物品（如水果或用户）转换为一系列可比较的数字。</li><li>能否挑选合适的特征事关KNN算法的成败。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Reading Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Read </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封装一个处理异步 Loading 的 React Custom Hook</title>
      <link href="/fe/React/2.custom-hook/"/>
      <url>/fe/React/2.custom-hook/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="发送请求获取-Loading-状态"><a href="#发送请求获取-Loading-状态" class="headerlink" title="发送请求获取 Loading 状态"></a>发送请求获取 Loading 状态</h2><h3 id="实际开发中总是会遇到一个请求发出去以后的-loading-状态"><a href="#实际开发中总是会遇到一个请求发出去以后的-loading-状态" class="headerlink" title="实际开发中总是会遇到一个请求发出去以后的 loading 状态"></a>实际开发中总是会遇到一个请求发出去以后的 loading 状态</h3><h3 id="1-需要在-UI-上添加-Loading-的弹窗效果"><a href="#1-需要在-UI-上添加-Loading-的弹窗效果" class="headerlink" title="1. 需要在 UI 上添加 Loading 的弹窗效果"></a>1. 需要在 UI 上添加 Loading 的弹窗效果</h3><h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><p>通常情况可以在封装请求函数的时候统一在拦截器中添加 <code>显示</code> 或 <code>隐藏</code> Loading 图标的处理。</p><p>例如（axios）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; BASE_URL &#125; = process.env;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = axios.create(&#123;</span><br><span class="line">  baseURL: BASE_URL,</span><br><span class="line">  timeout: <span class="number">20000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拦截器</span></span><br><span class="line">request.interceptors.response.use(</span><br><span class="line">  (response) =&gt; &#123;</span><br><span class="line">    Toast.hide();</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>或者（Fetch）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> request = <span class="keyword">new</span> Fetch(&#123;</span><br><span class="line">  prefix: apiPrefix,</span><br><span class="line">  beforeRequest, <span class="comment">// 可以在此处处理 Loading</span></span><br><span class="line">  afterResponse, <span class="comment">// 可以在此处处理 Loading</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>缺点：这样适合一些简单的 H5 界面，但这样就过于统一。有些请求不需要 Loading 就要特殊处理</p><h3 id="2-实际不仅只有弹一个-Loading-而已"><a href="#2-实际不仅只有弹一个-Loading-而已" class="headerlink" title="2. 实际不仅只有弹一个 Loading 而已"></a>2. 实际不仅只有弹一个 Loading 而已</h3><ul><li>获取状态后也可以用在 antd <code>Table</code> 的组件上作为一个传参</li><li>异步处理，等待接口返回后做些其他事情</li><li>渲染不一样的 Loading 界面等等</li></ul><h3 id="封装一个-React-Hook-来解决"><a href="#封装一个-React-Hook-来解决" class="headerlink" title="封装一个 React Hook 来解决"></a>封装一个 React Hook 来解决</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useReqeust = (&#123;</span><br><span class="line">  request, <span class="comment">// 任意的请求，或异步事件</span></span><br><span class="line">  toast, <span class="comment">// 要不要弹转圈圈的弹窗通过传参决定</span></span><br><span class="line">&#125;: &#123;</span><br><span class="line">  request: <span class="function">(<span class="params">params?: any</span>) =&gt;</span> any</span><br><span class="line">  toast?: boolean</span><br><span class="line">&#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = useState(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [result, setResult] = useState(&#123;&#125;); <span class="comment">// 格式可以统一，比如： &#123; success: true, state: 200 &#125; 或者可以在封装请求时统一格式</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> sendRequest = <span class="keyword">async</span> (params?: any) =&gt; &#123;</span><br><span class="line">    setLoading(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (toast) &#123;</span><br><span class="line">      <span class="comment">// 弹出一个 Loading 的弹窗</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> request(params);</span><br><span class="line">      setResult(res);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      setLoading(<span class="literal">false</span>);</span><br><span class="line">      <span class="comment">// 隐藏 Loading 的弹窗</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    loading,</span><br><span class="line">    result,</span><br><span class="line">    sendRequest,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useReqeust;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; loading, result, sendRequest &#125; = useReqeust(&#123;</span><br><span class="line">  request: someRequest</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">useEffect(</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    sendRequest(&#123; <span class="comment">/* 传参 */</span> &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  [],</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">useEffect(</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(loading, result);</span><br><span class="line">  &#125;,</span><br><span class="line">  [loading, result],</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搞定：Getting Things Done</title>
      <link href="/reading/1.getting-things-done/"/>
      <url>/reading/1.getting-things-done/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>工作、生活、学习和家庭，最近状态都比较乱糟糟的。书单、学习清单越来越长也不见缩短，据说这本书可以解决我当下的焦虑。边看边随便记一点有用的吧。</p><h4 id="一、旧的习惯和模式不能应对现在的情况"><a href="#一、旧的习惯和模式不能应对现在的情况" class="headerlink" title="一、旧的习惯和模式不能应对现在的情况"></a>一、旧的习惯和模式不能应对现在的情况</h4><ul><li>工作和生活不再有那么明确的界限，并且在不断变化</li><li>有一种高效状态：沉浸在一项工作中，高效地一转眼就过去半天，能否随时进入这种状态？</li><li>管理自己的行动可以管理好“材料”：<ul><li>横向管理：不间断的，全方位扫描的雷达，对象是任何吸引你关注的事情。</li><li>纵向管理：是对每个具体主题或项目进行思考和协调，并跟踪其进展情况。从广义讲，这就是项目规划，它的焦点聚集在某一事务、状况或某一个人身上，勾勒出执行过程中的一切。</li></ul></li></ul><h5 id="不要等生活、工作一团糟才去列清单。而是要把这种做法转化为现在生活和工作中运行模式的一种常态，使之贯穿生活的各个领域，细化到方方面面。然后在实际行动过程中去挑选要采取的行动，而不是重新思考那些事务的来龙去脉。"><a href="#不要等生活、工作一团糟才去列清单。而是要把这种做法转化为现在生活和工作中运行模式的一种常态，使之贯穿生活的各个领域，细化到方方面面。然后在实际行动过程中去挑选要采取的行动，而不是重新思考那些事务的来龙去脉。" class="headerlink" title="不要等生活、工作一团糟才去列清单。而是要把这种做法转化为现在生活和工作中运行模式的一种常态，使之贯穿生活的各个领域，细化到方方面面。然后在实际行动过程中去挑选要采取的行动，而不是重新思考那些事务的来龙去脉。"></a>不要等生活、工作一团糟才去列清单。而是要把这种做法转化为现在生活和工作中运行模式的一种常态，使之贯穿生活的各个领域，细化到方方面面。然后在实际行动过程中去挑选要采取的行动，而不是重新思考那些事务的来龙去脉。</h5><h5 id="大脑中肩负短期记忆的那部分阻止类似RAM，意识就好像CPU，负责处理而不是存储。所以每次只能考虑两三件事，那些未处理的就放在短期记忆空间。必须保证RAM里排队的任务尽量减少，很多人终日忙碌，RAM早已不堪重负，心神不宁。一定不要把两件事同时放入大脑，无法同时对付它们，反倒增加压力。应当记录下，收集RAM中其他的事情。或者是有些你毫无能力处理，无可奈何的事情，大脑仍然一个劲提醒你，所以要锁定大脑只处理RAM中有的事情，把那些当前无法处理的，记录到另一个地方。"><a href="#大脑中肩负短期记忆的那部分阻止类似RAM，意识就好像CPU，负责处理而不是存储。所以每次只能考虑两三件事，那些未处理的就放在短期记忆空间。必须保证RAM里排队的任务尽量减少，很多人终日忙碌，RAM早已不堪重负，心神不宁。一定不要把两件事同时放入大脑，无法同时对付它们，反倒增加压力。应当记录下，收集RAM中其他的事情。或者是有些你毫无能力处理，无可奈何的事情，大脑仍然一个劲提醒你，所以要锁定大脑只处理RAM中有的事情，把那些当前无法处理的，记录到另一个地方。" class="headerlink" title="大脑中肩负短期记忆的那部分阻止类似RAM，意识就好像CPU，负责处理而不是存储。所以每次只能考虑两三件事，那些未处理的就放在短期记忆空间。必须保证RAM里排队的任务尽量减少，很多人终日忙碌，RAM早已不堪重负，心神不宁。一定不要把两件事同时放入大脑，无法同时对付它们，反倒增加压力。应当记录下，收集RAM中其他的事情。或者是有些你毫无能力处理，无可奈何的事情，大脑仍然一个劲提醒你，所以要锁定大脑只处理RAM中有的事情，把那些当前无法处理的，记录到另一个地方。"></a>大脑中肩负短期记忆的那部分阻止类似RAM，意识就好像CPU，负责处理而不是存储。所以每次只能考虑两三件事，那些未处理的就放在短期记忆空间。必须保证RAM里排队的任务尽量减少，很多人终日忙碌，RAM早已不堪重负，心神不宁。一定不要把两件事同时放入大脑，无法同时对付它们，反倒增加压力。应当记录下，收集RAM中其他的事情。或者是有些你<code>毫无能力处理</code>，<code>无可奈何</code>的事情，大脑仍然一个劲提醒你，所以要锁定大脑只处理RAM中有的事情，把那些当前无法处理的，记录到另一个地方。</h5><h4 id="二、横向管理工作流的5个步骤"><a href="#二、横向管理工作流的5个步骤" class="headerlink" title="二、横向管理工作流的5个步骤"></a>二、横向管理工作流的5个步骤</h4><ol><li>收集引起我们注意的事务和信息；<ul><li>百分百地收集一切“未竟之事”，无论大小、轻重、缓急，只要是待处理都收集。放入存储器，解放大脑容量！必须定期清空！</li></ul></li><li>理清每个项目的意义和相关措施；<ul><li>从工作篮中获取到材料 -&gt; 是什么 -&gt; 是否行动 -&gt; 下一步行动是什么 -&gt; 立即执行/委派/延迟执行</li></ul></li><li>组织整理结果，提出选项；<ul><li>容器即是清单</li><li>项目即是需要多个步骤才能完成的任务</li><li>下一步行动的归类：下一步行动清单</li><li>无须付诸行动的事务：垃圾、需要酝酿的资料、将来/也许清单、归档</li></ul></li><li>进行思考回顾；<ul><li>每周回顾</li></ul></li><li>选择行动；<ul><li>选择行动方案的三种方法：<ol><li>确定某一时刻具体行动的“四标准法”<br>情景、有多少时间、有多少精力、重要性  </li><li>确认每日工作的“三分类法”<br>执行事先安排好的工作、处理突发事件、安排自己的工作</li><li>总体检视工作的“六层次法”<br>5楼视野：目的和原则 你为何存在、你真正在乎的是什么<br>4楼视野：愿景 3 ~ 4年<br>3楼视野：目标 1 ~ 2年<br>2楼视野：关注点及责任范围 兴趣、责任、义务<br>1楼视野：当前项目 短时间内想有成效的事情<br>地面：当前行动 行动清单</li></ol></li></ul></li></ol><h4 id="三、纵向管理项目的5个阶段-（自然式计划法的技巧）"><a href="#三、纵向管理项目的5个阶段-（自然式计划法的技巧）" class="headerlink" title="三、纵向管理项目的5个阶段 （自然式计划法的技巧）"></a>三、纵向管理项目的5个阶段 （自然式计划法的技巧）</h4><ol><li>定义目标和原则</li><li>展望成果</li><li>集思广益</li><li>组织管理</li><li>明确下一步的行动方案</li></ol><h4 id="四、确定时间、空间和工具"><a href="#四、确定时间、空间和工具" class="headerlink" title="四、确定时间、空间和工具"></a>四、确定时间、空间和工具</h4><ul><li><p>预留时间</p><ul><li>如果你能够在某一个有限的时间内解决某个问题，那 么，它会让你感受到自己的控制能力空前提高，并且体验到一种强烈的成就感，从而 激发并开启你那蕴含丰富创造力的宝库。</li><li>不要轻易中断。</li></ul></li><li><p>空间</p><ul><li>你必须准备一个专门的工作空间——在家、在工作场所，如果可能的话，甚至在 旅途中。</li></ul></li><li><p>准备好工具、触手可及</p></li></ul><h4 id="五、收集阶段：填充工作篮"><a href="#五、收集阶段：填充工作篮" class="headerlink" title="五、收集阶段：填充工作篮"></a>五、收集阶段：填充工作篮</h4><ul><li><p>收集工作</p><ul><li>训练自己发现那些没有到位的事情。</li><li>注意不要落入“鸡毛蒜皮”的小事的陷阱 之中，导致精力被一点一滴地侵蚀掉。</li></ul></li><li><p>大脑中的搜集活动:清扫大脑</p><ul><li>如果你的大脑中空空如也，无牵无挂，你的工作篮恐怕已经塞得满满的了。</li></ul></li></ul><h4 id="六、处理阶段：清空工作篮"><a href="#六、处理阶段：清空工作篮" class="headerlink" title="六、处理阶段：清空工作篮"></a>六、处理阶段：清空工作篮</h4><ol><li>丢弃你不再需要的一切;</li><li>完成任何用不了<code>2分钟</code>就能搞定的事情;</li><li>把任何可以委托他人处理的事情交代出去;</li><li>为所有需要走过<code>2分钟</code>时间的工作注明提示信息，并分类纳入你的管理系统之中;</li><li>根据获取的信息，明确你目前一些较为重要的工作和任务。</li></ol><p>基本原则:</p><ol><li>从最上面的一项开始处理。</li><li>一次只处理一件事情。</li><li>永远不要把任何事情再次放回工作篮。</li></ol><p><code>2分钟原则</code>魔力无限</p><ul><li>如果下一步行动用不了2分钟即可搞定的话，那么抓紧时间动手吧。</li><li>一旦遵循<code>2分钟事件处理原则</code>养成了习惯，他们的工作效率就能获 得显著的提高。</li><li>居然有如此之多的事情可以在2分钟内解决掉，而且，这其中还包括 他们手头上最重要的一些工作。</li></ul><h4 id="七、管理阶段：建立好清单"><a href="#七、管理阶段：建立好清单" class="headerlink" title="七、管理阶段：建立好清单"></a>七、管理阶段：建立好清单</h4><p>两样东西就足够：</p><ul><li>清单（通常为一个）</li><li>文件夹</li></ul><h5 id="界限的重要性：类型分门别类、清晰明确，这一点至关重要。每一种都代表着我们同自-己所签订的不同类型的协议。"><a href="#界限的重要性：类型分门别类、清晰明确，这一点至关重要。每一种都代表着我们同自-己所签订的不同类型的协议。" class="headerlink" title="界限的重要性：类型分门别类、清晰明确，这一点至关重要。每一种都代表着我们同自 己所签订的不同类型的协议。"></a>界限的重要性：类型分门别类、清晰明确，这一点至关重要。每一种都代表着我们同自 己所签订的不同类型的协议。</h5><h4 id="八、检查阶段：回过头看看"><a href="#八、检查阶段：回过头看看" class="headerlink" title="八、检查阶段：回过头看看"></a>八、检查阶段：回过头看看</h4><p>在这一阶段，你需要处理两种主要情况：</p><ol><li>你需要关注哪部分的内容？什么时候？</li><li>为了确保整个系统持续运转，解放你的大脑，使之能够从事更高层次的思考和组织管理活动，你需要采取什么行动？多久一次？</li></ol><ul><li>每周回顾<ol><li>对于这一周的事物你很可能还记忆犹新，这使你能够进行完整的剖析和回顾。</li><li>你总值发现有这样一些事情，它们要求你在工作时间必须立刻找到某些人。这样一来，你还来得及在他们周未外出渡假前与他们取得联系。</li><li>清理一下精神上的储藏室是一件大好事，之后你就可以安心地享受周末的休闲<br>时光。</li></ol></li><li>“大局”的回顾<ul><li>不思考将永远丧失控制自己生活的能力。</li></ul></li></ul><h4 id="九、行动阶段：选最佳方案"><a href="#九、行动阶段：选最佳方案" class="headerlink" title="九、行动阶段：选最佳方案"></a>九、行动阶段：选最佳方案</h4><ul><li><p>选择当前行动的 4 个标准 </p><ol><li>环境</li><li>时间</li><li>精力</li><li>重要性</li></ol></li><li><p>评估每日工作的 3 个标准</p><ol><li>处理预先明确的工作 </li><li>处理随时出现的新工作 </li><li>安排下一步的工作</li></ol></li><li><p>回顾检查的 6 个层次（同第二章：选择行动）</p></li></ul><h4 id="十、创造性地思考工作"><a href="#十、创造性地思考工作" class="headerlink" title="十、创造性地思考工作"></a>十、创造性地思考工作</h4><ul><li>需要更多的、非计划模式<ul><li>任何一项成功的工作在进行到中途时，看起来都如同一场灾难。</li></ul></li><li>你需要建立起各种系统，运用各种技巧，来帮助你更频繁、更轻松、更深层次地 思考你面对的各种情况。</li></ul><h4 id="十一、养成收集和自省的习惯"><a href="#十一、养成收集和自省的习惯" class="headerlink" title="十一、养成收集和自省的习惯"></a>十一、养成收集和自省的习惯</h4><p>如果你的消极情绪来自于自我毁约，那有 3 种方法来对付这种局面，消除负面影响:</p><ol><li>不签订协议 </li><li>完成协议</li><li>重新协商协议</li></ol><ul><li>停止消极的想像总是能够增强你的精力。</li><li>你清单中和资料堆中的任何事情，要么强烈地吸引着你，要么令人深恶痛绝，中间状态是不存在的。</li></ul><p>我是一个年老的人，认识到许许多多的困难和问题。但是， 它们中的绝大部分从未发生过。 — 马克吐温</p><p>最后，要关注<code>结果</code>。</p><img src="/images/reading/gtd.png" width="70%" style="margin:auto;" alt="处理工作流程" />]]></content>
      
      
      <categories>
          
          <category> Reading Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Read </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode 键盘快捷键插入代码</title>
      <link href="/fe/IDE/2.vscode-snippets/"/>
      <url>/fe/IDE/2.vscode-snippets/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>不太喜欢敲几个字母再等提示出来，太慢了，就应该按键盘直接插入</p><h4 id="先在-snippets-中新建配置"><a href="#先在-snippets-中新建配置" class="headerlink" title="先在 snippets 中新建配置"></a>先在 snippets 中新建配置</h4><p><code>cmd + shift + p</code> -&gt; <code>Configure User Snippets</code> -&gt; <code>New Global Snippets File</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// console.log.code-snippets</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"console.log"</span>: &#123;</span><br><span class="line"><span class="attr">"scope"</span>: <span class="string">"javascript,typescript,javascriptreact"</span>,</span><br><span class="line"><span class="attr">"prefix"</span>: <span class="string">"log"</span>,</span><br><span class="line"><span class="attr">"body"</span>: [</span><br><span class="line"><span class="string">"console.log('$1', $1);"</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">"description"</span>: <span class="string">"Log output to console"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="然后在-Keyboard-Shortcuts-中"><a href="#然后在-Keyboard-Shortcuts-中" class="headerlink" title="然后在 Keyboard Shortcuts 中"></a>然后在 Keyboard Shortcuts 中</h4><p><code>Preference</code> -&gt; <code>Keyboard Shortcuts</code> -&gt; <code>JSON file</code></p><p>or <code>cmd + k cmd + s</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"key"</span>: <span class="string">"shift+cmd+l"</span>,</span><br><span class="line">  <span class="attr">"command"</span>: <span class="string">"editor.action.insertSnippet"</span>,</span><br><span class="line">  <span class="attr">"args"</span>: &#123; <span class="attr">"name"</span>: <span class="string">"console.log"</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// setting.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"workbench.colorTheme"</span>: <span class="string">"Dracula"</span>,</span><br><span class="line">    <span class="attr">"window.zoomLevel"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"workbench.iconTheme"</span>: <span class="string">"material-icon-theme"</span>,</span><br><span class="line">    <span class="attr">"editor.tabSize"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"emmet.triggerExpansionOnTab"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"emmet.includeLanguages"</span>: &#123;</span><br><span class="line">        <span class="attr">"javascript"</span>: <span class="string">"javascriptreact"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"eslint.validate"</span>: [</span><br><span class="line">        <span class="string">"javascript"</span>,</span><br><span class="line">        <span class="string">"javascriptreact"</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"language"</span>: <span class="string">"html"</span>,</span><br><span class="line">            <span class="attr">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"language"</span>: <span class="string">"vue"</span>,</span><br><span class="line">            <span class="attr">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"editor.codeActionsOnSave"</span>: &#123;</span><br><span class="line">        <span class="attr">"source.fixAll.eslint"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"terminal.external.osxExec"</span>: <span class="string">"iTerm.app"</span>,</span><br><span class="line">    <span class="attr">"emmet.extensionsPath"</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RxJS 万物皆可 Stream 🌊</title>
      <link href="/fe/JavaScript/7.rxjs/"/>
      <url>/fe/JavaScript/7.rxjs/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="RxJS-响应式编程的-JavaScript-实现"><a href="#RxJS-响应式编程的-JavaScript-实现" class="headerlink" title="RxJS 响应式编程的 JavaScript 实现"></a>RxJS 响应式编程的 JavaScript 实现</h3><ul><li>使用 <code>Observables</code> 的响应式编程（Reactive Programming）的库，它使编写异步或基于回调的代码更容易。</li><li>主动轮询来获取上一个任务执行结果的方式称为 <code>Proactive</code> 方式。相对的 <code>Reactive</code> 方式，是把上一个任务执行结果的反馈作为一个时间，这个事件的到来会触发下一个任务的执行。</li><li><code>响应式编程</code> 是使用 <code>异步数据流</code> 进行编程。</li></ul><h4 id="Stream-流"><a href="#Stream-流" class="headerlink" title="Stream / 流"></a>Stream / 流</h4><p>作为响应式编程的核心，流的本质是一个按时间顺序排列的进行中时间的序列集合。</p><ul><li>某种类型的值</li><li>错误</li><li>已完成的信号</li><li>–a—b-c—d—X—|-&gt;</li></ul><p>在常见的响应式编程库中，每个 <code>stream</code> 都会有多个方法，<code>map</code>、<code>filter</code>、<code>scan</code> 等等。当你调用其中一个方法时，例如 <code>clickStream.map(f)</code>，它就会基于原来的 <code>click stream</code> 返回一个新的 <code>stream</code>。它不会对原来的 <code>click steam</code> 作任何修改。这个特性就是不可变性(<code>Immutability</code>)</p><img class="article-image" src="/images/fe/reactive-stream.jpg" width="500" alt="响应式编程" /><h4 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h4><p><code>观察者模式</code>又叫<code>发布订阅模式（Publish/Subscribe）</code>，它是一种一对多的关系，让多个<code>观察者（Obesver）</code>同时监听一个<code>主题（Subject）</code>，这个主题也就是<code>被观察者（Observable）</code>，被观察者的状态发生变化时就会通知所有的观察者，使得它们能够接收到更新的内容。观察者模式主题和观察者是分离的，不是主动触发而是被动监听。</p><h4 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h4><p><code>迭代器（Iterator）模式</code>又叫<code>游标（Sursor）模式</code>，迭代器具有 <code>next</code> 方法，可以顺序访问一个聚合对象中的各个元素，而不需要暴露该对象的内部表现。迭代器模式可以把迭代的过程从从业务逻辑中分离出来，迭代器将使用者和目标对象隔离开来，即使不了解对象的内部构造，也可以通过迭代器提供的方法顺序访问其每个元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> iterable = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> iterator = iterable[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line">iterator.next(); <span class="comment">// =&gt; &#123; value: "1", done: false&#125;</span></span><br><span class="line">iterator.next(); <span class="comment">// =&gt; &#123; value: "2", done: false&#125;</span></span><br><span class="line">iterator.next(); <span class="comment">// =&gt; &#123; value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><h3 id="RxJS-解决了哪些问题："><a href="#RxJS-解决了哪些问题：" class="headerlink" title="RxJS 解决了哪些问题："></a>RxJS 解决了哪些问题：</h3><ul><li>同步和异步的统一写法</li><li>数据变更过程的组合拆分</li><li>数据和视图的精确绑定</li><li>条件变更后，对应数据自动重新计算</li></ul><h4 id="Observable-（被观察者、可观察对象）"><a href="#Observable-（被观察者、可观察对象）" class="headerlink" title="Observable （被观察者、可观察对象）"></a>Observable （被观察者、可观察对象）</h4><p>An observable is a function that creates an observer and attaches it to the source where<br>values are expected, for example, clicks, mouse events from a dom element or an Http<br>request, etc.</p><p>表示一个概念，这个概念是一个可调用的未来值或事件的集合。</p><h4 id="Observer-（观察者）"><a href="#Observer-（观察者）" class="headerlink" title="Observer （观察者）"></a>Observer （观察者）</h4><p>It is an object with next(), error() and complete() methods, that will get called when there<br>is interaction to the with the observable i.e. the source interacts for an example button<br>click, Http request, etc.</p><p>一个回调函数的集合，它知道如何去监听由 <code>Observable</code> 提供的值。</p><h4 id="Subscription-（订阅）"><a href="#Subscription-（订阅）" class="headerlink" title="Subscription （订阅）"></a>Subscription （订阅）</h4><p>When the observable is created, to execute the observable we need to subscribe to it. It<br>can also be used to cancel the execution.</p><p>表示 <code>Observable</code> 的执行，主要用于取消 <code>Observable</code> 的执行。</p><h4 id="Operators-（操作符）"><a href="#Operators-（操作符）" class="headerlink" title="Operators （操作符）"></a>Operators （操作符）</h4><p>An operator is a pure function that takes in observable as input and the output is also an<br>observable.</p><p>采用函数式编程风格的纯函数 (<code>pure function</code>)，使用像 <code>map</code>、<code>filter</code>、<code>concat</code>、<code>flatMap</code> 等这样的操作符来处理集合。</p><h4 id="Subject-（主体）"><a href="#Subject-（主体）" class="headerlink" title="Subject （主体）"></a>Subject （主体）</h4><p>A subject is an observable that can multicast i.e. talk to many observers. Consider a button<br>with an event listener, the function attached to the event using addlistener is called every<br>time the user clicks on the button similar functionality goes for subject too.</p><p>相当于 <code>EventEmitter</code>，并且是将值或事件多路推送给多个 <code>Observer</code> 的唯一方式。</p><h4 id="Schedulers-（调度器）"><a href="#Schedulers-（调度器）" class="headerlink" title="Schedulers （调度器）"></a>Schedulers （调度器）</h4><p>用来控制并发并且是中央集权的调度员，允许我们在发生计算时进行协调，例如 <code>setTimeout</code> 或 <code>requestAnimationFrame</code> 或其他。</p><h4 id="Advantages-of-using-RxJS"><a href="#Advantages-of-using-RxJS" class="headerlink" title="Advantages of using RxJS"></a>Advantages of using RxJS</h4><p>The following are the advantages of using RxJS:</p><ul><li>RxJS can be used with other Javascript libraries and frameworks. It is supported<br>by javascript and also with typescript. Few examples are Angular, ReactJS, Vuejs,<br>nodejs etc.</li><li>RxJS is an awesome library when it comes to the handling of async tasks.RxJS uses<br>observables to work with reactive programming that deals with asynchronous data<br>calls, callbacks and event-based programs.</li><li>RxJS offers a huge collection of operators in mathematical, transformation,<br>filtering, utility, conditional, error handling, join categories that makes life easy<br>when used with reactive programming.</li></ul><h4 id="Disadvantages-of-using-RxJS"><a href="#Disadvantages-of-using-RxJS" class="headerlink" title="Disadvantages of using RxJS"></a>Disadvantages of using RxJS</h4><p>The following are the disadvantages of using RxJS:</p><ul><li>Debugging the code with observables is little difficult.</li><li>As you start to use Observables, you can end up your full code wrapped under the<br>observables.</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="Observer-Observable-与-Subscription-示例"><a href="#Observer-Observable-与-Subscription-示例" class="headerlink" title="Observer, Observable 与 Subscription 示例"></a>Observer, Observable 与 Subscription 示例</h4><p><code>Observable</code> 是多个值的惰性推送集合。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observable = Observable.create(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">  observer.next(<span class="string">'foo'</span>);</span><br><span class="line">  observer.next(<span class="string">'bar'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subscription = observable.subscribe(<span class="built_in">console</span>.log);</span><br><span class="line">subscription.unsubscrible();</span><br></pre></td></tr></table></figure><h4 id="Subject-是一种特殊的-Observable，它允许将值多播给多个观察者"><a href="#Subject-是一种特殊的-Observable，它允许将值多播给多个观察者" class="headerlink" title="Subject 是一种特殊的 Observable，它允许将值多播给多个观察者"></a>Subject 是一种特殊的 Observable，它允许将值多播给多个观察者</h4><p>从观察者的角度而言，它无法判断 <code>Observable</code> 执行是来自普通的 <code>Observable</code> 还是 <code>Subject</code> 。</p><p><code>Subject</code> 是一个有如下方法的对象： <code>next(v)</code>、 <code>error(e)</code> 和 <code>complete()</code> 。要给 <code>Subject</code> 提供新值，只要调用 <code>next(theValue)</code> 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> subject = <span class="keyword">new</span> Rx.Subject();</span><br><span class="line"></span><br><span class="line">subject.subscribe(&#123;</span><br><span class="line">  next: <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'observerA: '</span> + v)</span><br><span class="line">&#125;);</span><br><span class="line">subject.subscribe(&#123;</span><br><span class="line">  next: <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'observerB: '</span> + v)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">subject.next(<span class="number">1</span>);</span><br><span class="line">subject.next(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h4 id="Operators-操作符是函数，它基于当前的-Observable-创建一个新的-Observable。这是一个无副作用的操作：前面的-Observable-保持不变。"><a href="#Operators-操作符是函数，它基于当前的-Observable-创建一个新的-Observable。这是一个无副作用的操作：前面的-Observable-保持不变。" class="headerlink" title="Operators 操作符是函数，它基于当前的 Observable 创建一个新的 Observable。这是一个无副作用的操作：前面的 Observable 保持不变。"></a>Operators 操作符是函数，它基于当前的 Observable 创建一个新的 Observable。这是一个无副作用的操作：前面的 Observable 保持不变。</h4><p><a href="https://rxmarbles.com/" target="_blank" rel="noopener">marble diagram（宝石图/弹珠图）</a></p><p><code>RxJS 6</code> 及更新版本提供了可链式调用（<code>Pipeable</code>）的 <code>RxJS</code> 操作符，假设 <code>source</code> 是一个已定义的 <code>observable</code>，一个简单示例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">source.pipe(</span><br><span class="line">  map(<span class="function"><span class="params">x</span> =&gt;</span> x + x),</span><br><span class="line">  mergeMap(<span class="function"><span class="params">n</span> =&gt;</span> <span class="keyword">of</span>(n + <span class="number">1</span>, n + <span class="number">2</span>).pipe(</span><br><span class="line">    filter(<span class="function"><span class="params">x</span> =&gt;</span> x % <span class="number">1</span> == <span class="number">0</span>),</span><br><span class="line">    scan(<span class="function">(<span class="params">acc, x</span>) =&gt;</span> acc + x, <span class="number">0</span>),</span><br><span class="line">  )),</span><br><span class="line">  catchError(<span class="function"><span class="params">err</span> =&gt;</span> <span class="keyword">of</span>(<span class="string">'error found'</span>)),</span><br><span class="line">).subscribe(<span class="built_in">console</span>.log);</span><br></pre></td></tr></table></figure><h4 id="Schedulers"><a href="#Schedulers" class="headerlink" title="Schedulers"></a>Schedulers</h4><p>调度器控制着何时启动 <code>subscription</code> 和何时发送通知。使用 <code>subscribeOn</code> 来调度 <code>subscribe()</code> 调用在什么样的上下文中执行。 默认情况下，<code>Observable</code> 的 <code>subscribe()</code> 调用会立即同步地执行。然而，你可能会延迟或安排在给定的调度器上执行实际的 <code>subscription</code> ，使用实例操作符 <code>observeOn(scheduler)</code>，其中 <code>scheduler</code> 是你提供的参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> observable = Rx.Observable.create(<span class="function"><span class="keyword">function</span> (<span class="params">proxyObserver</span>) </span>&#123;</span><br><span class="line">  proxyObserver.next(<span class="number">1</span>);</span><br><span class="line">  proxyObserver.next(<span class="number">2</span>);</span><br><span class="line">  proxyObserver.next(<span class="number">3</span>);</span><br><span class="line">  proxyObserver.complete();</span><br><span class="line">&#125;)</span><br><span class="line">.observeOn(Rx.Scheduler.async);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> finalObserver = &#123;</span><br><span class="line">  next: <span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'got value '</span> + x),</span><br><span class="line">  error: <span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">'something wrong occurred: '</span> + err),</span><br><span class="line">  complete: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'done'</span>),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'just before subscribe'</span>);</span><br><span class="line">observable.subscribe(finalObserver);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'just after subscribe'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// before</span></span><br><span class="line"><span class="comment">// after</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// done</span></span><br></pre></td></tr></table></figure><h4 id="将数组转化为-Observable"><a href="#将数组转化为-Observable" class="headerlink" title="将数组转化为 Observable"></a>将数组转化为 Observable</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">from</span> &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">from</span>(array);</span><br><span class="line"></span><br><span class="line">result.subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x));</span><br></pre></td></tr></table></figure><h4 id="Hot-Observable-与-Cold-Observable"><a href="#Hot-Observable-与-Cold-Observable" class="headerlink" title="Hot Observable 与 Cold Observable"></a>Hot Observable 与 Cold Observable</h4><ul><li>Hot Observable 无论有没有 Subscriber 订阅，事件始终都会发生。当 Hot Observable 有多个订阅者时，Hot Observable 与订阅者们的关系是一对多的关系，可以与多个订阅者共享信息。</li><li>然而，Cold Observable 只有 Subscriber 订阅时，才开始执行发射数据流的代码。并且 Cold Observable 和 Subscriber 只能是一对一的关系，当有多个不同的订阅者时，消息是重新完整发送的。也就是说对 Cold Observable 而言，有多个Subscriber的时候，他们各自的事件是独立的。</li></ul><h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><p>Observable 就是 Promise++。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stream = Rx.Observable.fromPromise(promise)</span><br></pre></td></tr></table></figure><p>Metastream：包含 Stream 的 Stream，可以把它想像为 pointers：每个映射的值都是一个指向其它 Stream 的指针。</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://wiki.jikexueyuan.com/project/android-weekly/issue-145/introduction-to-RP.html" target="_blank" rel="noopener">RP 响应式编程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 3.0</title>
      <link href="/fe/Vue/2.vue-3/"/>
      <url>/fe/Vue/2.vue-3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="认识-Vue3"><a href="#认识-Vue3" class="headerlink" title="认识 Vue3"></a>认识 Vue3</h4><ul><li>Performance 比 Vue2 runtime 快了2倍<ul><li>重写了虚拟 dom 的实现</li><li>编译模板的优化（运行时编译）</li><li>update 性能提高 （在编译时给到需要更新的信息，render中_createVNode的传参，把动态的标记为 PROPS）</li><li>SSR 速度提高</li></ul></li><li>Tree Shaking 按需编译代码</li><li>TS Support</li><li>Composition Api</li><li>Customer Render API 自定义渲染器</li><li>内置新特性组件</li></ul><h4 id="按需编译代码-（从-Vue-中导出函数来用）"><a href="#按需编译代码-（从-Vue-中导出函数来用）" class="headerlink" title="按需编译代码 （从 Vue 中导出函数来用）"></a>按需编译代码 （从 Vue 中导出函数来用）</h4><h4 id="用-TypeScript-重写"><a href="#用-TypeScript-重写" class="headerlink" title="用  TypeScript 重写"></a>用  TypeScript 重写</h4><h4 id="ESlint-Vue3-x"><a href="#ESlint-Vue3-x" class="headerlink" title="ESlint Vue3.x"></a><a href="https://eslint.vuejs.org/rules" target="_blank" rel="noopener">ESlint Vue3.x</a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">extends: [</span><br><span class="line">  <span class="string">'airbnb'</span>,</span><br><span class="line">  <span class="string">'plugin:vue/vue3-essential'</span>,</span><br><span class="line">  <span class="string">'plugin:vue/vue3-strongly-recommended'</span>,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>VSCode 的 vetur 暂时还不支持 Vue3 或者我哪里配的不对，它总是强行把 Vue2.x 的 lint 给我过一遍，所以就需要在 <code>settings.json</code> 里：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"vetur.validation.template": false,</span><br></pre></td></tr></table></figure><h4 id="Fragment-第一反应-React-的-lt-gt-lt-gt"><a href="#Fragment-第一反应-React-的-lt-gt-lt-gt" class="headerlink" title="Fragment (第一反应 React 的 &lt;&gt;&lt;/&gt;)"></a>Fragment (第一反应 React 的 &lt;&gt;&lt;/&gt;)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;<span class="number">1</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div&gt;2&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h4><ul><li>更好的逻辑服用与代码组织</li><li>更好的类型推导（函数对类型友好）</li></ul><p>通过类型来组织代码，<code>Options API</code>，当代码量小的时候很友好，但代码量大时很难维护，反复横跳，一个功能被拆分到很多地方。</p><p><code>Composition API</code> 解决了这个难题。同时也解决 <code>Mixin</code> 带来的副作用。本质是函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数组件，从原生命周期抽离出共用的逻辑，本质是函数，容易复用</span></span><br><span class="line"><span class="keyword">const</span> sayHello = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  onMounted(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    sayHello()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建响应式对象的方式</span></span><br><span class="line">    <span class="comment">// 3点</span></span><br><span class="line">    <span class="comment">// ref</span></span><br><span class="line">    <span class="comment">// 值类型</span></span><br><span class="line">    <span class="keyword">const</span> count = ref(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'count'</span>, count);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reactive / readonly</span></span><br><span class="line">    <span class="comment">// &#123;&#125; [] 引用类型</span></span><br><span class="line">    <span class="keyword">const</span> state = reactive(&#123; <span class="attr">time</span>: <span class="number">0</span> &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'state'</span>, state);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      count.value++</span><br><span class="line">      state.time++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 响应式系统 api</span></span><br><span class="line">    <span class="comment">// computed</span></span><br><span class="line">    <span class="keyword">const</span> double = computed(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> count.value * <span class="number">2</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听double</span></span><br><span class="line">    watch(double, (value) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'watch double'</span>, value);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count,</span><br><span class="line">      state,</span><br><span class="line">      double,</span><br><span class="line">      handleClick,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="Vue-Test-Utils-Next（VTU）-单元测试"><a href="#Vue-Test-Utils-Next（VTU）-单元测试" class="headerlink" title="Vue Test Utils Next（VTU） 单元测试"></a>Vue Test Utils Next（VTU） 单元测试</h4><h5 id="测试功能，不是测试细节。主要是为了避免新功能影响旧功能。"><a href="#测试功能，不是测试细节。主要是为了避免新功能影响旧功能。" class="headerlink" title="测试功能，不是测试细节。主要是为了避免新功能影响旧功能。"></a>测试功能，不是测试细节。主要是为了避免新功能影响旧功能。</h5><p>一个组件：</p><ul><li>输入 -&gt; props / 用户交互</li><li>输出 -&gt; dom渲染 / Events（emit）</li></ul><p>例子：<a href="https://github.com/ykzhukian/notebook/blob/master/playground/Vue3.0/__tests__/button.spec.js" target="_blank" rel="noopener">button.spec.js</a></p><p>TDD：Test-driven development 从使用者角度思考</p><ol><li>先写测试 (根据用户使用的方式 user story)</li><li>写逻辑让测试通过</li><li>重构</li></ol><h4 id="TDD模式-重构-Element-UI-Button"><a href="#TDD模式-重构-Element-UI-Button" class="headerlink" title="TDD模式 重构 Element UI Button"></a>TDD模式 重构 Element UI Button</h4><ol><li>拆分需要实现的功能</li></ol><ul><li>可以显示 slot 的内容</li><li>设置 size</li><li>设置 type</li><li>是否 圆角、plain、disabled、…</li></ul><p>例子：<a href="https://github.com/ykzhukian/notebook/blob/master/playground/Vue3.0/__tests__/button.spec.js" target="_blank" rel="noopener">button.spec.js</a></p><h4 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h4><h4 id="Custom-Render-API"><a href="#Custom-Render-API" class="headerlink" title="Custom Render API"></a>Custom Render API</h4><p>自定义渲染，用户可自定义渲染目标平台（比如Canvas）</p><p>tbc…</p>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aspect Ratio</title>
      <link href="/fe/CSS/3.aspect-ratio/"/>
      <url>/fe/CSS/3.aspect-ratio/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="用-CSS-Padding-来控制元素在不同宽度下固定的比例"><a href="#用-CSS-Padding-来控制元素在不同宽度下固定的比例" class="headerlink" title="用 CSS Padding 来控制元素在不同宽度下固定的比例"></a>用 CSS Padding 来控制元素在不同宽度下固定的比例</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">100%</span>; <span class="comment">/* 1:1 Aspect Ratio */</span></span><br><span class="line">  <span class="attribute">position</span>: relative; <span class="comment">/* If you want text inside of it */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* If you want text inside of the container */</span></span><br><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 16:9 Aspect Ratio */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">56.25%</span>; <span class="comment">/* 16:9 Aspect Ratio (divide 9 by 16 = 0.5625) */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 4:3 Aspect Ratio */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">75%</span>; <span class="comment">/* 4:3 Aspect Ratio (divide 3 by 4 = 0.75) */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 3:2 Aspect Ratio */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">66.66%</span>; <span class="comment">/* 3:2 Aspect Ratio (divide 2 by 3 = 0.6666)  */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 8:5 Aspect Ratio */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">62.5%</span>; <span class="comment">/* 8:5 Aspect Ratio (divide 5 by 8 = 0.625) */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS grid</title>
      <link href="/fe/CSS/2.css-grid/"/>
      <url>/fe/CSS/2.css-grid/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="拖延了几年的-CSS-grid-使用"><a href="#拖延了几年的-CSS-grid-使用" class="headerlink" title="拖延了几年的 CSS grid 使用.."></a>拖延了几年的 CSS grid 使用..</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  设为网格布局以后，容器子元素（项目）的float、display: inline-block、display: table-cell、vertical-align和column-*等设置都将失效。 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid | inline-grid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 定义每列、行的宽高 */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: ... | ...; <span class="comment">/* 定义每一列的列宽 */</span></span><br><span class="line">  <span class="attribute">grid-template-rows</span>: ... | ...; <span class="comment">/* 定义每一行的行高 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* repeat */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">40px</span> <span class="number">50px</span> auto <span class="number">50px</span> <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">25%</span> <span class="number">25%</span> <span class="number">25%</span>; <span class="comment">/* 等同于下面使用 repeat */</span></span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">25%</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 解读 */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: [first] <span class="number">40px</span> [line2] <span class="number">50px</span> [line3] auto [col4-start] <span class="number">50px</span> [five] <span class="number">40px</span> [end];</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: [row1-start] <span class="number">25%</span> [row1-end row2-start] <span class="number">100px</span> [third-line] auto [last-line];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 为什么要命名 */</span></span><br><span class="line"><span class="comment">/* 给Grid布局中的分隔线命名，为的就是可以更好地对区域进行描述。如果我们没有描述某片区域的的需求，自然也不需要命名了。（ZXX） */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* fr：fraction 分数 */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="comment">/* 三等分 */</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr; </span><br><span class="line">  <span class="comment">/* 固定值，然后三等分剩下的大小 */</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">200px</span> <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">  <span class="comment">/* 此处auto仅仅是包裹第一个网格，不会拉伸 */</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: auto <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* grid-template-areas */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>: </span><br><span class="line">    <span class="string">"&lt;grid-area-name&gt; | . | none | ..."</span></span><br><span class="line">    <span class="string">"..."</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 支持中文区域名称 */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>: </span><br><span class="line">    <span class="string">"葡萄 葡萄 葡萄"</span></span><br><span class="line">    <span class="string">"龙虾 养鱼 养鱼"</span></span><br><span class="line">    <span class="string">"龙虾 养鱼 养鱼"</span></span><br><span class="line">    <span class="string">"西瓜 西瓜 西瓜"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 如果我们给网格区域命了名，但是没有给网格线命名，则会自动根据网格区域名称生成网格线名称，规则是区域名称后面加-start和-end。例如，某网格区域名称是“葡萄”，则左侧column线名称就是“葡萄-start”，左侧column线名称就是“葡萄-end”。 */</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"putao"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"longxia"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"yangyu"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"xigua"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* grid-template */</span></span><br><span class="line"><span class="comment">/* grid-template是grid-template-rows，grid-template-columns和grid-template-areas属性的缩写。 */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template</span>: &lt;grid-template-rows&gt; / &lt;grid-template-columns&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">grid-template</span>: </span><br><span class="line">    <span class="string">"葡萄 葡萄 葡萄"</span> <span class="number">1</span>fr </span><br><span class="line">    <span class="string">"龙虾 养鱼 养鱼"</span> <span class="number">1</span>fr </span><br><span class="line">    <span class="string">"龙虾 养鱼 养鱼"</span> <span class="number">1</span>fr </span><br><span class="line">    <span class="string">"西瓜 西瓜 西瓜"</span> <span class="number">1</span>fr</span><br><span class="line">    /<span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 推荐用 grid 代替 grid-template */</span></span><br><span class="line">  <span class="attribute">grid</span>: <span class="number">100px</span> <span class="number">300px</span> / auto-flow <span class="number">200px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 以上等同于 */</span></span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">grid-auto-flow</span>: column;</span><br><span class="line">  <span class="attribute">grid-auto-columns</span>: <span class="number">200px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">grid</span>: [ auto-flow &amp;&amp; dense? ] &lt;grid-auto-rows&gt;? / &lt;grid-template-columns&gt;;</span><br><span class="line">  <span class="attribute">grid</span>: &lt;grid-template-rows&gt; / [ auto-flow &amp;&amp; dense? ] &lt;grid-auto-columns&gt;?;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Grid-Container-的全部属性"><a href="#Grid-Container-的全部属性" class="headerlink" title="Grid Container 的全部属性"></a>Grid Container 的全部属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 斜杠前面都是rows相关属性，斜杠后面都是columns相关属性 */</span></span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid | inline-grid | subgrid;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">grid-template-columns</span>: &lt;track-size&gt; ... | &lt;line-name&gt; &lt;track-size&gt; ...;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">grid-template-rows</span>: &lt;track-size&gt; ... | &lt;line-name&gt; &lt;track-size&gt; ...;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">"header header header header"</span></span><br><span class="line">    <span class="string">"main main . sidebar"</span></span><br><span class="line">    <span class="string">"footer footer footer footer"</span>;</span><br><span class="line">    </span><br><span class="line">  <span class="attribute">grid-template</span>: none | subgrid | &lt;grid-template-rows&gt; / &lt;grid-template-columns&gt;;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">grid-template</span>: [row1-start] <span class="string">"header header header"</span> <span class="number">25px</span> [row1-end]</span><br><span class="line">    [row2-start] <span class="string">"footer footer footer"</span> <span class="number">25px</span> [row2-end]</span><br><span class="line">    / auto <span class="number">50px</span> auto;</span><br><span class="line">    </span><br><span class="line">  <span class="attribute">grid-column-gap</span>: &lt;line-size&gt;;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">grid-row-gap</span>: &lt;line-size&gt;;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">grid-gap</span>: &lt;grid-row-gap&gt; &lt;grid-column-gap&gt;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 现在用 */</span></span><br><span class="line">  <span class="attribute">gap</span>: &lt;grid-row-gap&gt; &lt;grid-column-gap&gt;;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">justify-items</span>: start | end | center | stretch;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">align-items</span>: start | end | center | stretch;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">justify-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">align-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">place-content</span>: &lt;align-content&gt; &lt;justify-content&gt;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 隐式的网格宽度 */</span></span><br><span class="line">  <span class="attribute">grid-auto-columns</span>: &lt;track-size&gt; ...;</span><br><span class="line">   </span><br><span class="line">  <span class="attribute">grid-auto-rows</span>: &lt;track-size&gt; ...;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">grid-auto-flow</span>: row | column | row dense | column dense;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* dense这个英文是稠密的意思。如果有设置，则表示自动排列启用“密集”打包算法。如果稍后出现的网格比较小，则尝试看看前面有没有合适的地方放置，使网格尽可能稠密紧凑。此属性值仅仅改变视觉顺序，会导致DOM属性和实际呈现顺序不符合，这对于可访问性是不友好的，建议谨慎使用。 */</span></span><br><span class="line">  <span class="attribute">grid</span>: &lt;grid-template-rows&gt; / [ auto-flow &amp;&amp; dense? ] &lt;grid-auto-columns&gt;?;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Grid-Items-的全部属性"><a href="#Grid-Items-的全部属性" class="headerlink" title="Grid Items 的全部属性"></a>Grid Items 的全部属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: &lt;number&gt; | &lt;name&gt; | span &lt;number&gt; | span &lt;name&gt; | auto;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">grid-column-end</span>: &lt;number&gt; | &lt;name&gt; | span &lt;number&gt; | span &lt;name&gt; | auto;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">grid-row-start</span>: &lt;number&gt; | &lt;name&gt; | span &lt;number&gt; | span &lt;name&gt; | auto;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">grid-row-end</span>: &lt;number&gt; | &lt;name&gt; | span &lt;number&gt; | span &lt;name&gt; | auto;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">grid-column</span>: &lt;start-line&gt; / &lt;end-line&gt; | &lt;start-line&gt; / span &lt;value&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">grid-row</span>: &lt;start-line&gt; / &lt;end-line&gt; | &lt;start-line&gt; / span &lt;value&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">grid-area</span>: &lt;name&gt; | &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">justify-self</span>: stretch | start | end | center;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">align-self</span>: stretch | start | end | center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="https://www.zhangxinxu.com/wordpress/2018/11/display-grid-css-css3/?shrink=1#grid-template-columns-rows" target="_blank" rel="noopener">张鑫旭 CSS Grid</a></p><p><a href="https://zhuanlan.zhihu.com/p/33030746" target="_blank" rel="noopener">Grid布局完整指南</a></p>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSE 与 WebSocket</title>
      <link href="/fe/JavaScript/5.sse-vs-websocket/"/>
      <url>/fe/JavaScript/5.sse-vs-websocket/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>SSE与WebSocket有相似功能，都是用来建立浏览器与服务器之间的通信渠道。两者的区别在于：</p><ul><li>WebSocket是全双工通道，可以双向通信，功能更强；SSE是单向通道，只能服务器向浏览器端发送。</li><li>WebSocket是一个新的协议，需要服务器端支持；SSE则是- 部署在 HTTP协议之上的，现有的服务器软件都支持。</li><li>SSE是一个轻量级协议，相对简单；WebSocket是一种较重的协议，相对复杂。</li><li>SSE默认支持断线重连，WebSocket则需要额外部署。</li><li>SSE支持自定义发送的数据类型。</li><li>SSE不支持CORS 参数url就是服务器网址，必须与当前网页的网址在同一个网域（domain），而且协议和端口都必须相同。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双端支持 gzip 优化网页加载</title>
      <link href="/fe/JavaScript/4.gzip-webpack-nginx/"/>
      <url>/fe/JavaScript/4.gzip-webpack-nginx/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="1-Nginx-打开-gzip-可以压缩文件，减少浏览器访问时需要下载的文件大小，从而加速网页打开"><a href="#1-Nginx-打开-gzip-可以压缩文件，减少浏览器访问时需要下载的文件大小，从而加速网页打开" class="headerlink" title="1. Nginx 打开 gzip 可以压缩文件，减少浏览器访问时需要下载的文件大小，从而加速网页打开"></a>1. Nginx 打开 gzip 可以压缩文件，减少浏览器访问时需要下载的文件大小，从而加速网页打开</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 nginx.conf server 中添加下面的配置即可</span></span><br><span class="line">gzip on;</span><br><span class="line">gzip_buffers 32 4K;</span><br><span class="line">gzip_comp_level 6;</span><br><span class="line">gzip_min_length 100;</span><br><span class="line">gzip_types application/javascript text/css text/xml;</span><br><span class="line">gzip_vary on;</span><br></pre></td></tr></table></figure><h3 id="2-由于这样压缩会占用服务器-cpu-资源，所以压缩可以由前端打包的时候来做"><a href="#2-由于这样压缩会占用服务器-cpu-资源，所以压缩可以由前端打包的时候来做" class="headerlink" title="2. 由于这样压缩会占用服务器 cpu 资源，所以压缩可以由前端打包的时候来做"></a>2. 由于这样压缩会占用服务器 cpu 资源，所以压缩可以由前端打包的时候来做</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack 中配置</span></span><br><span class="line"><span class="keyword">const</span> CompressionWebpackPlugin = <span class="built_in">require</span>(<span class="string">'compression-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> CompressionWebpackPlugin(&#123;</span><br><span class="line">  test: <span class="regexp">/\.js$|\.html$|\.css$/</span>,</span><br><span class="line">  <span class="comment">// 超过4kb压缩</span></span><br><span class="line">  threshold: <span class="number">4096</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>这样就可以打包生成 <code>.js</code> 的同时，生成压缩后的相应文件 <code>.js.gz</code>，一并传到服务器</li><li>虽然也可以只传 <code>.gz</code> 文件，但都上传更保险（为了要兼容不支持 gzip 的浏览器）</li></ul><h4 id="如果配合各类云使用"><a href="#如果配合各类云使用" class="headerlink" title="如果配合各类云使用"></a>如果配合各类云使用</h4><ol><li>build 之后上传至云<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn build-prod</span><br><span class="line">yarn upload-static</span><br></pre></td></tr></table></figure></li><li>修改 webpack 中 output 路径<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">  publicPath: <span class="string">'//s.sls.upyun.net/asdf/'</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><h4 id="Ngnix-中打开-gzip-static，就可以优先使用已有的压缩文件，不用-Nginx-再压缩"><a href="#Ngnix-中打开-gzip-static，就可以优先使用已有的压缩文件，不用-Nginx-再压缩" class="headerlink" title="Ngnix 中打开 gzip_static，就可以优先使用已有的压缩文件，不用 Nginx 再压缩"></a><code>Ngnix</code> 中打开 <code>gzip_static</code>，就可以优先使用已有的压缩文件，不用 <code>Nginx</code> 再压缩</h4><p>需要安装 <a href="http://nginx.org/en/docs/http/ngx_http_gzip_static_module.html" target="_blank" rel="noopener">ngx_http_gzip_static_module</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip_static on; <span class="comment"># 已有.gz文件则直接用，不需要再压缩</span></span><br></pre></td></tr></table></figure><h3 id="3-项目中这么运用发现-gzip-static-不起作用"><a href="#3-项目中这么运用发现-gzip-static-不起作用" class="headerlink" title="3. 项目中这么运用发现 gzip_static 不起作用"></a>3. 项目中这么运用发现 <code>gzip_static</code> 不起作用</h3><p>在配置完后，发现浏览器中返回的文件，带有 <code>Content-Encoding: gzip</code> 但大小和 <code>Webpack</code> 打包时的 <code>.gz</code> 文件不一致，猜想服务器返回的还是由 <code>Nginx</code> 压缩生成的文件。</p><p>原因是该项目中用了 <code>proxy_pass</code> 反代所以不支持 <code>gzip_static</code></p><h3 id="4-就是只想上传-gz-文件，不传原文件"><a href="#4-就是只想上传-gz-文件，不传原文件" class="headerlink" title="4. 就是只想上传 .gz 文件，不传原文件"></a>4. 就是只想上传 <code>.gz</code> 文件，不传原文件</h3><p>安装 <a href="http://nginx.org/en/docs/http/ngx_http_gunzip_module.html" target="_blank" rel="noopener">ngx_http_gunzip_module</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 nginx.conf 中打开</span></span><br><span class="line">gunzip on;</span><br></pre></td></tr></table></figure><p>即可不用上传压缩前的文件了</p><h3 id="5-这个优化体验下来并没有太大作用"><a href="#5-这个优化体验下来并没有太大作用" class="headerlink" title="5. 这个优化体验下来并没有太大作用"></a>5. 这个优化体验下来并没有太大作用</h3>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
            <tag> Tools </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOS 浏览器 点击会出现黑色阴影</title>
      <link href="/fe/CSS/1.ios-tap-border/"/>
      <url>/fe/CSS/1.ios-tap-border/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>太久不写C端的界面和适配，忘了兼容有多可怕…</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.remove-ios-tap-shadow</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-tap-highlight-color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack 分环境打包结构</title>
      <link href="/webpack/2.webpack-evnironment/"/>
      <url>/webpack/2.webpack-evnironment/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.common.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> resolve = <span class="function">(<span class="params">dir</span>) =&gt;</span> path.resolve(__dirname, dir);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: [</span><br><span class="line">    resolve(<span class="string">'./src/index.tsx'</span>)</span><br><span class="line">  ],</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: resolve(<span class="string">'./dist'</span>),</span><br><span class="line">    publicPath: <span class="string">'/'</span>,</span><br><span class="line">    filename: <span class="string">'[name].[hash].js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.tsx?$/</span>,</span><br><span class="line">        use: <span class="string">'ts-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">        exclude: [</span><br><span class="line">          resolve(<span class="string">'./node_modules'</span>),</span><br><span class="line">          resolve(<span class="string">'./dist'</span>),</span><br><span class="line">        ],</span><br><span class="line">        use: [<span class="string">'babel-loader'</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$|\.scss$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'style-loader'</span>,</span><br><span class="line">          <span class="string">'css-loader?url=false'</span>,</span><br><span class="line">          <span class="string">'sass-loader'</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'sass-resources-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              resources: [resolve(<span class="string">'./src/assets/sass/variables.scss'</span>)],</span><br><span class="line">              caches: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">        include: [</span><br><span class="line">          resolve(<span class="string">'./src'</span>),</span><br><span class="line">          resolve(<span class="string">'./node_modules/normalize.css'</span>),</span><br><span class="line">          resolve(<span class="string">'./node_modules/react-toastify/dist/ReactToastify.css'</span>),</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.jpe?g$|\.png$|\.svg$|\.woff$|\.ttf$/</span>,</span><br><span class="line">        loader: <span class="string">'file-loader?name=[name].[ext]'</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.jsx'</span>, <span class="string">'.es6'</span>, <span class="string">'.ts'</span>, <span class="string">'.tsx'</span>],</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'@'</span>: resolve(<span class="string">'src'</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: resolve(<span class="string">'./public/index.html'</span>),</span><br><span class="line">      favicon: resolve(<span class="string">'./src/assets/images/favicon.svg'</span>),</span><br><span class="line">      title: <span class="string">'Caching'</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">  ],</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">'/api/**'</span>: &#123;</span><br><span class="line">        target: <span class="string">'http://dev-api.baixing.cn'</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        secure: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.dev.js</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">'../webpack.common.js'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> dotenv = <span class="built_in">require</span>(<span class="string">'dotenv'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> resolve = <span class="function">(<span class="params">dir</span>) =&gt;</span> path.resolve(__dirname, dir);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> envFile = dotenv.config(&#123; <span class="attr">path</span>: resolve(<span class="string">'../.env.dev'</span>) &#125;).parsed</span><br><span class="line"><span class="keyword">const</span> envKeys = <span class="built_in">Object</span>.keys(envFile).reduce(<span class="function">(<span class="params">prev, next</span>) =&gt;</span> &#123;</span><br><span class="line">  prev[<span class="string">`process.env.<span class="subst">$&#123;next&#125;</span>`</span>] = <span class="built_in">JSON</span>.stringify(envFile[next]);</span><br><span class="line">  <span class="keyword">return</span> prev;</span><br><span class="line">&#125;, &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(common, &#123;</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  devtool: <span class="string">'inline-source-map'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    publicPath: <span class="string">'/promotion/'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(envKeys)</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">"scripts": &#123;</span><br><span class="line">    "start": "webpack-dev-server --open --config ./config/webpack.local.js",</span><br><span class="line">    "build-dev": "webpack --config ./config/webpack.dev.js",</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise.resolve().then</title>
      <link href="/fe/JavaScript/3.promise.resolve.then/"/>
      <url>/fe/JavaScript/3.promise.resolve.then/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve().then(doSomething);</span><br></pre></td></tr></table></figure><ul><li>Promise 是立即执行的，它创建的时候就会执行，不存在将 Promise 推入微任务中的说法；</li><li>resolve() 是用来表示 Promise 的状态为 fulfilled，相当于只是定义了一个有状态的 Promise，但是并没有调用它；</li><li>Promise 调用 then 的前提是 Promise 的状态为 fulfilled；</li><li>只有 Promise 调用 then 的时候，then 里面的函数才会被推入微任务中；</li></ul>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器的 EventLoop</title>
      <link href="/fe/JavaScript/2.browser-event-loop/"/>
      <url>/fe/JavaScript/2.browser-event-loop/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="浏览器的内核：-Render-进程"><a href="#浏览器的内核：-Render-进程" class="headerlink" title="浏览器的内核： Render 进程"></a>浏览器的内核： Render 进程</h4><ul><li>GUI渲染线程</li><li>JavaScript 引擎线程 （Chrome v8）</li><li>事件触发线程</li><li>定时器线程</li><li>异步 HTTP 请求线程</li></ul><h4 id="JavaScrit是一个单线程（JS引擎是单线程的）的拥有异步特性（拥有独特的异步线程）的事件驱动（事件也是一个单独的线程处理）的解释型脚本语言。"><a href="#JavaScrit是一个单线程（JS引擎是单线程的）的拥有异步特性（拥有独特的异步线程）的事件驱动（事件也是一个单独的线程处理）的解释型脚本语言。" class="headerlink" title="JavaScrit是一个单线程（JS引擎是单线程的）的拥有异步特性（拥有独特的异步线程）的事件驱动（事件也是一个单独的线程处理）的解释型脚本语言。"></a>JavaScrit是一个单线程（JS引擎是单线程的）的拥有异步特性（拥有独特的异步线程）的事件驱动（事件也是一个单独的线程处理）的解释型脚本语言。</h4><h4 id="1-异步线程"><a href="#1-异步线程" class="headerlink" title="1. 异步线程"></a>1. 异步线程</h4><ul><li>网络请求<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fetch(url).then(<span class="function"><span class="params">res</span> =&gt;</span> res.json()).then(<span class="built_in">console</span>.log);</span><br></pre></td></tr></table></figure></li></ul><ul><li>定时器<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(fn, <span class="number">0</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li>事件触发<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'clicked btn'</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> timeoutId = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    clearTimeout(timeoutId);</span><br><span class="line">&#125;, <span class="number">5000</span>);</span><br></pre></td></tr></table></figure>在执行 <code>console.log(&#39;hello&#39;)</code> 的时候，点击按钮，不会立刻执行绑定的事件，JS引擎处于阻塞状态。</li></ul><h4 id="2-任务队列-Task-Queue"><a href="#2-任务队列-Task-Queue" class="headerlink" title="2. 任务队列 Task Queue"></a>2. 任务队列 Task Queue</h4><img class="article-image" src="/images/fe/browser-event-loop.png" width="500" alt="Browser Event Loop" /><ul><li>JS引擎从上到下将程序入栈出栈的过程中，遇到那些有异步能力的 WebApi，会选择把他们放入他们自己的线程中，短暂的忽略他们。继续执行那些同步代码。</li><li>在各自的线程里完成处理之后，会将这些异步结果以回调的形式放入 Task Queue 中。</li><li>等待JS引擎空闲，再次回到JS引擎中。</li></ul><h4 id="3-Event-Loop-（浏览器）"><a href="#3-Event-Loop-（浏览器）" class="headerlink" title="3. Event Loop （浏览器）"></a>3. Event Loop （浏览器）</h4><ul><li>任务队列和JS主引擎之间的桥梁。</li><li>它被设计出来的目的也就是为了保证JS引擎线程的安全和稳定的。</li><li>其实是在把异步转化为同步。</li><li>An event loop has one or more task queues. A task queue is a set of tasks.</li></ul><h4 id="4-1-宏任务队列-Macrotask-Queue"><a href="#4-1-宏任务队列-Macrotask-Queue" class="headerlink" title="4.1 宏任务队列 Macrotask Queue"></a>4.1 宏任务队列 Macrotask Queue</h4><ul><li>setTimeout</li><li>setInterval</li></ul><h4 id="4-2-微任务队列-Microtask-Queue"><a href="#4-2-微任务队列-Microtask-Queue" class="headerlink" title="4.2 微任务队列 Microtask Queue"></a>4.2 微任务队列 Microtask Queue</h4><ul><li>Promise</li><li>process.nextTick</li><li>MutationObserver</li></ul><p>MicroTask 会在一次 EventLoop 中全部执行完。</p><ul><li>同步（主线程执行栈清空）-&gt; 微任务（全部） -&gt; 宏任务（第一个） -&gt; 微（全部）-&gt; 宏（一个）-&gt; …</li></ul><h4 id="5-其他关于浏览器加载资源阻塞"><a href="#5-其他关于浏览器加载资源阻塞" class="headerlink" title="5. 其他关于浏览器加载资源阻塞"></a>5. 其他关于浏览器加载资源阻塞</h4><ul><li><p>script</p><img class="article-image" src="/images/fe/script-async-defer.jpeg" width="500" alt="<script> async defer" /></li><li><p>css 加载不会阻塞 DOM 树的解析</p></li><li><p>css 加载会阻塞 DOM 树的渲染</p></li><li><p>css 加载会阻塞后面 js 语句的执行</p></li></ul><h2 id="ps-前端输入-url-到页面渲染的流程"><a href="#ps-前端输入-url-到页面渲染的流程" class="headerlink" title="ps: 前端输入 url 到页面渲染的流程:"></a>ps: 前端输入 url 到页面渲染的流程:</h2><h3 id="1-DNS-解析-URL-的过程"><a href="#1-DNS-解析-URL-的过程" class="headerlink" title="1. DNS 解析 URL 的过程"></a>1. DNS 解析 URL 的过程</h3><p>浏览器输入域名后, 操作系统首先会检查本地 hosts 文件是否有当前网址的映射关系, 如果有直接调用这个 IP 地址映射完成域名解析<br>如果没有则查找本地 DNS 解析器缓存中是否有当前网址的映射关系, 如果有直接返回完成域名解析<br>如果没有则到本地 TCP/IP 设置的 DNS 服务器进行查询, 如果查找的网址在 DNS 资源的范围内则返回解析给主机, 此解析具有权威性<br>如果不在本地 DNS 资源范围内, 但该服务器存储了网址的映射关系, 则调用这个 IP 的映射关系, 完成域名解析<br>如果本地 DNS 服务器解析失败并且缓存中没有对应的映射关系则去 DNS 服务器中查找</p><h3 id="2-浏览器与服务器交互的过程"><a href="#2-浏览器与服务器交互的过程" class="headerlink" title="2. 浏览器与服务器交互的过程"></a>2. 浏览器与服务器交互的过程</h3><p>根据 IP 建立 TCP 连接（三次握手）<br>首先客户端向服务端发送一个同步信号 SYN， 等待服务端接收<br>服务端收到同步信号后会返回一个确认信号以及一个同步信号 SYN/ACK 给客户端<br>客户端收到后返回一个确认信号 ACK，此时通道建立<br>HTTP 发起请求<br>服务器处理请求， 浏览器接收 HTTP 响应<br>渲染页面<br>关闭 TCP 连接（四次挥手）<br>客户端发送一个结束信号 FIN 给服务端<br>服务端收到后发送一个确认信号 ACK 给客户端<br>当服务端数据传输完之后发送一个 FIN 结束信号给客户端<br>客户端收到后发送一个确认信号 ACK 给服务端， 此时通道关闭</p><h3 id="3-浏览器页面渲染的过程"><a href="#3-浏览器页面渲染的过程" class="headerlink" title="3. 浏览器页面渲染的过程"></a>3. 浏览器页面渲染的过程</h3><p>解析 HTML 文件为 DOM 树<br>解析 CSS 文件为 CSS 规则树<br>合并 DOM 树以及 CSS 规则树为 renderTree 渲染树<br>进入 Layout 环节， 对元素节点进行大小尺寸以及位置的计算<br>painting 环节，将渲染树各个节点绘制到屏幕上</p><p>复制于：<a href="https://www.jianshu.com/p/d1819f5ae215" target="_blank" rel="noopener">https://www.jianshu.com/p/d1819f5ae215</a></p>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node 中的 EventLoop</title>
      <link href="/fe/JavaScript/1.node-event-loop/"/>
      <url>/fe/JavaScript/1.node-event-loop/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="Node-js-中的-Event-Loop"><a href="#Node-js-中的-Event-Loop" class="headerlink" title="Node.js 中的 Event Loop"></a>Node.js 中的 Event Loop</h3><img class="article-image" src="/images/fe/event-loop.png" alt="Event Loop" />I/O：读写操作、输入输出、请求响应<h4 id="1-setImmediate"><a href="#1-setImmediate" class="headerlink" title="1. setImmediate()"></a>1. setImmediate()</h4><ul><li>在 <code>Check</code> 阶段被执行</li><li>不会检查函数队列，而是检查 I/O 队列，当所有 I/O 在当前循环结束后会执行</li><li>只要 <code>poll</code> 队列为空，代码被 <code>setImmediate()</code>，无论是否有 <code>timers</code> 达到下限时间，<code>setImmediate()</code> 的代码都先执行。</li></ul><h4 id="2-setTimeout-fn-0"><a href="#2-setTimeout-fn-0" class="headerlink" title="2. setTimeout(fn, 0)"></a>2. setTimeout(fn, 0)</h4><ul><li>在 <code>Timer</code> 阶段被执行</li><li>回调会被安排在 <code>Timer</code> 队列中</li><li>The timer phase is the first phase but is called after the I/O phase as well as the Check phase.</li></ul><h4 id="2-2-setImmediate-和-setTimeout-fn-0-为什么有时候顺序随机？"><a href="#2-2-setImmediate-和-setTimeout-fn-0-为什么有时候顺序随机？" class="headerlink" title="2.2 setImmediate() 和 setTimeout(fn, 0) 为什么有时候顺序随机？"></a>2.2 setImmediate() 和 setTimeout(fn, 0) 为什么有时候顺序随机？</h4><p>在 <code>Node</code> 中执行下面的代码，会出现两种输出结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line">setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setImmediate'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">setImmediate</span><br><span class="line">setTimeout</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">setTimeout</span><br><span class="line">setImmediate</span><br></pre></td></tr></table></figure><p>一次循环首先进入的是 <code>timers</code> 阶段，进入这个阶段后，主线程会检查一下当前时间，是否满足定时器的条件。如果满足就执行回调函数，否则就离开这个阶段。所以如果进入之前一毫秒已经过去了，那么 <code>setTimeout</code> 的回调会首先执行。<code>setTimeout</code> 最小值是 <code>&gt;= 1ms/4ms</code>，<code>0</code> 会被转成 <code>&gt;= 1ms/4ms</code> 根据具体情况确定</p><p>而下面这样就只会出现唯一的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.readFile(<span class="string">"my-file-path.txt"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"SETTIMEOUT"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  setImmediate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"SETIMMEDIATE"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//run it</span></span><br><span class="line">node index.js</span><br><span class="line"></span><br><span class="line"><span class="comment">//output (always)</span></span><br><span class="line">SETIMMEDIATE</span><br><span class="line">SETTIMEOUT</span><br></pre></td></tr></table></figure><p>因为 <code>fs.readFile</code> 的回调是在 <code>poll</code> 阶段执行的，当其回调执行完毕之后，<code>poll</code> 队列为空，而 <code>setTimeout</code> 入了 <code>timers</code> 队列，此时有代码被 <code>setImmediate()</code>，于是时间循环进入 <code>check</code> 阶段执行回调，之后再下一个时间循环再进入 <code>timers</code> 阶段。<br>整个顺序是:</p><ul><li>循环开始，没有 <code>timer</code>，没有 <code>I/O 回调</code></li><li>fs.readFile 执行，把回调加入 <code>I/O Callbacks</code></li><li>进入 <code>poll</code> 阶段，等待文件读取</li><li>第二轮循环</li><li>有 <code>I/O 回调</code>，进入 <code>I/O Callbacks</code> 阶段执行 fs.readFile 的回调</li><li>随后循环进入 <code>check</code> 阶段，发现有 <code>setImmediate</code> 回调，执行</li><li>之后下一轮循环才又回到 <code>timers</code> 阶段，这时才执行 <code>setTimeout</code> 的回调</li></ul><h4 id="3-process-nextTick"><a href="#3-process-nextTick" class="headerlink" title="3. process.nextTick()"></a>3. process.nextTick()</h4><ul><li>当前操作结束后就执行，和 Event Loop 状态无关，几乎是同步的，在本轮循环就安排执行</li><li>安排在 <code>nextTickQueue</code></li><li>会阻塞 I/O，阻塞 Promise</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Start'</span>);</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'PR1'</span>));</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'TO1'</span>), <span class="number">0</span>);</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'PR2'</span>));</span><br><span class="line">setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'IM1'</span>));</span><br><span class="line">process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'NT1'</span>));</span><br><span class="line">fs.readFile(<span class="string">"./profile"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"SETTIMEOUT"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'NT2'</span>));</span><br><span class="line">  setImmediate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"SETIMMEDIATE"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'IM2'</span>));</span><br><span class="line">process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'NT3'</span>));</span><br><span class="line">setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'IM3'</span>));</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'PR3'</span>));</span><br><span class="line">setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'IM4'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Done'</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'STDone'</span>), <span class="number">1500</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">Start <span class="comment">// i---1</span></span><br><span class="line">Done <span class="comment">// i---1</span></span><br><span class="line">NT1</span><br><span class="line">NT3</span><br><span class="line">PR1</span><br><span class="line">PR2</span><br><span class="line">PR3</span><br><span class="line">TO1</span><br><span class="line">NT2</span><br><span class="line">IM1</span><br><span class="line">IM2</span><br><span class="line">IM3</span><br><span class="line">IM4</span><br><span class="line">SETIMMEDIATE</span><br><span class="line">SETTIMEOUT</span><br><span class="line">STDone</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在浏览器中 IM 永远会比 T0 先执行</span></span><br></pre></td></tr></table></figure><h4 id="4-Promise-resolve-then"><a href="#4-Promise-resolve-then" class="headerlink" title="4. Promise.resolve().then"></a>4. Promise.resolve().then</h4><ul><li>这个其实没有把回调安排到下一个循环和 <code>process.nextTick</code> 类似，在本轮循环就安排了</li><li>会进入异步任务里面的”微任务”（microtask）队列</li><li><code>同步任务</code> 结束后 <code>nextTickQueue</code> 结束后 <code>microTaskQueue</code></li></ul><p>其他：</p><ol><li>Promises do swallow exceptions</li><li>创建了两个 Promises 出来，并且什么都没做就抛了第一个，Don’t create promises only to throw them away.</li><li>上述讨论也就在 <code>Node</code> 环境下<br>在浏览器中，基本只剩 <code>setTimeout</code> 和 <code>Promise.resolve().then</code><br>更多的需要关注浏览器的 <code>EventLoop</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>useCallback 易忽略的一个小误区</title>
      <link href="/fe/React/1.usecallback/"/>
      <url>/fe/React/1.usecallback/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="React-Hooks-中的-useCallback-其实并不能避免-function-在-render-时的-allocation"><a href="#React-Hooks-中的-useCallback-其实并不能避免-function-在-render-时的-allocation" class="headerlink" title="React Hooks 中的 useCallback 其实并不能避免 function 在 render 时的 allocation"></a>React Hooks 中的 useCallback 其实并不能避免 function 在 render 时的 allocation</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> FC = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [visible, setVisible] = useState(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleShow = <span class="function"><span class="params">()</span> =&gt;</span> setVisible(<span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">const</span> handleHide = <span class="function"><span class="params">()</span> =&gt;</span> setVisible(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;button onClick=&#123;handleShow&#125;&gt;hide&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;handleHide&#125;&gt;hide&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>上面的例子中，每次 FC 的渲染都会重新定义一次，<code>handleShow</code> 和 <code>handleHide</code> 两个 function</p><p>借助 <code>useCallback</code> 可以改写为：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> FC = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [visible, setVisible] = useState(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleShow = useCallback(<span class="function"><span class="params">()</span> =&gt;</span> setVisible(<span class="literal">true</span>), [])</span><br><span class="line">  <span class="keyword">const</span> handleHide = useCallback(<span class="function"><span class="params">()</span> =&gt;</span> setVisible(<span class="literal">false</span>), [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;button onClick=&#123;handleShow&#125;&gt;hide&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;handleHide&#125;&gt;hide&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="实际上，这样组件的性能会更差，因为-useCallback-并不能阻止这两个-function-被重新定义，反而增加了运算量："><a href="#实际上，这样组件的性能会更差，因为-useCallback-并不能阻止这两个-function-被重新定义，反而增加了运算量：" class="headerlink" title="实际上，这样组件的性能会更差，因为 useCallback 并不能阻止这两个 function 被重新定义，反而增加了运算量："></a>实际上，这样组件的性能会更差，因为 useCallback 并不能阻止这两个 function 被重新定义，反而增加了运算量：</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handleShow = useCallback(<span class="function"><span class="params">()</span> =&gt;</span> setVisible(<span class="literal">true</span>), [])</span><br></pre></td></tr></table></figure><p>可以拆解成</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handleShow = <span class="function"><span class="params">()</span> =&gt;</span> setVisitble(<span class="literal">true</span>)</span><br><span class="line">React.useCallback(handleShow, [])</span><br></pre></td></tr></table></figure><p>比原来还多一步</p><h4 id="真正需要-useCallback-的情形"><a href="#真正需要-useCallback-的情形" class="headerlink" title="真正需要 useCallback 的情形"></a>真正需要 useCallback 的情形</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> FC = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [visible, setVisible] = useState(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleShow = useCallback(<span class="function"><span class="params">()</span> =&gt;</span> setVisible(<span class="literal">true</span>), [])</span><br><span class="line">  <span class="keyword">const</span> handleHide = useCallback(<span class="function"><span class="params">()</span> =&gt;</span> setVisible(<span class="literal">false</span>), [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;Button onClick=&#123;handleShow&#125;&gt;show&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Button onClick=&#123;handleHide&#125;&gt;hide&lt;/</span>Button&gt;</span><br><span class="line">    &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const Button = (props) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  const &#123; onClick &#125; = props</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  useEffect(</span></span><br><span class="line"><span class="regexp">    () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">      console.log(onClick) /</span><span class="regexp">/ 每次 onClick 改变，做些什么</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    [onClick]</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;button onClick=&#123;onClick&#125;&gt;&#123;props.children&#125;&lt;/</span>button&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的这种情况，在 <code>&lt;Button&gt;</code> 组件中，用到了 <code>useEffect</code>。 而 <code>useEffect</code> 对于对象类型的 <code>props</code> 是比较他们的 <code>reference</code>，来判断要不要执行。</p><p>如果在 <code>FC</code> 中没有用 <code>useCallback</code>，那么每次 <code>FC</code> 的渲染都会定义全新的 <code>handleShow</code>（每次的 <code>reference</code> 都不一样），所以都会在 <code>&lt;Button&gt;</code> 中触发 <code>console.log(onClick)</code>。</p><p>所以 <code>useCallback</code> 就是用来控制相同的依赖参数下，是否需要保持这个 funciton 的 <code>reference</code>，而他并不能避免重新定义这个 function。</p><p>相关链接：<a href="https://kentcdodds.com/blog/usememo-and-usecallback" target="_blank" rel="noopener">When to useMemo and useCallback</a></p>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode 自动补全 JSX</title>
      <link href="/fe/IDE/1.vscode-jsx/"/>
      <url>/fe/IDE/1.vscode-jsx/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="在-setting-json-中加入"><a href="#在-setting-json-中加入" class="headerlink" title="在 setting.json 中加入"></a>在 setting.json 中加入</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"emmet.triggerExpansionOnTab"</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"emmet.includeLanguages"</span>: &#123;</span><br><span class="line">    <span class="string">"javascript"</span>: <span class="string">"javascriptreact"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ts</span></span><br><span class="line"><span class="string">"tslint.exclude"</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="string">"tslint.autoFixOnSave"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uni-app 初体验</title>
      <link href="/fe/Vue/1.uni-app/"/>
      <url>/fe/Vue/1.uni-app/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="多端"><a href="#多端" class="headerlink" title="多端"></a>多端</h3><p>开发了一个小程序并且上线了，太难用了。</p><p>类似于之前尝试过的 <code>Taro</code> ，最大的感触就是，虽然好像多端开发很🐂，但是只要一碰到一些奇怪的交互，分分钟就这边说不支持这个，那边说不支持那个。所以对于业务逻辑比较单一，偏向展示类的，还是可以用用的。但既要体验优秀，又要多端支持，心会很累。</p>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带 Cookie 去海边</title>
      <link href="/cookie/3.haiwan-sea/"/>
      <url>/cookie/3.haiwan-sea/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><img class="article-image" src="/images/cookie/8.png" width="" alt="有点帅" /><br /><img class="article-image" src="/images/cookie/9.png" width="" alt="" /><br />]]></content>
      
      
      <categories>
          
          <category> Photograph </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>百度智能云体验</title>
      <link href="/tool/2.baidu-cloud-service/"/>
      <url>/tool/2.baidu-cloud-service/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="百度智能云BCD"><a href="#百度智能云BCD" class="headerlink" title="百度智能云BCD"></a>百度智能云BCD</h3><p>买之前没有做足功课，结果买完才发现百度智能云的域名解析不支持指定端口号。<br>这也导致了我原本想通过Nginx来部署一些二级域名，现在做不到了。<br>有点后悔。</p><h3 id="BCC、CDN"><a href="#BCC、CDN" class="headerlink" title="BCC、CDN"></a>BCC、CDN</h3><p>用下来还算稳定，暂时还没有遇到什么坑。</p>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端项目中的库引用 CDN</title>
      <link href="/webpack/1.external-cdn/"/>
      <url>/webpack/1.external-cdn/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="使用CDN引入组件库-减少编译后js文件大小"><a href="#使用CDN引入组件库-减少编译后js文件大小" class="headerlink" title="使用CDN引入组件库 减少编译后js文件大小"></a>使用CDN引入组件库 减少编译后js文件大小</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 Webpack 中配置 externals</span></span><br><span class="line"><span class="comment">// 此处以 vue.config.js 为例</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  configureWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.externals = &#123;</span><br><span class="line">      <span class="string">'vue'</span>: <span class="string">'Vue'</span>,</span><br><span class="line">      <span class="string">'vue-router'</span>: <span class="string">'VueRouter'</span>,</span><br><span class="line">      <span class="string">'element-ui'</span>: <span class="string">'ELEMENT'</span>,</span><br><span class="line">      <span class="string">'axios'</span>: <span class="string">'axios'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 public/index.html 中直接引用cdn资源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vue/2.6.11/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vue-router/3.1.3/vue-router.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/element-ui/lib/index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/axios/0.19.2/axios.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
            <tag> Vue </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>陪好朋友拍婚照</title>
      <link href="/photo/1.li-sir-wedding/"/>
      <url>/photo/1.li-sir-wedding/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><img src="/images/rx100m7/1.jpeg" width="100%" alt="花絮" /><br /><img src="/images/rx100m7/2.jpeg" width="100%" alt="就差个红毯啦" /><br /><img src="/images/rx100m7/3.jpeg" width="100%" alt="超甜" /><br />]]></content>
      
      
      <categories>
          
          <category> Photograph </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>带 Cookie 去打针</title>
      <link href="/cookie/2.injection/"/>
      <url>/cookie/2.injection/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><img src="/images/cookie/5.jpeg" width="100%" alt="打完针有点郁闷" /><br /><img src="/images/cookie/6.jpeg" width="100%" alt="换个姿势郁闷" /><br /><img src="/images/cookie/7.jpeg" width="100%" alt="困兽" /><br />]]></content>
      
      
      <categories>
          
          <category> Photograph </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git 速度提升</title>
      <link href="/tool/1.git-speed-up/"/>
      <url>/tool/1.git-speed-up/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="0-设置前，git-clone-慢至-25kb-s-无法忍受"><a href="#0-设置前，git-clone-慢至-25kb-s-无法忍受" class="headerlink" title="0. 设置前，git clone 慢至 25kb/s 无法忍受"></a>0. 设置前，git clone 慢至 25kb/s 无法忍受</h3><h3 id="1-搭建ss或其他科学上网通道，并开启本地监听"><a href="#1-搭建ss或其他科学上网通道，并开启本地监听" class="headerlink" title="1. 搭建ss或其他科学上网通道，并开启本地监听"></a>1. 搭建ss或其他科学上网通道，并开启本地监听</h3><img class="article-image" src="/images/github-speed.png" width="300" alt="设置本地端口(此处用的是Trojan)" /><h3 id="2-按对应端口号设置"><a href="#2-按对应端口号设置" class="headerlink" title="2. 按对应端口号设置"></a>2. 按对应端口号设置</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> http<span class="variable">.https</span>:<span class="comment">//github.com.proxy socks5://127.0.0.1:1086</span></span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> https<span class="variable">.https</span>:<span class="comment">//github.com.proxy socks5://127.0.0.1:1086</span></span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> http<span class="variable">.proxy</span> http:<span class="comment">//127.0.0.1:1080</span></span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> https<span class="variable">.proxy</span> https:<span class="comment">//127.0.0.1:1080</span></span><br></pre></td></tr></table></figure><h3 id="3-查看config"><a href="#3-查看config" class="headerlink" title="3. 查看config"></a>3. 查看config</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global -e</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie 初到家</title>
      <link href="/cookie/1.arrived-home/"/>
      <url>/cookie/1.arrived-home/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><img src="/images/cookie/1.jpeg" width="100%" alt="吐舌头" /><br /><img src="/images/cookie/2.jpeg" width="100%" alt="举高高" /><br /><img src="/images/cookie/3.jpeg" width="100%" alt="吃手" /><br /><img src="/images/cookie/4.jpeg" width="100%" alt="坐着等开饭" /><br />]]></content>
      
      
      <categories>
          
          <category> Photograph </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数独游戏 by React &amp; React Native</title>
      <link href="/case-study/sudoku-app/"/>
      <url>/case-study/sudoku-app/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="游戏界面"><a href="#游戏界面" class="headerlink" title="游戏界面"></a>游戏界面</h2><h4 id="gt-网页地址-Heroku-打开有点慢"><a href="#gt-网页地址-Heroku-打开有点慢" class="headerlink" title="-&gt; 网页地址 Heroku 打开有点慢"></a>-&gt; <a href="https://playingsudoku.herokuapp.com" target="_blank" rel="noopener">网页地址 Heroku 打开有点慢</a></h4><img src="/images/case-study/sudoku/sudoku-1.png" alt="数独游戏" /><h2 id="规则和功能点"><a href="#规则和功能点" class="headerlink" title="规则和功能点"></a>规则和功能点</h2><ul><li>一个简单的 9 x 9 数独游戏</li><li>分4个等级的难度，不同难度初始的数字数量不同</li><li>单元格不同颜色说明：<ol><li>红色：填写的数字有误</li><li>蓝色：双击后标记的单元格</li></ol></li><li>支持保存当前的进度，并且可以回到保存的某个进度，保存的进度支持预览</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>使⽤ JS 实现数独算法和游戏逻辑。<br>React 提供的⺴⻚版 和 React Native 提供的⼿机端两个版本。</p><h2 id="手机端界面"><a href="#手机端界面" class="headerlink" title="手机端界面"></a>手机端界面</h2><h4 id="gt-GitHub"><a href="#gt-GitHub" class="headerlink" title="-&gt; GitHub"></a>-&gt; <a href="https://github.com/ykzhukian/sudokuapp" target="_blank" rel="noopener">GitHub</a></h4><img src="https://raw.githubusercontent.com/ykzhukian/sudokuapp/master/assets/img/home-screen.png" style="width:300px;margin:auto;" alt="数独游戏手机端" /><img src="https://raw.githubusercontent.com/ykzhukian/sudokuapp/master/assets/img/playing.png" style="width:300px;margin:auto;" alt="数独游戏手机端" /><img src="https://raw.githubusercontent.com/ykzhukian/sudokuapp/master/assets/img/restore.png" style="width:300px;margin:auto;" alt="数独游戏手机端" />]]></content>
      
      
      <categories>
          
          <category> Case Study </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
